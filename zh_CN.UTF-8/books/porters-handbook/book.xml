<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//FreeBSD//DTD DocBook XML V5.0-Based Extension//EN"
	"http://www.FreeBSD.org/XML/share/xml/freebsd50.dtd">
<!--
     The FreeBSD Documentation Project
     The FreeBSD Simplified Chinese Project

     Original Revision: r37884
     $FreeBSD$
-->
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:lang="zh_cn">
  <info><title>FreeBSD Porter 手册</title>
    

    <authorgroup>
      <author><orgname>The FreeBSD Documentation Project</orgname></author>
    </authorgroup>

    <pubdate>2000 年 4 月</pubdate>

    <copyright>
      <year>2000</year>
      <year>2001</year>
      <year>2002</year>
      <year>2003</year>
      <year>2004</year>
      <year>2005</year>
      <year>2006</year>
      <year>2007</year>
      <year>2008</year>
      <year>2009</year>
      <year>2010</year>
      <year>2011</year>
      <holder role="mailto:doc@FreeBSD.org">The FreeBSD Documentation
	Project</holder>
    </copyright>


    <authorgroup>
      <author><orgname>&cnproj.freebsd.org;</orgname></author>
    </authorgroup>

    <pubdate>2005 年 11 月</pubdate>

    <copyright>
      <year>2005</year>
      <year>2006</year>
      <year>2007</year>
      <year>2008</year>
      <year>2009</year>
      <year>2010</year>
      <year>2011</year>
      <holder>&cnproj.freebsd.org;</holder>
    </copyright>

    &trademarks;

    &legalnotice;

    <releaseinfo>$FreeBSD$</releaseinfo>
  </info>

    <chapter xml:id="why-port">
      <title>介绍</title>

      <para>几乎每个人都是通过 FreeBSD Ports Collection
	在 FreeBSD 上面装应用程序 (“ports”)的。
	就像FreeBSD的其它部分一样， 它主要来自于志愿者的努力。
	所以在阅读这份文档的时候请务必记住这些。</para>

      <para>在 FreeBSD 的世界里， 任何人都能提交新的 port，
	或志愿地维护一个已有的 port， 如果那个 port 没人维护的话 &mdash;
	不需要任何特殊的权限来做这件事情。</para>

    </chapter>

    <chapter xml:id="own-port">
      <title>自行制作新 port</title>

      <para>那么， 您有兴趣创建自己的 port 或升级现有的 port？
	太好了。</para>

      <para>下面的内容将会提供一些创建FreeBSD port的指导。
	如果想升级一个现有的 port， 那么您应该在看完这些内容并阅读
	<xref linkend="port-upgrading"/>。</para>

      <para>因为这份文档不是十分详细， 您还应该再参考一下
	<filename>/usr/ports/Mk/bsd.port.mk</filename>， 所有 port
	的 Makefile 文件都会包含它。 即使不是每天都去摆弄 Makefile，
	您也会从那个文件里面获得很多知识， 里面的注释非常详细。
	还有要补充一下，如果您有其它的问题， 可以给&a.ports;
	这个 mailing list 发信。</para>

      <note>
	<para>在这份文档里提到的大部分的变量
	  (<varname><replaceable>VAR</replaceable></varname>)
	  是不能修改的。 大多 (但不是全部) 都在
	  <filename>/usr/ports/Mk/bsd.port.mk</filename>
	  的开始部分进行了介绍； 其它一些也应该可以在那里找到。
	  注意这些文件使用了非标准的制表符：
	  <application>Emacs</application> 和
	  <application>Vim</application> 应该能在打开文件的时候自动识别它，
	  而 &man.vi.1; 和 &man.ex.1; 则需要在打开文件的时候通过
	  <command>:set tabstop=4</command> 来修正默认的设置。</para>
      </note>

      <para>
        想练练手吗？ 请参阅我们的
        <link xlink:href="http://wiki.freebsd.org/WantedPorts">希望移植的软件列表</link>
        来看看您是否有兴趣完成其中的任务。
      </para>
    </chapter>

    <chapter xml:id="quick-porting">
      <title>简单的 port</title>

      <para>这一章将介绍如何快速创建一个全新的 port。
	很多时候， 这点内容是不够的，
	您需要阅读这份文档中更深入的内容。</para>

      <para>首先， 需要取得包含源代码的 tar包， 并把它放到
	<varname>DISTDIR</varname>变量所指的地方。 默认的情况下， 这应该是
	<filename>/usr/ports/distfiles</filename>。</para>

      <note>
	<para>下面的内容假定您不需要修改软件的源代码就能在 FreeBSD
	  上编译通过。 如果需要修改代码， 就需要参考下一章的内容了。</para>
      </note>

      <sect1 xml:id="porting-makefile">
	<title>编写 <filename>Makefile</filename></title>

	<para>最简单的 <filename>Makefile</filename>
	  应该是这个样子的：</para>

	<programlisting># New ports collection makefile for:   oneko
# Date created:        5 December 1994
# Whom:                asami
#
# &dollar;FreeBSD&dollar;
#

PORTNAME=      oneko
PORTVERSION=   1.1b
CATEGORIES=    games
MASTER_SITES=  ftp://ftp.cs.columbia.edu/archives/X11R5/contrib/

MAINTAINER=    asami@FreeBSD.org
COMMENT=       A cat chasing a mouse all over the screen

MAN1=          oneko.1
MANCOMPRESSED= yes
USE_IMAKE=     yes

.include &lt;bsd.port.mk&gt;</programlisting>

	<para>看看您是否能够看懂。 不必担心
	  <literal>&dollar;FreeBSD&dollar;</literal>
	  那一行， 当这个 port 被导入到 ports 树里的时候，
	  CVS 会自动填写它。 您可以在 <link linkend="porting-samplem">
	    示范的 Makefile</link>那章找到更多的细节。</para>
      </sect1>


      <sect1 xml:id="porting-desc">
	<title>创建描述文件</title>

	<para>有 2 个描述文件对于任何一个 port 来说是必须的，
	  不论它是不是打算成为 package。 它们是
	  <filename>pkg-descr</filename> 和
	  <filename>pkg-plist</filename>。 这两个文件使用 <filename>pkg-</filename>
	  前缀以区别于其它文件。</para><!-- NOT GOOD -->

	<sect2>
	  <title><filename>pkg-descr</filename> (关于 port 的冗长描述文件)</title>

	  <para>这是 port 里一个较长的描述文件。
	    使用一段或几段文件文字来简明的描述这个 ports 是用来做什么的。</para>

	  <note>
	    <para>这 <emphasis> 不是</emphasis> 手册或者对如何
	      深入使用/编译这个port的说明！ <emphasis>要是您从
		<filename>README</filename> 或者联机手册里面中复制文字的话，
		请务必小心</emphasis>； 通常， 它们不是对这个 port
	      简明扼要的描述， 或者用了难以使用的格式 (比如，
	      联机手册里有迫使两端对齐的空格)。
	      如果要移植的软件有官方的WWW网页， 您应该在这里列出来。
	      使用 <literal>WWW:</literal> 作为前缀来表示
	      <emphasis>一个</emphasis>网站，
	      这样其它的自动工具就能正常工作了。</para>
	  </note>

	  <para>下面是一个简单的
	    <filename>pkg-descr</filename> 例子：</para>

	  <programlisting>This is a port of oneko, in which a cat chases a poor mouse all over
the screen.
 :
(etc.)

WWW: http://www.oneko.org/</programlisting>
	</sect2>

	<sect2>
	  <title><filename>pkg-plist</filename> (port 的装箱单)</title>

	  <para>这份文件列出了 port 所要安装的所有文件。 由于 package
	    也是据此进行打包， 因此它也被称作 <quote>装箱单(packing list)</quote>.
	    这个文件中， 路径是相对于安装的路径的 (通常是
	    <filename>/usr/local</filename> 或
	    <filename>/usr/X11R6</filename>)。 如果您使用
	    <varname>MAN<replaceable>n</replaceable></varname>
	    变量的话， 请不要在这里列出任何联机手册。 假如 port
	    在安装过程中会创建一些目录， 请务必增加对应的
	    <literal>@dirrm</literal> 行，
	    以便在 package 被卸载时予以自动删除。</para>

	  <para>下面是一个简单的例子：</para>

	  <programlisting>bin/oneko
lib/X11/app-defaults/Oneko
lib/X11/oneko/cat1.xpm
lib/X11/oneko/cat2.xpm
lib/X11/oneko/mouse.xpm
@dirrm lib/X11/oneko</programlisting>

	  <para>参考 &man.pkg.create.1; 的联机手册以获得更多有关装箱单的细节</para>

	  <note>
	    <para>建议您将这个文件里的所有的文件名按字母排序。
	      这样， 在升级这个port的时候就能够更方便地核实所做的修改。</para>
	  </note>

	  <note>
	    <para>手工创建这样一份列表可能是一件非常枯燥的事情。
	      如果您的 port 需要安装大量的文件， <link linkend="plist-autoplist">自动创建装箱单</link>
	      会帮您省下不少时间。</para>
	  </note>

	  <para>只有一种情况可以不用 <filename>pkg-plist</filename>文件。
	    如果这个 port 只安装很少量的一些文件或目录的话，
	    这些文件和目录就可以分别列在 <filename>Makefile</filename> 的
	    <varname>PLIST_FILES</varname>和<varname>PLIST_DIRS</varname>
	    变量里。 举个例子来说， 我们可以在上面那个
	    <filename>oneko</filename> port 里面不用
	    <filename>pkg-plist</filename>， 而把下面的这几行加到
	    <filename>Makefile</filename> 里面：</para>

	  <programlisting>PLIST_FILES=    bin/oneko \
                lib/X11/app-defaults/Oneko \
                lib/X11/oneko/cat1.xpm \
                lib/X11/oneko/cat2.xpm \
                lib/X11/oneko/mouse.xpm
PLIST_DIRS=     lib/X11/oneko</programlisting>

	  <para>当然， 如果一个 port 不需要给它自己创建目录的话，
	    就不用设置 <varname>PLIST_DIRS</varname> 变量了。</para>

	  <para>不过， 如果用这种方式来列出 port 要安装的文件和目录的话，
	    也就无法利用在 &man.pkg.create.1; 里介绍的命令来制作 package 了。
	    因此， 这种方法只适用于那些简单的 port， 使它们更为简化。 同时，
	    这种做法也有助于减少 ports collection 中的文件数量。
	    在采用 <filename>pkg-plist</filename> 之前，
	    请考虑一下使用这种方法。</para>

	  <para>稍后我们将看到 <filename>pkg-plist</filename>
	    以及 <varname>PLIST_FILES</varname> 如何处理
	    <link linkend="plist">更复杂的任务</link>。</para>
	</sect2>
      </sect1>

      <sect1 xml:id="porting-checksum">
	<title>创建校验和文件</title>

	<para>只要键入 <command>make makesum</command>，
	  port 便会自动创建 <filename>distinfo</filename>文件。</para>

	<para>如果下载的文件的校验和经常变化，
	  而您又能确保它们的来源可靠 (比如， 来自于CD制造商，
	  或每天联编生成的文档文件)， 就应该在 <varname>IGNOREFILES</varname>
	  里面标明这些文件。 这样， 再运行
	  <command>make makesum</command> 的时候便不会把这些标记
	  <literal>IGNORE</literal> 的文件计算在内了。</para>
      </sect1>

      <sect1 xml:id="porting-testing">
	<title>测试 port</title>

	<para>应当确定您的 port 确实做了您希望它们做的事情，
	  包括打包。下面是需要重点检查的一些重要的工作。</para>


	<itemizedlist>
	  <listitem>
	    <para><filename>pkg-plist</filename> 中没有包括任何不想安装的文件</para>
	  </listitem>

	  <listitem>
	    <para><filename>pkg-plist</filename> 包含了所有应该安装的文件</para>
	  </listitem>

	  <listitem>
	    <para>您的 port 能够使用 <buildtarget>reinstall</buildtarget>
	      多次安装。</para>
	  </listitem>

	  <listitem>
	    <para>您的 port 能在卸载 (deinstall) 时，
	      自动完成 <link linkend="plist-cleaning">清理</link></para>
	  </listitem>
	</itemizedlist>

	<procedure>
	  <title>推荐的测试顺序</title>
	  <step>
	    <para><command>make install</command></para>
	  </step>

	  <step>
	    <para><command>make package</command></para>
	  </step>

	  <step>
	    <para><command>make deinstall</command></para>
	  </step>

	  <step>
	    <para><command>pkg_add package-name
	      </command></para>
	  </step>

	  <step>
	    <para><command>make deinstall</command></para>
	  </step>

	  <step>
	    <para><command>make reinstall</command></para>
	  </step>

	  <step>
	    <para><command>make package</command></para>
	  </step>
	</procedure>

	<para>确信在 <buildtarget>package</buildtarget> 和
	  <buildtarget>deinstall</buildtarget> 阶段没有任何警告。
	  第三步以后， 检查是否所有新建的目录都被正确删除了。
	  在第四步以后， 试着运行一下所装的软件，
	  确保当它以 package 方式安装的时候也能正常工作。</para>

	<para>自动化这些步骤最简单的方法是通过 <application>ports tinderbox</application>
	  来进行测试。 它可以维护 <literal>jails</literal> 并在其中完成全部测试工作，
	  而不会破坏正在运行的系统的状态。 请参见
	  <filename>ports/ports-mgmt/tinderbox</filename>
	  以了解更多的信息。</para>
      </sect1>

      <sect1 xml:id="porting-portlint">
	<title>用 <command>portlint</command> 来检查 port</title>

	<para>请使用 <command>portlint</command> 命令来检查您的 port
	  是否符合我们的规范。 <package>ports-mgmt/portlint</package>
	  程序是 ports 套件的一部分。
	  这个程序的主要功能是帮助您检查
	  <link linkend="porting-samplem">Makefile</link> 的样式是否符合规范，
	  以及 <link linkend="porting-pkgname">package</link> 的命名是否得体。</para>
      </sect1>

      <sect1 xml:id="porting-submitting">
	<title>提交新 port</title>

	<para>在提交新 port 之前， 应先阅读 <link linkend="porting-dads"> 该做什么和不该做什么</link> 一节。</para>

	<para>既然已经对所制作的 port 相当满意了， 剩下的工作，
	  便是将它放进 &os; 的主 ports 树， 以便让更多的人从中受益。
	  我们并不需要您的 <filename>work</filename>
	  目录以及 <filename>pkgname.tgz</filename> 包， 因此现在可以删除它们了。
	  假定您的 port 的名字是 oneko， 接下来要做的是
	  <command>cd</command> 到
	  <literal>oneko</literal> 所在的目录， 然后输入命令：
	  <command>shar `find oneko` &gt; oneko.shar</command></para>

	<para>将这个 <literal>oneko.shar</literal> 文件作为附件，
	  使用 &man.send-pr.1; 程序提交 (请参阅
	  <link xlink:href="&url.articles.contributing;/contrib-how.html#CONTRIB-GENERAL">Bug
	    Reports and General Commentary</link> 以了解关于
	    &man.send-pr.1; 的进一步详情) 将其送出。 请务必将您的 bug 报告分类 (category) 为
	  <literal>ports</literal> 并把子分类 (class) 设置为
	  <literal>change-request</literal>  (不要把报告表及为机密的， 即
	  <literal>confidential</literal>！)。 此外， 在 PR
	  的描述 (<quote>Description</quote>) 一栏中的内容应该是 port 的简要介绍
	  (例如 <varname>COMMENT</varname> 内容的简化版本)，
	  而 shar 文件则应填入修正 (<quote>Fix</quote>)
	  栏中。</para>

	<note>
	  <para>在问题报告里面使用了一段好的描述，
	    能使我们的工作变得更容易。 习惯上， 我们会使用类似：
	    <quote>New port: &lt;category&gt;/&lt;portname&gt;
	    &lt;short description of the port&gt;</quote>
	    这样的标题来说明这是新的 port。 如果您也使用这样的习惯，
	    那么我们将更容易更方便地阅读您的 PR，
	    从而加快处理速度。</para>
	</note>

	<para>再次声明， <emphasis>不要包含原始的distfile，
	    <filename>work</filename>目录， 或者您用
	    <command>make package</command> 制作的包</emphasis>；
	    此外， 对于新的 port 请务必使用 &man.shar.1;
	    而不是 &man.diff.1;。</para>

	<para>在您提交的您的 port 以后请耐心等待。
	  有时在一个 port 正式加入 &os; 之前需要花费好几个月，
	  尽管也有可能是几天。 您可以查看
	  <link xlink:href="http://www.FreeBSD.org/cgi/query-pr-summary.cgi?category=ports">
	  正等待被 commit 到 &os; 的 port PR</link>。</para>

	<para>一旦我们看过了您的报告， 有必要的话我们会联系您，
	  并把它放到 ports 树里。 您的名字也会出现在
	  <link xlink:href="&url.articles.contributors;/contrib-additional.html">Additional FreeBSD Contributors</link>
	  和其它的文件。 不是很棒吗!? <!-- smiley -->
	  :-)</para>
      </sect1>
    </chapter>

    <chapter xml:id="slow">
      <title>复杂的 Porting</title>

      <para>好了， 也许工作没那么简单， port 需要做些修改才能够在
	FreeBSD 上跑起来。 在这一章里，
	我们将会一步步举例来介绍应该如何修改来使您的
	port 能在 FreeBSD 上面运行。</para>

      <sect1 xml:id="slow-work">
	<title>整个系统是如何运转的?</title>

	<para>首先， 这一系列的动作是由用户在您的
	  port 目录里敲入 <command>make</command> 后发生的。
	  您也许会发现在另外的一个窗口里阅读一下
	  <filename>bsd.port.mk</filename> 将会有助于您的理解。</para>

	<para>要是您不是非常明白 <filename>bsd.port.mk</filename>
	  是做什么的话， 也不用太担心， 很多人都不知道的...
	  <!-- smiley --><emphasis>:-&gt;</emphasis></para>

	<procedure>

	  <step>
	    <para><buildtarget>fetch</buildtarget> 会首先被执行。
	      <buildtarget>fetch</buildtarget> 将检查在本地的
	      <varname>DISTDIR</varname> 目录里是否存在
	      tar 包。 如果 <buildtarget>fetch</buildtarget>
	      没有找到就会查找 Makefile 中定义的
	      <varname>MASTER_SITES</varname> URL， 还有我们的主
	      FTP 站点 <uri xlink:href="ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/distfiles/">ftp://ftp.FreeBSD.org/pub/FreeBSD/ports/distfiles/</uri>，
	      在那里我们备份了所有被认可的 distfile。 假设那个
	      <varname>MASTER_SITES</varname> 站点是直接连在 Internet 上的，
	      就会试着用 <varname>FETCH</varname> 指定的程序取回
	      distfile。 如果成功的话， 文件会被保存在<varname>DISTDIR</varname>
	      所指定的目录以备稍后使用。</para>
	  </step>

	  <step>
	    <para>接下来会执行 <buildtarget>extract</buildtarget>。
	      它会在 <varname>DISTDIR</varname> 中寻找您的
	      tar 包 (通常是用 gzip 压缩的 tar 包)，然后解压缩到由
	      <varname>WRKDIR</varname> 所指定的临时目录里
	      (默认为<filename>work</filename>目录)。</para>
	  </step>

	  <step>
	    <para>下一步是执行 <buildtarget>patch</buildtarget>。
	      首先任何在 <varname>PATCHFILES</varname> 中定义的补丁都会被打上。
	      然后， 在由 <varname>PATCHDIR</varname> 指定的目录
	      (默认为 <filename>files</filename>目录)
	      中发现的<filename>patch-*</filename>，
	      它们将会以文件名的字母顺序被先后打上。</para>
	  </step>

	  <step>
	    <para><buildtarget>configure</buildtarget>会被执行。
	      这一步骤可能会有以下几种情形。</para>

	    <orderedlist>
	      <listitem>
		<para>如果存在 <filename>scripts/configure</filename>，
		  就会执行它</para>
	      </listitem>

	      <listitem>
		<para>如果定义了 <varname>HAS_CONFIGURE</varname>
		  或者 <varname>GNU_CONFIGURE</varname>， 就会执行
		  <filename>WRKSRC/configure</filename>。</para>
	      </listitem>

	      <listitem>
		<para>如果定义了<varname>USE_IMAGE</varname>， 就会执行
		  <varname>XMKMF</varname> (默认为: <command>xmkmf
		    -a</command>)。</para>
	      </listitem>
	    </orderedlist>
	  </step>

	  <step>
	    <para><buildtarget>build</buildtarget>会被执行。
	      这一步将会进入ports的工作目录
	      (<varname>WRKSRC</varname>)
	      然后进行编译。如果定义了<varname>USE_GMAKE</varname>，
	      就会使用 GNU <command>make</command>， 反之，
	      则会使用系统默认的 <command>make</command>。</para>
	  </step>
	</procedure>

	<para>以上都是系统默认的步骤。 您也可以定义
	  <buildtarget>pre-<replaceable>something</replaceable></buildtarget> 或者
	  <buildtarget>post-<replaceable>something</replaceable></buildtarget>，
	  或者把以此命名的脚本放到
	  <filename>scripts</filename> 目录，
	  它们会在默认的动作之前或之后被执行。</para>

	<para>举个例子， 如果您在您的 <filename>Makefile</filename>
	  里定义了<buildtarget>post-extract</buildtarget>， 并在
	  <filename>script</filename> 目录里放了一个
	  <filename>pre-build</filename> 脚本，
	  那么在 tar 包解开之后
	  <buildtarget>post-extract</buildtarget> 将被调用，
	  <filename>pre-build</filename> 脚本会在默认的编译之前被执行。
	  我们推荐您在 <filename>Makefile</filename>
	  定义所有的动作， 如果不是十分复杂的话，
	  这样， 别人能更容易明白您的 port
	  需要执行哪些非默认的动作。</para>

	<para>默认的行为都是由 <filename>bsd.port.mk</filename> 定义的
	  <buildtarget>do-<replaceable>something</replaceable></buildtarget>
	  来表示的。 例如， port 中用来解压缩的命令是由
	  <buildtarget>do-extract</buildtarget> 来定义的。
	  如果您对默认的设置不满意， 可以通过在
	  <filename>Makefile</filename> 重新定义
	  <buildtarget>do-<replaceable>someting</replaceable></buildtarget>
	  来做些改变。</para>

	<note>
	  <para><quote>主</quote> 动作 (例如
	    <buildtarget>extract</buildtarget>、
	    <buildtarget>configure</buildtarget>， 等等)
	    仅仅是用来确定所有相应的阶段都完成了，
	    以及调用真实的动作或脚本， 它们不应被修改。
	    如果您想要修改解压缩这个动作，
	    可以修改 <buildtarget>do-extract</buildtarget>，
	    但永远都不要改变 <buildtarget>extract</buildtarget>
	    的操作！</para>
	</note>

	<para>我们已经介绍了在用户敲入 <command>make</command>
	  之后会发生哪些事情了。 接下来我们将进行进一步的学习，
	  来看一看如何创建一个理想的 port。</para>
      </sect1>

      <sect1 xml:id="slow-sources">
	<title>获取源代码</title>

	<para>获取源代码的 tar 包 (通常是
	  <filename>foo.tar.gz</filename> 或者
	  <filename>foo.tar.Z</filename>) 并把它们放进
	  <varname>DISTDIR</varname>。 最好使用 <emphasis>主流</emphasis> 的版本。</para>

	<para>您需要设置变量 <varname>MASTER_SITES</varname>
	  来指向原始 tar 包的获取位置。 您可以在
	  <filename>bsd.sites.mk</filename>
	  里找到一些速度较快的主流站点。 请使用这些站点 &mdash;
	  和相关的定义 &mdash; 如果可能的话，
	  应尽量避免在同一个源代码树里出现大量重复的信息。
	  这些站点会随着时间而变化，
	  如果每个人都随意加入的话会使维护变得非常困难。</para>

	<para>如果您找不到一个有很好网络连接的
	  FTP/HTTP 站点， 或者它们使用了非标准的格式，
	  您也许就会想在您自己的 FTP 或 HTTP
	  服务器上放上一份副本。</para>

	<para>如果您找不到可靠的地方放置 distfiles，
	  我们也可以提供给您一些空间来保存它。
	  我们自己的 <systemitem>ftp.FreeBSD.org</systemitem>；
	  然而这只是一个折衷的办法。 distfile 必须放进某人在
	  <systemitem>freefall</systemitem> 上的
	  <filename>~/public_distfiles/</filename>
	  目录中。 可以要求帮助您 commit port 的人来放这个
	  distfile， 而这个人也需要把 <varname>MASTER_SITES</varname>、
	  <varname>MASTER_SITE_LOCAL</varname> 以及
	  <varname>MASTER_SITE_SUBDIR</varname> 的设置，
	  改为在 <systemitem>freefall</systemitem> 上的用户名。</para>

	<para>如果您的 port 的 distfile 一直在变化，
	  而作者拒绝改变其版本号， 您可以考虑把 distfiles
	  放在自己的主页， 并在 <varname>MASTER_SITES</varname>
	  里把原作者的列为首选位置。 如果可能， 试着与 port
	  的作者沟通一下让他不要这么做， 这将有助于建立对源代码的控制。
	  在您的主页上放置您自己的 distfile 会避免用户得到
	  <errorname>checksum mismatch</errorname>
	  的错误， 而且能减轻我们 FTP 站点维护人员的工作量。
	  如果您的port只有一个主站点的话， 我们建议您在自己的网站上做一份备份，
	  并他列为 <varname>MASTER_SITES</varname>的第2项。</para>

	<para>如果您的 port 需要来自网络上的一些补丁， 请把它们放到
	  <varname>DISTDIR</varname>里。 不用担心它们跟源代码不是来自同一站点。
	  我们有办法处理 (参阅下面的
	  <link linkend="porting-patchfiles">补丁文件</link>)。</para>
      </sect1>

      <sect1 xml:id="slow-modifying">
	<title>修改 port</title>

	<para>解开 tar 包， 对源代码做出合理的修改使得这个 port
	  能在最新版本的 &os; 上面运行。
	  一定要 <emphasis>仔细记录</emphasis> 您所做的每处改动，
	  包括删除、添加、修改的文件等等， 这些修改以后会在您的 port
	  中以脚本或补丁的方式出现， 并且能通过运行它们来自动完成您对
	  port 的改动要求。</para>

	<para>如果您的 port 要求用与用户交互/配置来完成编译或安装的话，
	  您可以看一下 Larry Wall 的经典的 <application>Configure</application>
	  脚本， 适当地模仿一下。 Port collection 的目的，
	  就是使每个 port 占用最少的空间，
	  并做到软件的 <quote>即插即用</quote>。</para>

	<note>
	  <para>除非明确地声明， 否则您提交给
	    &os; ports collection 的补丁，
	    脚本和其它的文件都将以标准的 BSD 版权发布。</para>
	</note>
      </sect1>

      <sect1 xml:id="slow-patch">
	<title>打补丁</title>

	<para>在您准备制作 port 的过程中， 增加或修改的文件，
	  都可以通过 &man.diff.1; 来做成补丁。 希望应用到源代码上的每个补丁，
	  都应保存为单独的文件， 并命名为
	  <filename>patch-*</filename>， 其中
	  <replaceable>*</replaceable> 表示将要修改的文件的完整路径名，
	  例如 <filename>patch-Imakefile</filename> 或
	  <filename>patch-src-config.h</filename>。 这些文件，
	  都应保存在 <varname>PATCHDIR</varname>
	  (通常是 <filename>files/</filename>)， 这里的补丁都会自动应用到源代码上。
	  所有的补丁必须是相对于
	  <varname>WRKSRC</varname> 的 (一般而言， 您的 port 会将其
	  tarball 解压缩在那里， 并完成余下的工作)。 为了让修正和升级更容易，
	  您应避免使用多个 patch 去修改同一个文件 (例如，
	  <filename>patch-file</filename> 以及
	  <filename>patch-file2</filename> 都修改
	  <filename>WRKSRC/foobar.c</filename>) 这种情况。
	  需要注意的是， 如果修改的文件的路径中包含下划线
	  (<literal>_</literal>) 字符， 则在补丁文件名中应使用两个下划线来代替。
	  例如， 如果需要修改名为 <filename>src/freeglut_joystick.c</filename> 的文件，
	  补丁文件的名字应为
	  <filename>patch-src-freeglut__joystick.c</filename>。</para>

	<para>只有 <literal>[-+._a-zA-Z0-9]</literal> 这些字符，
	  可以出现在补丁的文件名中， 请务必不要使用除这些字符以外的其它字符。
	  不要把您的补丁命名成 <filename>patch-aa</filename>
	  或 <filename>patch-ab</filename> 等这样的名字，
	  最好能在补丁名中提到路径和文件名。</para>

	<para>不要把 RCS 字符串放进补丁。 我们把文件放进 ports
	  树的时候， CVS 会损坏它们， 当我们再 check out 出来的时候，
	  它们就会和原来的不一样， 从而导致打补丁失败。 RCS 字符串
	  是由美元符号 (<literal>&dollar;</literal>) 围绕的，
	  通常由 <literal>&dollar;Id</literal> 或
	  <literal>&dollar;RCS</literal> 开头。</para>

	<para>使用 &man.diff.1; 的递归选项(<option>-r</option>)
	  很好， 但是请检查一下最后输出的 patch，
	  确保没有任何的垃圾信息。 特别地， 有 2 种文件不需要 diff，
	  并且应该删除： 一种是 <filename>Makefile</filename>，
	  当您的port使用了<command>Imake</command>，
	  或者 GNU <command>configure</command> 等等的话。
	  如果您不得不编辑<filename>configure.in</filename>
	  以使 <command>autoconf</command> 去生成
	  <command>configure</command>， 不要使用
	  <command>configure</command> 来做 diff
	  (这常常会有好几千行长!)； 请定义
	  <literal>USE_AUTOTOOLS=autoconf:261</literal> 并对应
	  <filename>configure.in</filename> 来制作 diff。</para>

	<para>另外， 您还应尽量减少补丁中非功能性的空格及空白变动。
	  在开源世界中， 遵循不同的编码规范的项目共享大量代码是很常见的事情。
	  如果您从某个项目中提取一部分功能用来修正另一个程序中的问题时，
	  请务必小心： 补丁中很可能到处都是非功能性的变动行。 这不仅会导致 CVS
	  库的膨胀， 而且也会让导致问题的故障点， 以及您到底修改了什么变得不甚清晰。</para>

	<para>假如需要删除文件， 则应在
	  <buildtarget>post-extract</buildtarget> target，
	  而不是作为补丁的一部分来完成。</para>

	<para>除此之外， port 的
	  <filename>Makefile</filename> 还可以通过 in-place 模式的
	  &man.sed.1; 来直接进行简单的替换操作。 如果补丁需要使用变量值，
	  这就非常有用了。 例如：</para>

	<programlisting>post-patch:
	@${REINPLACE_CMD} -e 's|for Linux|for FreeBSD|g' ${WRKSRC}/README
	@${REINPLACE_CMD} -e 's|-pthread|${PTHREAD_LIBS}|' ${WRKSRC}/configure</programlisting>

	<para>往往在移植某些软件的时候会遇到这样一种情况，
	  特别是这个软件是在 &windows; 上开发的时候，
	  大多数的源代码都需要进行CR/LF的转换。
	  这很可能会给以后打补丁带来问题， 还可能触发编译警告，
	  并给脚本的执行带来麻烦 (<command>/bin/sh^M</command> not found)，
	  等等。 要迅速将所有文件中的 CR/LF 改为只用 LF， 可以在 port 的
	  <filename>Makefile</filename> 中加入
	  <literal>USE_DOS2UNIX=yes</literal>。 除此之外，
	  还可以指定一个需要执行这种转换操作的文件列表：</para>

	<programlisting>USE_DOS2UNIX=    util.c util.h</programlisting>

	<para>如果希望转换一系列目录中的一组文件， 也可以使用
	  <varname>DOS2UNIX_REGEX</varname>。 它的参数是与
	  <command>find</command> 兼容的正则表达式。
	  关于这种格式的说明， 请参阅 &man.re.format.7;。
	  这个选项对转换所有指定扩展名的文件， 例如只转换源代码文件这样的应用非常有用：</para>

	<programlisting>USE_DOS2UNIX=    yes
DOS2UNIX_REGEX=  .*\.(c|cpp|h)</programlisting>

	<para>如果您希望基于现存的文件创建补丁， 可以把文件复制为带
	  <filename>.orig</filename> 扩展名的名字， 然后修改原文件。
	  然后使用 <buildtarget>makepatch</buildtarget>
	  目标根据修改在 port 的 <filename>files</filename> 目录中生成补丁文件。</para>
      </sect1>

      <sect1 xml:id="slow-configure">
	<title>配置</title>

	<para>把任何附加的配置命令加进您的
	  <filename>configure</filename> 脚本并把它保存到
	  <filename>scripts</filename> 子目录。 如前面提到的那样，
	  您也能在 <filename>Makefile</filename> 和/或
	  使用 <filename>pre-configure</filename> 或
	  <filename>post-configure</filename> 的脚本来做同样的事情。</para>
      </sect1>

      <sect1 xml:id="slow-user-input">
	<title>处理用户输入</title>

	<para>如果您的 port 要求用户的输入以便配置编译、 或安装配置过程，
	  就必须在 <filename>Makefile</filename> 里设置
	  <varname>IS_INTERACTIVE</varname> 变量。
	  如果用户设置了 <envar>BATCH</envar> 的话，
	  这将让用户能跳过您的 port 来完成
	  <quote>通宵编译</quote> (如果用户设置了
	  <envar>INTERACTIVE</envar>的话， 那么 <emphasis>只有</emphasis>
	  那些要求互动的 port 才会被编译)
	  这将给那些不停编译 ports 的机器省下很多时间。</para>

	<para>通常我们还建议，
	  如果对于那些问题能有合理的缺省答案的话， 应检查一下
	  <varname>PACKAGE_BUILDING</varname> 变量，
	  并根据其设置决定是否执行关闭交互脚本。
	  这将允许我们为 CDROM 和 FTP 来编译 package。</para>
      </sect1>
    </chapter>

    <chapter xml:id="makefile">
      <title>配置 Makefile</title>

      <para>配置 <filename>Makefile</filename> 是相当简单的，
	我们在此建议您在开始之前看一下现有的例子。
	在这份手册里也有一个
	<link linkend="porting-samplem">Makefile例子</link>，
	照着里面变量的顺序来写能使得您的 port
	更容易地被其它人看懂。</para>

      <para>现在， 当您开始编写您新的<filename>Makefile</filename>
	的时候， 可以依次思考一下以下的问题：</para>

      <sect1 xml:id="makefile-source">
	<title>作者发布的代码</title>

	<para>放在 <varname>DISTDIR</varname> 中的是不是标准的用 gzip 压缩的
	  tar 包， 例如 <filename>foozolix-1.2.tar.gz</filename>？
	  如果是， 可以先略过这一节。 如果不是，
	  您应当看看是不是要覆盖这些变量： <varname>DISTVERSION</varname>、
	  <varname>DISTNAME</varname>、
	  <varname>EXTRACT_CMD</varname>、
	  <varname>EXTRACT_BEFORE_ARGS</varname>、
	  <varname>EXTRACT_AFTER_ARGS</varname>、
	  <varname>EXTRACT_SUFX</varname>，
	  <varname>DISTFILES</varname>，取决于您 port 的 distfile
	  格式有多么怪异。 (最常见的一个例子便是
	  <literal>EXTRACT_SUFX=.tar.Z</literal>， 一般这是因为 tar
	  包是用 <command>compress</command> 而不是
	  <command>gzip</command> 压缩的时候。)</para>

	<para>最糟的情况是， 您需要自己编写
	  <buildtarget>do-extract</buildtarget>
	  来覆盖默认的定义， 尽管这不常见，
	  但如果遇到了， 还是需要这么做。</para>
      </sect1>

    <sect1 xml:id="makefile-naming">
      <title>命名</title>

      <para>Makefile 的第一部分便是 port
	的名字、 版本号， 以及它所属的分类。</para>

      <sect2>
	<title><varname>PORTNAME</varname> 和 <varname>PORTVERSION</varname></title>

	<para>您应该把 <varname>PORTNAME</varname> 设置为您
	  port 的名字， <varname>PORTVERSION</varname>
	  则是 port 的版本号。</para>
      </sect2>

      <sect2 xml:id="makefile-naming-revepoch">
	<title><varname>PORTREVISION</varname> 和
	  <varname>PORTEPOCH</varname></title>

	<sect3>
	  <title><varname>PORTREVISION</varname> (port 的修订版本号)</title>

	  <para><varname>PORTEREVISION</varname>
	    变量是一个单调递增的值， 如果不为
	    0， 就会被加到包名的后面，
	    当 <varname>PORTVERSION</varname> 增加
	    的时候应被置 0 (也就是当官方有新版本发布的时候)。
	    <varname>PORTREVISION</varname>
	    会被自动化工具 (比如 &man.pkg.version.1;)
	    用来检测是否存在可用的新版本。</para>

	  <para>每当 port 发生变化并对生成的
	    package 的内容或结构有显著影响时，
	    都应增加 <varname>PORTREVISION</varname>
	    值。</para>

	  <para>下面是一些应当修改 <varname>PORTREVISION</varname>
	    的情况：</para>

	  <itemizedlist>
	    <listitem>
	      <para>有新的补丁用来修正安全漏洞、
		错误， 或给 port 添加了新的功能。</para>
	    </listitem>

	    <listitem>
	      <para>修改了 <filename>Makefile</filename>
		里编译时开启或禁用的选项。</para>
	    </listitem>

	    <listitem>
	      <para>修改了要安装文件的列表或安装时的行为
		(例如， 修改了一个用来给 package
		初始化数据的脚本， 如 ssh host keys)。</para>
	    </listitem>

	    <listitem>
	      <para>一个port依赖的共享库版本改变
		(在这种情况下， 当安装了新版本的共享库，
		后再去安装较早的软件就会出错，
		因为它们要依赖老的 libfoo.x
		而不是libfoo.(x+1))。</para>
	    </listitem>

	    <listitem>
	      <para>原作者修改了 port distfile， 并且 distfile
		的新老版本之间用
		<command>diff -ru</command> 只能发现一些细微的变化，
		这时我们只需要对
		<filename>distinfo</filename> 做相应的修正，
		而不需要修改
		<varname>PORTVERSION</varname>。</para>
	    </listitem>
	  </itemizedlist>

	  <para>不需要修改
	    <varname>PORTREVISION</varname> 的例子：</para>

	  <itemizedlist>
	    <listitem>
	      <para>port 结构风格的改变，
		但对于打成的包没有功能的上的变化。</para>
	    </listitem>

	    <listitem>
	      <para><varname>MASTER_SITES</varname>
		发生变化， 或进行了对 port 功能的修改，
		但不致影响最后打成的包。</para>
	    </listitem>

	    <listitem>
	      <para>对 distfiles 诸如修正拼写错误之类的补丁，
		对用户而言没有升级上的麻烦。</para>
	    </listitem>

	    <listitem>
	      <para>对一个原本编译失败的包的修改，
		使其可编译， 而没有加入新功能。 因为
		<varname>PORTREVISION</varname>
		表示包的内容发生了变化，
		如果先前没有可编译的包， 也就不需要修改
		<varname>PORTREVISION</varname>
		来表示变化。</para>
	    </listitem>
	  </itemizedlist>

	  <para>一个修改并提交 port 的原则是：
	    使得别人能从中受益 (改进、 修改已有错误，
	    或使新的 package 能够运行)，
	    您还要权衡一下这是否应让那些经常更新
	    ports 树的人升级，
	    如果回答是 <quote>是</quote> 的话，
	    <varname>PORTREVISION</varname>
	    就应该修改了。</para>
	</sect3>

	<sect3>
	  <title><varname>PORTEPOCH</varname> (port 的加权版本号)</title>

	  <para>有时软件商或 FreeBSD 的
	    porter 会使用比旧版的版本号小的数字做为新版本号的情况。
	    举例来说， 从
	    foo-20000801 到 foo-1.0 (从形式上来说这是不对的，
	    因为 20000801 在数值上比1大很多)。</para>

	  <para>在这种情况下， <varname>PORTEPOCH</varname>
	    应当增加。 如果
	    <varname>PORTEPOCH</varname> 非 0，
	    就应当加到包名字的后面。
	    <varname>PORTEPOCH</varname>
	    永远不能被减少或清零，
	    因为那样会导致与前一时期的 package
	    比较版本时产生不正确的结果。
	    (就是说， 那个 package 就不会被检测到已经过时了。)
	    新的版本号 (比如前面在前面那个例子中的
	    <literal>1.0,1</literal>) 在数值上比前一个版本
	    (20000801) 小， 但多数自动化的工具会认为
	    <literal>,1</literal>
	    后缀意味着比前一个包的后缀 <literal>,0</literal> 大。</para>

	  <para>错误的去除或重置
	    <varname>PORTEPOCH</varname>
	    会导致很多不幸发生； 如果您还不明白前面的讨论，
	    请多阅读几次直至明白为止，
	    或到邮件列表上来提问。</para>

	  <para>大多数 port 都不会用到
	    <varname>PORTEPOCH</varname>，
	    并且如果某个软件的下一个版本改变了版本号结构的话，
	    用巧妙的方法来设定 <varname>PORTVERSION</varname>
	    也能避免使用 <varname>PORTEPOCH</varname>。 然而，
	    FreeBSD porter 也需要注意， 当有新版本的软件发布，
	    但并非正式版本时 &mdash; 比如
	    <quote>snapshot</quote> 版本，
	    原作者可能会使用当时的日期来命名，
	    这在新的 <quote>官方</quote> 版本发布的时候，
	    就很容易引起前面提到的问题。</para>

	  <para>举个例子， 如果 snapshot 版本的发布日期是
	    20000917， 这个软件的上一个版本是1.2，
	    那么这个版本的 <varname>PORTVERSIN</varname> 应该设为
	    1.2.20000917 或类似的样子， 而不是20000917，
	    这样在 1.3 发布以后，
	    新版本就可以在数值上大于旧的版本了。</para>
	</sect3>

	<sect3>
	  <title>关于 <varname>PORTREVISION</varname> 和
	    <varname>PORTEPOCH</varname> 的用例</title>

	  <para><literal>gtkmumble</literal> port，版本号
	    <literal>0.10</literal>， 被提交到
	    ports collection:</para>

	  <programlisting>PORTNAME=       gtkmumble
PORTVERSION=    0.10</programlisting>

	  <para><varname>PKGNAME</varname> 变成
	    <literal>gtkmumble-0.10</literal>。</para>

	  <para>然后有人发现了一个安全漏洞，
	    需要用一个FreeBSD的补丁。 <varname>PORTREVISION</varname>
	    就要相应的增加。</para>

	  <programlisting>PORTNAME=       gtkmumble
PORTVERSION=    0.10
PORTREVISION=   1</programlisting>

	  <para><varname>PKGNAME</varname>变成了
	    <literal>gtkmumble-0.10_1</literal></para>

	  <para>软件的作者发布了新的版本， 版本为
	    <literal>0.2</literal> (作者本来的意思是，
	    用 <literal>0.10</literal> 表示
	    <literal>0.1.0</literal>，<quote>而不是指
	    0.9 之后的那个版本</quote> - 但是现在太迟了)。
	    因为现在的次版本号 <literal>2</literal>
	    在数值上比上一个版本 <literal>10</literal> 小，
	    <varname>PORTEPOCH</varname> 必须增加，
	    以使新的 package 被认为是 <quote>更新的</quote>。
	    由于那是作者发布的一个新版本， 因此
	    <varname>PORTREVISION</varname> 应被置0 (或者从
	    <filename>Makefile</filename> 里面删除它)。</para>

	  <programlisting>PORTNAME=       gtkmumble
PORTVERSION=    0.2
PORTEPOCH=      1</programlisting>

	  <para><varname>PKGNAME</varname> 变成了
	    <literal>gtkmumble-0.2,1</literal></para>

	  <para>下一个版本将会是 0.3。
	    由于 <varname>PORTEPOCH</varname> 从不减少，
	    那么就无须改动：</para>

	  <programlisting>PORTNAME=       gtkmumble
PORTVERSION=    0.3
PORTEPOCH=      1</programlisting>

	  <para><varname>PKGNAME</varname> 变成
	    <literal>gtkmumble-0.3,1</literal></para>

	  <note>
	    <para>如果在这次升级中 <varname>PORTEPOCH</varname>
	      被置为了<literal>0</literal>， 那么在装了
	      <literal>gtkmumble-0.10_1</literal> 包的机器上就无法检测到
	      <literal>gtkmumble-0.3</literal> 包的更新，
	      因为 <literal>3</literal> 在数值上比
	      <literal>10</literal> 小。 记住， 这是
	      <varname>PORTEPOCH</varname> 最重要的地方。</para>
	  </note>
	</sect3>
      </sect2>

      <sect2>
	<title><varname>PKGNAMEPREFIX</varname> 和 <varname>PKGNAMESUFFIX</varname></title>

	<para>2 个可选的变量， <varname>PKGNAMEPREFIX</varname> 和
	  <varname>PKGNAMESUFFIX</varname> 可以和
	  <varname>PORTNAME</varname> 还有
	  <varname>PORTVERSION</varname> 配合使用，
	  形成像这样的 <varname>PKGNAME</varname>：
	  <literal>${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}-${PORTVERSION}</literal>。
	  请确定符合我们的
	  <link linkend="porting-pkgname">包命名规则</link>。
	  当然， <emphasis>不</emphasis> 允许在
	  <varname>PORTVERSION</varname>
	  中使用连字符 (<literal>-</literal>)。 如果包名有
	  <replaceable>language-</replaceable> 或
	  <replaceable>-compiled.specifics</replaceable> 部分 (见下文)，
	  请分别用 <varname>PKGNAMEPREFIX</varname> 和
	  <varname>PKGNAMESUFFIX</varname>， 不要直接加到
	  <varname>PORTNAME</varname> 中。</para>
      </sect2>

      <sect2>
	<title><varname>LATEST_LINK</varname></title>

	<para><varname>LATEST_LINK</varname> 在编译包的过程中用于确定可以为
	  <command>pkg_add -r</command> 使用的缩短的名字。 举例来说，
	  在安装最新版本的 perl 的时候， 只需指定
	  <command>pkg_add -r perl</command> 而无需知道具体的版本号。
	  这个名字应该是独一无二的， 并且对用户而言应该是显而易见的名字。</para>

	<para>有时， 在 ports 套件中可能会存在同一程序的多个版本。
	  索引和预编译包的联编系统都需要能够将它们视为不同的软件包， 尽管其
	  <varname>PORTNAME</varname>、 <varname>PKGNAMEPREFIX</varname>， 甚至
	  <varname>PKGNAMESUFFIX</varname> 可能是一模一样的。 遇到这种情况时，
	  就需要将除了 <quote>主</quote> port 之外的其他 port
	  中的 <varname>LATEST_LINK</varname> 变量设为不同的值
	  &mdash; 请参见 <filename>lang/gcc46</filename> 和
	  <filename>lang/gcc</filename> port， 以及
	  <filename>www/apache*</filename> 系列， 以了解它的用法。
	  如果设置了 <varname>NO_LATEST_LINK</varname>，
	  则系统便不会生成对应的连接， 对于非
	  <quote>主</quote> port 来说是一个可行的选择。
	  需要注意的是， 如何确定 <quote>主</quote> 版本 &mdash;
	  <quote>最流行</quote>、 <quote>受支持最好</quote>，
	  <quote>变动最少</quote>， 等等 &mdash; 已经超过了本书能够给出的建议范围；
	  这里只是向您介绍在选定了一个
	  <quote>主</quote> port 之后如何指定其他 port 的版本。</para>
      </sect2>

    <sect2 xml:id="porting-pkgname">
      <title>包命名规则</title>

      <para>以下是您在命名您的包时应当遵守的规则。
	这将使得我们放包的目录更利于浏览，
	因为我们已经有数以万计的包了，
	如果用户觉得查看包名很困难的话，
	他们会很快走开的。</para>

      <para>一个包的名字应该看起来像这样：
	<filename>language_region-name-compiled.specifics-version.numbers</filename>。</para>

      <para>要像这样来定义包的名字：
	<literal>${PKGNAMEPREFIX}${PORTNAME}${PKGNAMESUFFIX}-${PORTVERSION}</literal>。
	确保所有的变量符合上面的格式。</para>

      <orderedlist>
	<listitem>
	  <para>FreeBSD 会尽力去支持用户当地的语言。
	    如果这个 port 是某种语言专用的， 那么
	    <replaceable>language-</replaceable> 部分应该是
	    由 ISO-639 定义的自然语言的 2 个字母缩写。 比如，
	    <literal>ja</literal>是表示日本， <literal>ru</literal>
	    是表示俄罗斯， <literal>vi</literal> 表示越南，
	    <literal>zh</literal> 表示中国， <literal>ko</literal>
	    表示韩国， <literal>de</literal> 表示德国。</para>

	  <para>如果是针对某种语言的某一地区的话，
	    再要加上2个字母的国家代码。 例如，
	    <literal>en_US</literal> 表示美国英语，
	    <literal>fr_CH</literal> 表示瑞士法语。</para>

	  <para><replaceable>language-</replaceable> 部分应该在
	    <varname>PKGNAMEPREFIX</varname> 变量里设置。</para>
	</listitem>

	<listitem>
	  <para><filename>name</filename> 部分的首字母应该
	    小写。 (余下的部分可以包含大写字母， 所以当您
	    要转换一个包含大写字母软件的名字时， 您需要
	    自己做出判断。) 对于 <literal>Perl 5</literal>
	    模块的命名， 有个传统的规则是， 在前面
	    加上 <literal>p5-</literal>
	    并把两个冒号的部分改为连字号， 如：
	    <literal>Data::Dumper</literal> 模块对应的名字， 就应该是
	    <literal>p5-Data-Dumper</literal>。</para>
	</listitem>

	<listitem>
	  <para>确认 port 的名字和版本之间有清晰的分隔， 并放入 <varname>PORTNAME</varname> 和
	    <varname>PORTVERSION</varname> 变量。 在
	    <varname>PORTNAME</varname> 中包含版本部分的唯一理由是上游软件包真的采用这样的命名方式，
	    类似 <filename>textproc/libxml2</filename> 或
	    <filename>japanese/kinput2-freewnn</filename> port 这样。 否则，
	    在 <varname>PORTNAME</varname> 中就不应包含任何版本信息。
	    许多 port 采用同样的 <varname>PORTNAME</varname> 名字是很正常的，
	    <filename>www/apache*</filename> port 便是如此； 在这种情况下，
	    不同的版本 (以及不同的索引项) 是由 <varname>PKGNAMEPREFIX</varname>、
	    <varname>PKGNAMESUFFIX</varname>， 以及
	    <varname>LATEST_LINK</varname> 的值的不同而有所区别的。</para>
	</listitem>

	<listitem>
	  <para>如果 port 可以使用不同的 <link linkend="makefile-masterdir">硬编码默认配置</link>
	    进行联编 (通常是一系列 port 的一部分目录名)， 则
	    <replaceable>-compiled.specifics</replaceable>
	    部分就应该明示编译进去的默认值 (此处连字号是可选的)。
	    通常的用例包括纸型和不同的字体尺寸。</para>

	  <para><replaceable>-compiled.specifics</replaceable>
	    部分应该通过 <varname>PKGNAMESUFFIX</varname>
	    变量来设置。</para>
	</listitem>

	<listitem>
	  <para>版本号应该紧随在连字号
	    (<literal>-</literal>) 后面并由数字和字母组成。
	    特别指出， 另外的连字号是不允许出现在版本号里的。
	    唯一例外的是字符串 <literal>pl</literal>
	    (表示 <quote>patchlevel</quote>)，
	    <emphasis>只能</emphasis>
	    用在软件没有主版本号和次版本号的情况下。
	    如果软件的版本号里出现了像
	    <quote>alpha</quote>， <quote>beta</quote>，
	    <quote>rc</quote>， <quote>pre</quote>，
	    取第一个字母把它放在小数点的后面。
	    如果在版本号里一直出现那些名字，
	    那么在数字和字母之间不应有多余的小数点。</para>

	  <para>这个方法是为了更容易得凭版本号来排序 port。
	    特别注意的是， 确保版本号之间的每部分都由小数点来分隔，
	    如果日期也是版本号的一部分， 就用这样的格式，
	    <literal>0.0.yyyy.mm.dd</literal>
	    这样的格式， 而非
	    <literal>dd.mm.yyyy</literal>
	    甚至
	    <literal>yy.mm.dd</literal>
	    这种不适合表示千年的格式。 在版本号上使用
	    <literal>0.0.</literal> 前缀十分重要， 因为当软件发行正式的版本时，
	    其版本号数字很可能会小于表示年份的
	    <literal>yyyy</literal> 数字。</para>
	</listitem>
      </orderedlist>

      <para>这里是一些真实的例子，
	我们藉此说明如何把软件作者对软件的命名，
	转换为适合我们包的命名方式：</para>

      <informaltable frame="none" pgwide="1">
	<tgroup cols="6">
	  <thead>
	    <row>
	      <entry>发行版的名字</entry>
	      <entry><varname>PKGNAMEPREFIX</varname></entry>
	      <entry><varname>PORTNAME</varname></entry>
	      <entry><varname>PKGNAMESUFFIX</varname></entry>
	      <entry><varname>PORTVERSION</varname></entry>
	      <entry>说明</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>mule-2.2.2</entry>
	      <entry>(空)</entry>
	      <entry>mule</entry>
	      <entry>(空)</entry>
	      <entry>2.2.2</entry>
	      <entry>没什么需要修改的</entry>
	    </row>

	    <row>
	      <entry>EmiClock-1.0.2</entry>
	      <entry>(空)</entry>
	      <entry>emiclock</entry>
	      <entry>(空)</entry>
	      <entry>1.0.2</entry>
	      <entry>程序的名字不能使用大写字母</entry>
	    </row>

	    <row>
	      <entry>rdist-1.3alpha</entry>
	      <entry>(空)</entry>
	      <entry>rdist</entry>
	      <entry>(空)</entry>
	      <entry>1.3.a</entry>
	      <entry>像 <literal>alpha</literal>
		这样的字符串是不允许出现的</entry>
	    </row>

	    <row>
	      <entry>es-0.9-beta1</entry>
	      <entry>(空)</entry>
	      <entry>es</entry>
	      <entry>(空)</entry>
	      <entry>0.9.b1</entry>
	      <entry>像 <literal>beta</literal>
		这样的字符串是不允许出现的</entry>
	    </row>

	    <row>
	      <entry>mailman-2.0rc3</entry>
	      <entry>(空)</entry>
	      <entry>mailman</entry>
	      <entry>(空)</entry>
	      <entry>2.0.r3</entry>
	      <entry>像 <literal>rc</literal>
		这样的字符串是不允许出现的</entry>
	    </row>

	    <row>
	      <entry>v3.3beta021.src</entry>
	      <entry>(空)</entry>
	      <entry>tiff</entry>
	      <entry>(空)</entry>
	      <entry>3.3</entry>
	      <entry>那个是啥鬼东西？</entry>
	    </row>

	    <row>
	      <entry>tvtwm</entry>
	      <entry>(空)</entry>
	      <entry>tvtwm</entry>
	      <entry>(空)</entry>
	      <entry>pl11</entry>
	      <entry>总需要有个版本号吧</entry>
	    </row>

	    <row>
	      <entry>piewm</entry>
	      <entry>(空)</entry>
	      <entry>piewm</entry>
	      <entry>(空)</entry>
	      <entry>1.0</entry>
	      <entry>总需要有个版本号吧</entry>
	    </row>

	    <row>
	      <entry>xvgr-2.10pl1</entry>
	      <entry>(空)</entry>
	      <entry>xvgr</entry>
	      <entry>(空)</entry>
	      <entry>2.10.1</entry>
	      <entry><literal>pl</literal> 只允许在没有
		主/次 版本号的情况下才能出现</entry>
	    </row>

	    <row>
	      <entry>gawk-2.15.6</entry>
	      <entry>ja-</entry>
	      <entry>gawk</entry>
	      <entry>(空)</entry>
	      <entry>2.15.6</entry>
	      <entry>日文版</entry>
	    </row>

	    <row>
	      <entry>psutils-1.13</entry>
	      <entry>(空)</entry>
	      <entry>psutils</entry>
	      <entry>-letter</entry>
	      <entry>1.13</entry>
	      <entry>纸张大小已经在编译的时候被硬编码到程序里了</entry>
	    </row>

	    <row>
	      <entry>pkfonts</entry>
	      <entry>(空)</entry>
	      <entry>pkfonts</entry>
	      <entry>300</entry>
	      <entry>1.0</entry>
	      <entry>300dpi 字体的包</entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>

      <para>如果在原始的代码里没有版本号，
	或者原作者并不打算开发另外的版本，
	就应把版本号设成 <literal>1.0</literal> (就像前面
	<literal>piewm</literal> 的例子那样)。 否则，
	要求原始的作者加上版本号或使用日期
	(<literal>0.0.yyyy.mm.dd</literal>)
	来作为版本号。</para>
    </sect2>
    </sect1>

    <sect1 xml:id="makefile-categories">
      <title>分类</title>

      <sect2>
	<title><varname>CATEGORIES</varname> (所属分类)</title>

	<para>在包制作完成之后，
	  它会被放在 <filename>/usr/ports/packages/All</filename>，
	  并建立一系列来自
	  <filename>/usr/ports/packages</filename>
	  下子目录的符号连接。 这些子目录的名称是由
	  <varname>CATEGORIES</varname>
	  指定的。 这将方便于那些用户在 FTP 站点或 CDROM
	  的一大堆包里面寻找自己想要的包。 请查看一下
	  <link linkend="porting-categories">目前的分类表</link>，
	  并找出一个适合您 port 的分类。</para>

	<para>此列表也会决定您的 port 在 port
	  目录中的位置。 如果您在这里设定了 1 个以上的分类，
	  则认为您 port 文件应放到以第一个分类命名的子目录中。 请参阅
	  <link linkend="choosing-categories">后面</link>
	  关于如何选择正确分类的更多讨论。</para>
      </sect2>

      <sect2 xml:id="porting-categories">
	<title>目前的分类表</title>

	<para>这是目前 port 中的分类。 那些用星号
	  (<literal>*</literal>) 标记的是
	  <emphasis>虚拟</emphasis>分类 &mdash;
	  它们在ports树里没有相应的子目录，
	  因而只用来做为次要的分类， 用以方便搜索。</para>

	<note>
	  <para>对于非虚拟的分类来说，
	    您会看到在相对应子目录中的 <filename>Makefile</filename>
	    里有写在 <varname>COMMENT</varname> 里的单行描述。</para>
	</note>

	<informaltable frame="none" pgwide="1">
	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>分类</entry>
		<entry>描述</entry>
		<entry>注意事项</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><filename>accessibility</filename></entry>
		<entry>帮助残障人士的 port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>afterstep*</filename></entry>
		<entry>对于
		  <link xlink:href="http://www.afterstep.org">AfterStep</link>
		  窗口管理器的支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>arabic</filename></entry>
		<entry>阿拉伯语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>archivers</filename></entry>
		<entry>压缩与备份工具。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>astro</filename></entry>
		<entry>有关天文学的 port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>audio</filename></entry>
		<entry>声音支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>benchmarks</filename></entry>
		<entry>测评程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>biology</filename></entry>
		<entry>生物学相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>cad</filename></entry>
		<entry>计算机辅助设计工具。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>chinese</filename></entry>
		<entry>中文语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>comms</filename></entry>
		<entry>通讯软件。</entry>
		<entry>大部分是用于串口通讯的。</entry>
	      </row>

	      <row>
		<entry><filename>converters</filename></entry>
		<entry>字符编码转换。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>databases</filename></entry>
		<entry>数据库。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>deskutils</filename></entry>
		<entry>在发明计算机以前就已经在桌面上使用的东西。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>devel</filename></entry>
		<entry>程序开发工具。</entry>
		<entry>不要把开发库放在这里 &mdash;
		  除非您再也找不到更合适的分类，
		  否则就不该放在这个分类里。</entry>
	      </row>

	      <row>
		<entry><filename>dns</filename></entry>
		<entry>DNS 相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>docs*</filename></entry>
		<entry>有关 FreeBSD 文档的 Meta-ports。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>editors</filename></entry>
		<entry>通用编辑器。</entry>
		<entry>有特殊用途的编辑器应该被置于相应的分类中
		  (比如， 数学-方程式
		  编辑器应该放在 <filename>math</filename> 分类里。</entry>
	      </row>

	      <row>
		<entry><filename>elisp*</filename></entry>
		<entry>Emacs-lisp相关的port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>emulators</filename></entry>
		<entry>其它操作系统的模拟器。</entry>
		<entry>终端模拟器 <emphasis>不应该</emphasis>
		  属于这个分类 &mdash; 基于 X 的应该放在
		  <filename>x11</filename> 而基于文本模式的应该放到
		  <filename>comms</filename> 或 <filename>misc</filename>
		  中去， 取决于具体的功能。</entry>
	      </row>

	      <row>
		<entry><filename>finance</filename></entry>
		<entry>货币、 金融以及相关的应用程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>french</filename></entry>
		<entry>法语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>ftp</filename></entry>
		<entry>FTP 客户端和服务器端的程序。</entry>
		<entry>如果您的 port 同时支持 FTP 和 HTTP 的话，
		  把它放进 <filename>ftp</filename> 并把
		  <filename>www</filename> 做为第二分类。</entry>
	      </row>

	      <row>
		<entry><filename>games</filename></entry>
		<entry>游戏。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>geography*</filename></entry>
		<entry>与地理学有关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>german</filename></entry>
		<entry>德语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>gnome*</filename></entry>
		<entry>关于
		  <link xlink:href="http://www.gnome.org">GNOME</link>
		  项目的支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>gnustep*</filename></entry>
		<entry>与 GNUstep 桌面环境有关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>graphics</filename></entry>
		<entry>图形图象程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>hamradio*</filename></entry>
		<entry>业余无线电爱好者使用的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>haskell*</filename></entry>
		<entry>有关 Haskell 编程语言的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>hebrew</filename></entry>
		<entry>希伯来语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>hungarian</filename></entry>
		<entry>匈牙利语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>ipv6*</filename></entry>
		<entry>IPv6 相关软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>irc</filename></entry>
		<entry>IRC 相关程序</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>japanese</filename></entry>
		<entry>日语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>java</filename></entry>
		<entry>与 Java&trade; 编程语言有关的软件。</entry>
		<entry><filename>java</filename> 分类对 port 而言不应是其唯一的分类。
		  除了直接与 Java 语言相关的 port 之外，
		  开发人员应尽量避免使用 <filename>java</filename> 作为
		  port 的主分类。</entry>
	      </row>

	      <row>
		<entry><filename>kde*</filename></entry>
		<entry><link xlink:href="http://www.kde.org">K 桌面环境 (KDE)</link>
		  相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>kld*</filename></entry>
		<entry>可加载内核模块。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>korean</filename></entry>
		<entry>韩语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>lang</filename></entry>
		<entry>编程语言。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>linux*</filename></entry>
		<entry>Linux 相关的应用程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>lisp*</filename></entry>
		<entry>和 Lisp 编程语言有关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>mail</filename></entry>
		<entry>电子邮件软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>math</filename></entry>
		<entry>数值计算和其它数学相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>mbone*</filename></entry>
		<entry>MBone 应用程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>misc</filename></entry>
		<entry>各式各样的实用程序。</entry>
		<entry>通常不属于其它的任何分类，
		  如果可能的话， 尽量为您的 port 选择
		  <literal>misc</literal>
		  以外的分类， 因为在这里的
		  port 比较容易被人忽略。</entry>
	      </row>

	      <row>
		<entry><filename>multimedia</filename></entry>
		<entry>多媒体软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>net</filename></entry>
		<entry>各种网络相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>net-im</filename></entry>
		<entry>即时消息软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>net-mgmt</filename></entry>
		<entry>网络管理软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>net-p2p</filename></entry>
		<entry>对等网 (Peer to peer network) 应用程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>news</filename></entry>
		<entry>USENET新闻组相关软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>palm</filename></entry>
		<entry><link xlink:href="http://www.palm.com/">Palm&trade;</link> 系列相关软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>parallel*</filename></entry>
		<entry>并行计算相关软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>pear*</filename></entry>
		<entry>Pear PHP 架构相关软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>perl5*</filename></entry>
		<entry><application>Perl</application>5 相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>plan9*</filename></entry>
		<entry><link xlink:href="http://www.cs.bell-labs.com/plan9dist/">Plan9</link> 相关程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>polish</filename></entry>
		<entry>波兰语语言语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>ports-mgmt</filename></entry>
		<entry>用于管理、 安装和开发 FreeBSD ports 和预编译包的 port。</entry>
	      </row>

	      <row>
		<entry><filename>portuguese</filename></entry>
		<entry>葡萄牙语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>print</filename></entry>
		<entry>打印相关的软件。</entry>
		<entry>桌面出版工具 (打印预览工具等等)
		  也可以放在此分类里。</entry>
	      </row>

	      <row>
		<entry><filename>python*</filename></entry>
		<entry><link xlink:href="http://www.pythong.org/">Python</link> 编程语言相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>ruby*</filename></entry>
		<entry><link xlink:href="http://www.ruby-lang.org/">Ruby</link> 编程语言相关的软件。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>rubygems*</filename></entry>
		<entry>移植版本的 <link xlink:href="http://www.rubygems.org/">RubyGems</link> 软件包。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>russian</filename></entry>
		<entry>俄语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>scheme*</filename></entry>
		<entry>与 Scheme 语言有关的 port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>science</filename></entry>
		<entry>科学相关但不适合放在
		  <filename>astro</filename>、
		  <filename>biology</filename>， 以及
		  <filename>math</filename> 分类的 port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>security</filename></entry>
		<entry>安全相关的实用程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>shells</filename></entry>
		<entry>命令行 shell。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>spanish*</filename></entry>
		<entry>西班牙语支持</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>sysutils</filename></entry>
		<entry>系统相关的实用程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>tcl*</filename></entry>
		<entry>依赖于 Tcl 运行的 port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>textproc</filename></entry>
		<entry>文本处理的实用程序。</entry>
		<entry>这个分类并不适合于那些应该放到
		  <filename>print</filename> 的桌面出版工具。</entry>
	      </row>

	      <row>
		<entry><filename>tk*</filename></entry>
		<entry>依赖于 Tk 运行的 port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>ukrainian</filename></entry>
		<entry>乌克兰语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>vietnamese</filename></entry>
		<entry>越南语语言支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>windowmaker*</filename></entry>
		<entry>WindowMaker 窗口管理器的相关支持。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>www</filename></entry>
		<entry>Word Wide Web的相关软件。</entry>
		<entry>HTML语言相关的支持也可以放在这个分类里。</entry>
	      </row>

	      <row>
		<entry><filename>x11</filename></entry>
		<entry>X Window System以及相关软件。</entry>
		<entry>这个分类是给那些直接支持X Window System
		  的软件的。 不要把常规的 X 应用程序也放进这里；
		  它们中的大多数都应被归类到
		  <filename>x11-*</filename> (参见下文)。
		  如果您的 port <emphasis>是</emphasis>
		  X 应用程序， 应定义 <varname>USE_XLIB</varname>
		  (使用 <varname>USER_IMAKE</varname> 隐含包括它)，
		  然后把它放到合适的分类里。</entry>
	      </row>

	      <row>
		<entry><filename>x11-clocks</filename></entry>
		<entry>X11 下的时钟程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>x11-drivers</filename></entry>
		<entry>X11 驱动程序。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>x11-fm</filename></entry>
		<entry>X11 下的文件管理器。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>x11-fonts</filename></entry>
		<entry>X11 下的字体以及相关工具。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>x11-servers</filename></entry>
		<entry>X11 服务器。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>x11-themes</filename></entry>
		<entry>X11 主题。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>x11-toolkits</filename></entry>
		<entry>X11 工具包。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>x11-wm</filename></entry>
		<entry>X11 窗口管理器。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>xfce*</filename></entry>
		<entry>与
		  <link xlink:href="http://www.xfce.org/">Xfce</link>
		  桌面环境有关的 port。</entry>
		<entry/>
	      </row>

	      <row>
		<entry><filename>zope*</filename></entry>
		<entry><link xlink:href="http://www.zope.org/">Zope</link> 相关的支持。</entry>
		<entry/>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>
      </sect2>

      <sect2 xml:id="choosing-categories">
	<title>选择正确的分类</title>

	<para>由于不少分类是重复的， 您通常在用哪个分类作为您
	  port 的主分类上做出选择。 下面有几条规则能帮您解决这个问题。
	  这是一个带优先级的表， 按优先级降序罗列：</para>

	<itemizedlist>
	  <listitem>
	    <para>第一个分类必须是个物理的分类 (参阅
	      <link linkend="porting-categories">前面</link>)。
	      这对于制作包是必要的。
	      虚拟分类和物理分类可能在包制作完成后混合在一起。</para>
	  </listitem>

	  <listitem>
	    <para>对于特定语言的分类通常放在第一位。
	      例如， 如果您的 port 会安装一些 X11 的日文字体，
	      那么 <varname>CATEGORIES</varname>那行
	      就应该是 <filename>japanese x11-fonts</filename>。</para>
	  </listitem>

	  <listitem>
	    <para>有特定意义的分类应当被列在无特定意义的前面。
	      例如， HTML 编辑器应该是这样的 <filename>www
		 editors</filename>， 而不是其它的什么。 同样地，
	      您不应该列出 <filename>net</filename>， 如果 port 属于
	      <filename>irc</filename>、 <filename>mail</filename>、
	      <filename>news</filename>、
	      <filename>security</filename>， 或是 <filename>www</filename>，
	      因为 <filename>net</filename> 可以表示它们的超集。</para>
	  </listitem>

	  <listitem>
	    <para>只有当主要的分类是一门自然语言的时候，
	      <filename>x11</filename> 能被做为第二分类。
	      需要特别指出的是， 您不应把 X 的应用程序也归类为
	      <filename>x11</filename>。</para>
	  </listitem>

	  <listitem>
	    <para><application>Emacs</application>
	      模式应当于相应的应用程序放在同一个分类里， 而不是
	      <filename>editors</filename> 分类。 举例来说，
	      一个用于编辑某种编程语言源代码的
	      <application>Emacs</application>
	      模式应该被归为
	      <filename>lang</filename> 一类。
	    </para>
	  </listitem>

          <listitem>
	    <para>需要安装可加载内核模块的 port 应在其 <varname>CATEGORIES</varname>
	      中归入虚拟分类 <filename>kld</filename>。
	    </para>
	  </listitem>

	  <listitem>
	    <para><filename>misc</filename>
	      分类的 port 不能有其它非虚拟的分类。
	      如果您在您的 <varname>CATEGORIES</varname>
	      里设了 <literal>misc</literal> 和另外的分类，
	      那意味着可以安全地删除 <literal>misc</literal>
	      并把 port 放到其它的子目录中了！</para>
	  </listitem>

	  <listitem>
	    <para>如果您的 port 确实不属于现有的分类，
	      才把它放到 <filename>misc</filename>。</para>
	  </listitem>
	</itemizedlist>

	<para>如果您不能确定使用哪个分类， 请在您提交的
	  &man.send-pr.1; 里加上一行注释，
	  这样我们就能在导入进 port 树之前讨论一下。
	  如果您是 committer， 发一份备忘到 &a.ports;
	  先讨论一下。 很多情况是新的 port 被加到错误的分类里，
	  然后又立即被移走。这会造成源代码库不必要和不良的膨胀。</para>
      </sect2>

      <sect2 xml:id="proposing-categories">
	<title>如何提议建立新的分类</title>

	<para>由于 Ports Collection 在持续增长， 已经引入了许多新的分类。
	  新的分类既可以是 <emphasis>虚拟的</emphasis> 分类 &mdash;
	  这些分类在整个 ports 目录中没有属于自己的子目录 &mdash;
	  或 <emphasis>物理的</emphasis> 分类 &mdash; 它们有自己的子目录。
	  接下来我们将讨论与建立新的物理分类有关的事项，
	  以便帮助您理解如何提议建立新的分类。</para>

	<para>我们目前的做法是避免建立新的物理分类， 除非有非常多的 port
	  应被归入这一分类， 或者 port 属于某一特定的小团体 (例如，
	  与某种人类语言相关)， 或两者皆是。</para>

	<para>这样做的原因是这类修改会让 committer 和用户都不得不进行 <link xlink:href="&url.articles.committers-guide;/#ports">许多工作</link>
	  来在 Ports Collection 进行或追踪修改。 此外，
	  提议新的分类通常都会引起争论。 (可能这是因为关于某个分类是否
	  <quote>太大</quote> 一直没有非常一致的意见的缘故，
	  另一方面， 分类是否能够能够有助于浏览 (以及多少个分类是合适的)，
	  等等， 也都是问题。)</para>

	<para>下面是具体的步骤：</para>

	<procedure>
	  <step>
	    <para>在 &a.ports; 提议新的分类。 您应提供建立新分类的详细依据，
	      包括为什么认为现有的分类不够， 以及希望移动位置的一系列 port
	      的名字。 (如果有尚在
	      <application>GNATS</application> 而未 commit 的 port，
	      也应一一列出。)  如果您是相关 port 的监护人或提交者，
	      说明这一情况可能有助于您的提议得到通过。</para>
	  </step>

	  <step>
	    <para>参与讨论。</para>
	  </step>

	  <step>
	    <para>如果有人支持您的建议， 应及时提交一个 PR，
	      其中包括提议 PR 的理由， 以及需要移动的 port 的列表。
	      理想情况下， 这个 PR 也应包含针对下列文件的补丁：</para>

	    <itemizedlist>
	      <listitem>
		<para>进行 repocopy 之后对 <filename>Makefile</filename>
		  进行的修改</para>
	      </listitem>

	      <listitem>
		<para>新分类的 <filename>Makefile</filename></para>
	      </listitem>

	      <listitem>
		<para>旧分类的 <filename>Makefile</filename></para>
	      </listitem>

	      <listitem>
		<para>依赖于旧 port 的 port 的
		  <filename>Makefile</filename></para>
	      </listitem>

	      <listitem>
		<para>(此外， 作为一项加分因素，
		  您还可以按照 Committer 指南所介绍的流程，
		  提供一些其它需要修改的文件。)</para>
	      </listitem>
	    </itemizedlist>
	  </step>

	  <step>
	    <para>由于这是一项影响 ports 基础设施的变动，
	      它不仅涉及 repo-copy 的使用，
	      而且也可能会影响联编集群的回归测试操作，
	      因此这类 PR 应分派给 &a.portmgr;。</para>
	  </step>

	  <step>
	    <para>如果这一 PR 得到批准， 某个 committer 将按照在
	      <link xlink:href="&url.articles.committers-guide;/article.html#PORTS">
	      Committer 指南</link> 中所介绍的步骤来完成余下的工作。</para>
	  </step>
	</procedure>

	<para>提议新的虚拟分类和上述过程类似， 但会容易许多，
	  因为不需要实际地移动任何 port。 这种情况下， PR 应附带的补丁，
	  就只需要修改影响到的 port 的 Makefile， 以便在其中的
	  <varname>CATEGORIES</varname> 中加入新的分类了。</para>
      </sect2>

      <sect2 xml:id="proposing-reorg">
	<title>如何提议对分类进行重新组织</title>

	<para>有些时候会有一些人提议重新将分类组织为 2-层 或某种基于关键字的结构。
	  目前为止， 还没有进行任何相关的改变， 因为尽管这些修改比较容易完成，
	  但修改整个 Ports Collection 所需要进行的工作， 至少也是令人生畏的。
	  在发表您的观点之前， 请阅读在邮件列表存档中历史上所进行过的提议；
	  此外， 您也会被要求提供一个可用的原形。</para>
      </sect2>
    </sect1>

    <sect1 xml:id="makefile-distfiles">
      <title>源码包文件</title>

      <para>在 <filename>Makefile</filename> 中的第二部分是描述用于联编 port
	所必需下载的文件， 以及到什么地方去下载它们。</para>

      <sect2>
	<title><varname>DISTVERSION/DISTNAME</varname> (源码包版本号/名称)</title>

	<para><varname>DISTNAME</varname> 是作者称呼您所 port 软件的名字。
	  <varname>DISTNAME</varname> 的默认值是
	  <literal>${PORTNAME}-${PORTVERSION}</literal>，
	  因此只有在需要时才应手工指定。
	  <varname>DISTNAME</varname> 只在两个地方用到。 第一处是源码包文件列表
	  (<varname>DISTFILES</varname>)， 其默认值是
	  <varname>${DISTNAME}</varname><varname>${EXTRACT_SUFX}</varname>。
	  第二处是源码包应被展开到的目录名，
	  即 <varname>WRKSRC</varname> 所指定的目录，
	  其默认值是 <filename>work/${DISTNAME}</filename>。</para>

        <para>某些软件作者发布源码包的时候并不采取
	  <literal>${PORTNAME}-${PORTVERSION}</literal> 这样的模式，
	  这可以通过设置 <varname>DISTVERSION</varname> 来自动处理。
	  <varname>PORTVERSION</varname> 和 <varname>DISTNAME</varname>
	  会自动地展开， 当然， 也可以改掉它。 下表给出了一些例子：</para>

	<informaltable frame="none" pgwide="1">
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry><varname>DISTVERSION</varname></entry>
		<entry><varname>PORTVERSION</varname></entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry>0.7.1d</entry>
		<entry>0.7.1.d</entry>
	      </row>

	      <row>
		<entry>10Alpha3</entry>
		<entry>10.a3</entry>
	      </row>

	      <row>
		<entry>3Beta7-pre2</entry>
		<entry>3.b7.p2</entry>
	      </row>

	      <row>
		<entry>8:f_17</entry>
		<entry>8f.17</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>

	<note>
	  <para><varname>PKGNAMEPREFIX</varname> 和
	    <varname>PKGNAMESUFFIX</varname> 并不影响
	    <varname>DISTNAME</varname>。 此外还应注意
	    <varname>WRKSRC</varname> 等于
	    <filename>work/${PORTNAME}-${PORTVERSION}</filename>，
	    而源代码的压缩包则可能是
	    <varname>${PORTNAME}-${PORTVERSION}${EXTRACT_SUFX}</varname>
	    以外的其它名字。 一般情况下应该保持 <varname>DISTNAME</varname>
	    不变 &mdash; 更好的方法是定义
	    <varname>DISTFILES</varname> 而不是同时设置
	    <varname>DISTNAME</varname> 和 <varname>WRKSRC</varname>
	    (可能还有 <varname>EXTRACT_SUFX</varname>)。</para>
	</note>
      </sect2>

      <sect2>
	<title><varname>MASTER_SITES</varname> (主流下载站点)</title>

	<para>记录 FTP/HTTP-URL 指向 <varname>MASTER_SITES</varname>
	  中原始压缩档的目录部分。 不要忘了结尾的斜线
	  (<filename>/</filename>)！</para>

	<para><command>make</command> 宏将尝试使用
	  <varname>FETCH</varname> 来抓取所指定的源码包文件，
	  如果无法在本地系统中找到这些文件的话。</para>

	<para>建议您指定多个镜像站点， 最好是在不同的大洲上的。
	  这样将有效地防止由于大范围网络问题所导致无法下载的问题。
	  我们甚至打算增加自动检测距离最近的站点并从那里下载的功能；
	  使用多个站点是这样做的重要一步。</para>

	<para>如果原始的源码包可以从比较流行的软件下载站点，
	  例如 SourceForge、 GNU 或是 Perl CPAN 等等来获得，
	  您可能会希望使用类似
	  <varname>MASTER_SITE_<replaceable>*</replaceable></varname>
	  这样的缩写来表示它们
	  (例如 <varname>MASTER_SITE_SOURCEFORGE</varname>、
	  <varname>MASTER_SITE_GNU</varname> 以及
	  <varname>MASTER_SITE_PERL_CPAN</varname>)。 只需将
	  <varname>MASTER_SITES</varname> 设为这些变量， 并使用
	  <varname>MASTER_SITE_SUBDIR</varname> 来指定路径就可以了。
	  下面是一个例子：</para>

	<programlisting>MASTER_SITES=         ${MASTER_SITE_GNU}
MASTER_SITE_SUBDIR=   make</programlisting>

	<para>此外， 您还可以用更为简略的格式：</para>

	<programlisting>MASTER_SITES=	GNU/make</programlisting>

	<para>这些变量是在
	  <filename>/usr/ports/Mk/bsd.sites.mk</filename> 中定义的。
	  新项目会随时增加， 因此在您提交 port 之前，
	  应先看一看这个文件的最新版本。</para>

	<para>针对常用软件下载站的许多 <emphasis>暗黑魔法</emphasis> 宏，
	  还能够自动判断目录的结构。 对于这些站点，
	  只要使用与之对应的缩写， 系统便会自动为您生成相关的子目录配置。</para>

	<programlisting>MASTER_SITES=	SF</programlisting>

	<para>如果系统猜测的路径不对， 则可以使用下面这样的配置来替换。</para>

	<programlisting>MASTER_SITES=	SF/stardict/WyabdcRealPeopleTTS/${PORTVERSION}</programlisting>

	<table frame="none">
	  <title>常用的魔术 <varname>MASTER_SITES</varname> 宏</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>宏</entry>

		<entry>自动猜测的子目录</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>APACHE_JAKARTA</varname></entry>

		<entry><varname>/dist/jakarta/${PORTNAME:S,-,,/,}/source</varname></entry>
	      </row>

	      <row>
		<entry><varname>BERLIOS</varname></entry>

		<entry><varname>/${PORTNAME:L}</varname></entry>
	      </row>

	      <row>
		<entry><varname>CHEESESHOP</varname></entry>

		<entry><varname>/packages/source/source/${DISTNAME:C/(.).*/\1/}/${DISTNAME:C/(.*)-[0-9].*/\1/}</varname></entry>
	      </row>

	      <row>
		<entry><varname>DEBIAN</varname></entry>

		<entry><varname>/debian/pool/main/${PORTNAME:C/^((lib)?.).*$/\1/}/${PORTNAME}</varname></entry>
	      </row>

	      <row>
		<entry><varname>GCC</varname></entry>

		<entry><varname>/pub/gcc/releases/${DISTNAME}</varname></entry>
	      </row>

	      <row>
		<entry><varname>GNOME</varname></entry>

		<entry><varname>/pub/GNOME/sources/${PORTNAME}/${PORTVERSION:C/^([0-9]+\.[0-9]+).*/\1/}</varname></entry>
	      </row>

	      <row>
		<entry><varname>GNU</varname></entry>

		<entry><varname>/gnu/${PORTNAME}</varname></entry>
	      </row>

	      <row>
		<entry><varname>MOZDEV</varname></entry>

		<entry><varname>/pub/mozdev/${PORTNAME:L}</varname></entry>
	      </row>

	      <row>
		<entry><varname>PERL_CPAN</varname></entry>

		<entry><varname>/pub/CPAN/modules/by-module/${PORTNAME:C/-.*//}</varname></entry>
	      </row>

	      <row>
		<entry><varname>PYTHON</varname></entry>

		<entry><varname>/ftp/python/${PYTHON_PORTVERSION:C/rc[0-9]//}</varname></entry>
	      </row>

	      <row>
		<entry><varname>RUBYFORGE</varname></entry>

		<entry><varname>/${PORTNAME:L}</varname></entry>
	      </row>

	      <row>
		<entry><varname>SAVANNAH</varname></entry>

		<entry><varname>/${PORTNAME:L}</varname></entry>
	      </row>

	      <row>
		<entry><varname>SF</varname></entry>

		<entry><varname>/project/${PORTNAME:L}/${PORTNAME:L}/${PORTVERSION}</varname></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </sect2>

      <sect2>
	<title><varname>EXTRACT_SUFX</varname> (压缩包所用的扩展名)</title>

	<para>如果您有一个源码包文件，
	  而它使用了某种怪异的扩展名来表达压缩方法， 应设置
	  <varname>EXTRACT_SUFX</varname>。</para>

	<para>例如， 如果源码包文件的名字是
	  <filename>foo.tgz</filename> 而非更为一般的
	  <filename>foo.tar.gz</filename>， 您应写上：</para>

	<programlisting>DISTNAME=      foo
EXTRACT_SUFX=  .tgz</programlisting>

	<para><varname>USE_BZIP2</varname> 和 <varname>USE_ZIP</varname>
	  变量会自动根据需要将 <varname>EXTRACT_SUFX</varname> 设置为
	  <literal>.tar.bz2</literal> 或 <literal>.zip</literal>。
	  如果这两个都没设置， 则 <varname>EXTRACT_SUFX</varname> 的
	  默认值将是 <literal>.tar.gz</literal>。</para>

	<note>
	  <para>任何时候都不需要同时设置 <varname>EXTRACT_SUFX</varname> 和
	    <varname>DISTFILES</varname>.</para>
	</note>
      </sect2>

      <sect2>
	<title><varname>DISTFILES</varname> (全部源代码包)</title>

	<para>有些时候所下载的文件名字和 port 的名字没有任何联系。
	  例如， 可能是 <filename>source.tar.gz</filename>，
	  或者与此类似的其它名字。 也有一些其它的应用软件，
	  它们的源代码可能被存放到了不同的压缩包中， 而且全都需要下载。</para>

	<para>如果遇到这种情况， 可以将 <varname>DISTFILES</varname>
	  设置为以空格分隔的一组需要下载的文件列表。</para>

	<programlisting>DISTFILES=     source1.tar.gz source2.tar.gz</programlisting>

	<para>如果没有予以明确的设置， <varname>DISTFILES</varname> 的默认值将是
	  <literal>${DISTNAME}${EXTRACT_SUFX}</literal>。</para>
      </sect2>

      <sect2>
	<title><varname>EXTRACT_ONLY</varname> (只解压缩部分源文件)</title>

	<para>如果只有一部分 <varname>DISTFILES</varname> 需要解压缩
	  &mdash; 例如， 其中的一个是源代码， 而其它则是未压缩的文档 &mdash;
	  此时应把那些需要解压缩的文件加到
	  <varname>EXTRACT_ONLY</varname> 中。</para>

	<programlisting>DISTFILES=     source.tar.gz manual.html
EXTRACT_ONLY=  source.tar.gz</programlisting>

	<para>如果 <varname>DISTFILES</varname> 中 <emphasis>没有</emphasis>
	  需要解压缩的文件， 则应将 <varname>EXTRACT_ONLY</varname> 设为空串。</para>

	<programlisting>EXTRACT_ONLY=</programlisting>
      </sect2>

      <sect2 xml:id="porting-patchfiles">
	<title><varname>PATCHFILES</varname> (通过下载得到的补丁文件)</title>

	<para>如果您的 port 需要来自 FTP 或 HTTP 的一些额外的补丁，
	  应将 <varname>PATCHFILES</varname> 设置为这些文件的名字，
	  并将 <varname>PATCH_SITES</varname> 指向包含这些文件的目录的 URL
	  (格式与 <varname>MASTER_SITES</varname> 相同)。</para>

	<para>如果这些补丁， 由于包含了其它的目录名，
	  而导致它们不是相对于源代码目录的顶级目录
	  (也就是 <varname>WRKSRC</varname>) 的话，
	  就需要相应地设置 <varname>PATCH_DIST_STRIP</varname> 了。
	  例如， 如果补丁中所有的目录名前面都有一个多余的
	  <literal>foozolix-1.0/</literal>， 就应设置
	  <literal>PATCH_DIST_STRIP=-p1</literal>。</para>

	<para>不需要担心补丁文件本身是否是压缩的； 如果文件名以
	  <filename>.gz</filename> or <filename>.Z</filename>
	  结尾， 系统会自动解压缩。</para>

	<para>如果补丁是同某些其它文件， 例如文档， 一同以 gzip 压缩的 tar
	  格式发布的， 就不能简单地使用
	  <varname>PATCHFILES</varname> 了。 这种情况下，
	  您应将这些补丁包的文件和位置加入到
	  <varname>DISTFILES</varname> 和 <varname>MASTER_SITES</varname>
	  中。 然后， 用 <varname>EXTRA_PATCHES</varname> 变量来指出这些文件，
	  这样 <filename>bsd.port.mk</filename> 就会自动地为您应用这些补丁了。
	  需要特别注意的是， <emphasis>不要</emphasis> 将补丁文件复制到
	  <varname>PATCHDIR</varname> 目录中 &mdash; 这个目录可能是不可写的。</para>

	<note>
	  <para>压缩包会以同源代码一样的方式解压缩， 因此不需要自行完成解压缩操作，
	    并复制补丁文件。 如果您一定要这样做， 就要注意，
	    不要让解压缩出来的文件覆盖先前已经存在的文件。
	    此外， 这么做还需要手工增加命令，
	    以便在 <buildtarget>pre-clean</buildtarget> target
	    中删除这些复制出来的文件。</para>
	</note>
      </sect2>

      <sect2 xml:id="porting-master-sites-n">
	<title>来自不同站点的多个源代码包或补丁文件
	  (<literal>MASTER_SITES:n</literal>)</title>

	<para>(这一节在某种程度上应被视作 <quote>进阶话题</quote>；
	  刚开始阅读这份文档的读者可能会希望先跳过这一部分)。</para>

	<para>这一节提供了被称作 <literal>MASTER_SITES:n</literal> 和
	  <literal>MASTER_SITES_NN</literal> 的下载控制机制。
	  这里我们把它们称为 <literal>MASTER_SITES:n</literal>。</para>

	<para>首先给出一些背景。 OpenBSD 在其 <varname>DISTFILES</varname> 和
	  <varname>PATCHFILES</varname> 变量中提供了一个很棒的功能，
	  即， 允许这些文件和补丁拥有 <literal>:n</literal>
	  后缀， 其中 <literal>n</literal> 可以使用
	  <literal>[0-9]</literal>， 来表达组。 例如：</para>

	<programlisting>DISTFILES=      alpha:0 beta:1</programlisting>

	<para>在 OpenBSD 中， 源码包文件 <filename>alpha</filename>
	  应被关联到变量
	  <varname>MASTER_SITES0</varname> 而不是公共的
	  <varname>MASTER_SITES</varname> 变量上； 而
	  <filename>beta</filename> 则应关联到
	  <varname>MASTER_SITES1</varname> 上。</para>

	<para>这是一个很有意思的功能，
	  它可以避免无休止地搜索正确的下载站点的过程。</para>

	<para>想象 <varname>DISTFILES</varname> 中指定了 2 个文件，
	  而 <varname>MASTER_SITES</varname> 包含了 20 个站点的情形，
	  这其中许多站点慢如蜗牛， 而 <filename>beta</filename> 可以在
	  <varname>MASTER_SITES</varname> 的所有站点找到， 而
	  <filename>alpha</filename> 只能在第 20 个上面找到。
	  如果监护人了解这一点， 那么检查所有的站点无疑是在浪费时间，
	  不是吗？ 这显然不是开始一个愉快周末的好办法！</para>

	<para>现在您有了一个感性的认识了， 想象一下
	  <varname>DISTFILES</varname> 和更多的
	  <varname>MASTER_SITES</varname>。 显然， 我们的
	  <quote>distfiles 调查员先生</quote>
	  会感谢您减少他浪费在等待下载上所耗费的时间。</para>

	<para>下一节中， 将按照 FreeBSD 对上述想法的实现来加以阐释。
	  我们对 OpenBSD 所提出的概念进行了一些改进。</para>

	<sect3>
	  <title>简化信息</title>

	  <para>这一节将介绍如何迅速地对从不同的站点以及子目录下载多个源码包和补丁进行精确的控制。
	    这里， 我们将描述 <literal>MASTER_SITES:n</literal> 的一种简化用法。
	    对于多数情况而言这样做是足够的。 然而， 如果您需要更多信息，
	    还需要参考下面的几节。</para>

	  <para>一些应用程序需要从多个站点下载不同的源码包。 例如，
	    <application>Ghostscript</application> 包括了程序核心本身，
	    以及大量的驱动文件， 以及则取决于用户的打印机品牌和型号的驱动程序。
	    某些驱动文件已经随程序核心附带， 但也有很多需要从其它站点下载。</para>

	  <para>为了适应这种需要， 每一个
	    <varname>DISTFILES</varname> 项应跟随一个冒号，
	    以及一个 <quote>标签名</quote>。 在
	    <varname>MASTER_SITES</varname> 的每个站点也应跟随冒号和标签名，
	    以便指定从哪个网站下载源码包文件。</para>

	  <para>例如， 考虑一个将源代码包分为两部分，
	    即 <filename>source1.tar.gz</filename>
	    和 <filename>source2.tar.gz</filename> 的软件，
	    它必须从两个不同的站点下载。 port 的
	    <filename>Makefile</filename> 应包括类似
	    <xref linkend="ports-master-sites-n-example-simple-use-one-file-per-site"/>
	    的配置。</para>

	  <example xml:id="ports-master-sites-n-example-simple-use-one-file-per-site">
	    <title>简化的 <literal>MASTER_SITES:n</literal>
	      用法， 每个文件来自一个站点</title>

	    <programlisting>MASTER_SITES=   ftp://ftp.example1.com/:source1 \
		ftp://ftp.example2.com/:source2
DISTFILES=      source1.tar.gz:source1 \
		source2.tar.gz:source2</programlisting>
	  </example>

	  <para>多个源码包可以使用同一个标签。 继续前面的例子，
	    假定增加了第三个源码包， <filename>source3.tar.gz</filename>，
	    应从 <systemitem>ftp.example2.com</systemitem> 下载。
	    <filename>Makefile</filename> 的这部分应写成
	    <xref linkend="ports-master-sites-n-example-simple-use-more-than-one-file-per-site"/>
	    的样子。</para>

	  <example xml:id="ports-master-sites-n-example-simple-use-more-than-one-file-per-site">
	    <title>简化的 <literal>MASTER_SITES:n</literal> 用法，
	      其中同一个站点上提供了不止一个文件</title>

	    <programlisting>MASTER_SITES=   ftp://ftp.example1.com/:source1 \
		ftp://ftp.example2.com/:source2
DISTFILES=      source1.tar.gz:source1 \
		source2.tar.gz:source2 \
		source3.tar.gz:source2</programlisting>
	  </example>
	</sect3>

	<sect3>
	  <title>深入介绍</title>

	  <para>前面的例子无法满足您的需求？ 这一节，
	    我们将详细介绍 <literal>MASTER_SITES:n</literal>
	    的精细控制是如何工作的， 以及如何修改您的 port
	    来使用它们。</para>

	  <orderedlist>
	    <listitem>
	      <para>元素可以包含
		<literal>:n</literal> 这样的后缀， 其中
		<replaceable>n</replaceable> 是
		<literal>[^:,]+</literal>， 概念上即
		<replaceable>n</replaceable> 可以取任意数字或字母，
		但我们目前将其限定为
		<literal>[a-zA-Z_][0-9a-zA-Z_]+</literal>。</para>

	      <para>此外， 字符串匹配时对大小写是敏感的；
		换言之， <literal>n</literal> 与
		<literal>N</literal> 不同。</para>

	      <para>但是， 由于表达特殊的意义， 下列单词不能用于后缀：
		<literal>default</literal>、 <literal>all</literal> 和
		<literal>ALL</literal> (它们会在 <xref linkend="porting-master-sites-n-what-changes-in-port-targets"/>
		中介绍的部分用到)。 此外， <literal>DEFAULT</literal>
		是一个有特殊用途的词 (请参见 <xref linkend="porting-master-sites-n-DEFAULT-group"/>)。</para>
	    </listitem>

	    <listitem>
	      <para>后缀为 <literal>:n</literal>
		的项目属于 <literal>n</literal> 组， 而
		<literal>:m</literal> 属于
		<literal>m</literal> 组， 依此类推。</para>
	    </listitem>

	    <listitem xml:id="porting-master-sites-n-DEFAULT-group">
	      <para>没有后缀的元素是无组的， 也就是它们都属于那个特殊的
		<literal>DEFAULT</literal> 组。 给元素加入
		<literal>DEFAULT</literal> 后缀通常是多余的，
		除非您有同时属于 <literal>DEFAULT</literal> 和其它组的元素
		(参见 <xref linkend="porting-master-sites-n-comma-operator"/>)。</para>

	      <para>下面的例子是等价的， 但通常应适用第一个：</para>

	      <programlisting>MASTER_SITES=   alpha

MASTER_SITES=   alpha:DEFAULT</programlisting>
	    </listitem>

	    <listitem>
	      <para>组之间不是互斥的， 同一元素可以同时隶属于多个组，
		而组则可以为空或者有任意多个元素。 同一组中的重复元素，
		并不会被自动消去。</para>
	    </listitem>

	    <listitem xml:id="porting-master-sites-n-comma-operator">
	      <para>如果希望同一元素同时属于多个组， 可以用逗号
		(<literal>,</literal>) 分开。</para>

	      <para>这种办法可以避免仅为指定不同的组而多次重复同一元素。 例如
		<literal>:m,n,o</literal> 表示这个元素同时属于
		<literal>m</literal>、 <literal>n</literal> 和 <literal>o</literal>
		这三组。</para>

	      <para>下面这些写法都是等价的， 但只推荐使用最后一种：</para>

	      <programlisting>MASTER_SITES=   alpha alpha:SOME_SITE

MASTER_SITES=   alpha:DEFAULT alpha:SOME_SITE

MASTER_SITES=   alpha:SOME_SITE,DEFAULT

MASTER_SITES=   alpha:DEFAULT,SOME_SITE</programlisting>
	    </listitem>

	    <listitem>
	      <para>同一组中的所有站点， 会根据
		<varname>MASTER_SORT_AWK</varname> 排序。
		在 <varname>MASTER_SITES</varname> 和
		<varname>PATCH_SITES</varname> 中的组也会进行排序。</para>
	    </listitem>

	    <listitem xml:id="porting-master-sites-n-group-semantics">
	      <para>在 <varname>MASTER_SITES</varname>、
		<varname>PATCH_SITES</varname>、
		<varname>MASTER_SITE_SUBDIR</varname>、
		<varname>PATCH_SITE_SUBDIR</varname>、
		<varname>DISTFILES</varname>， 以及
		<varname>PATCHFILES</varname> 中， 都可以使用组，
		其语法为：</para>

	      <orderedlist>
		<listitem>
		  <para>所有 <varname>MASTER_SITES</varname>、
		    <varname>PATCH_SITES</varname>、
		    <varname>MASTER_SITE_SUBDIR</varname> 以及
		    <varname>PATCH_SITE_SUBDIR</varname> 的元素， 都必须以
		    <literal>/</literal> 字符结尾。 如果有元素属于某些组，
		    则组后缀
		    <literal>:n</literal>
		    必须出现在终结符
		    <literal>/</literal> 之后。
		    <literal>MASTER_SITES:n</literal> 机制依赖于
		    <literal>/</literal> 的存在， 以避免在 <literal>:n</literal>
		    是元素一部分， 而 <literal>:n</literal> 同时又表示组
		    <literal>n</literal> 时发生混淆。 为了兼容性的考虑，
		    因为之前 <literal>/</literal> 终结符在
		    <varname>MASTER_SITE_SUBDIR</varname> 和
		    <varname>PATCH_SITE_SUBDIR</varname> 元素中都不是必需的，
		    如果后缀所紧跟的字符不是 <literal>/</literal>，
		    则 <literal>:n</literal> 将被认为是元素的一部分，
		    而不被当作组后缀， 即使元素拥有 <literal>:n</literal>
		    后缀。 请参见 <xref linkend="ports-master-sites-n-example-detailed-use-master-site-subdir"/>
		    和 <xref linkend="ports-master-sites-n-example-detailed-use-complete-example-master-sites"/>
		    以了解进一步的细节。</para>

		  <example xml:id="ports-master-sites-n-example-detailed-use-master-site-subdir">
		    <title>在 <varname>MASTER_SITE_SUBDIR</varname> 中
		      <literal>MASTER_SITES:n</literal> 的详细用法</title>

		    <programlisting>MASTER_SITE_SUBDIR=     old:n new/:NEW</programlisting>

		    <itemizedlist>
		      <listitem>
			<para>组 <literal>DEFAULT</literal> 中的目录
			  -&gt; old:n</para>
		      </listitem>

		      <listitem>
			<para>组 <literal>NEW</literal> 中的目录
			  -&gt; new</para>
		      </listitem>
		    </itemizedlist>
		  </example>

		  <example xml:id="ports-master-sites-n-example-detailed-use-complete-example-master-sites">
		      <title>用到逗号分隔符、 多个文件， 多个站点和
			不同子目录的 <literal>MASTER_SITES:n</literal>
			详细用法</title>

		    <programlisting>MASTER_SITES=   http://site1/%SUBDIR%/ http://site2/:DEFAULT \
		http://site3/:group3 http://site4/:group4 \
		http://site5/:group5 http://site6/:group6 \
		http://site7/:DEFAULT,group6 \
		http://site8/%SUBDIR%/:group6,group7 \
		http://site9/:group8
DISTFILES=      file1 file2:DEFAULT file3:group3 \
		file4:group4,group5,group6 file5:grouping \
		file6:group7
MASTER_SITE_SUBDIR=     directory-trial:1 directory-n/:groupn \
			directory-one/:group6,DEFAULT \
			directory</programlisting>

		    <para>前述的例子的结果是下述的对于下载行为的精细控制。
		      站点的列表按照使用的顺序给出。</para>

		    <itemizedlist>
		      <listitem>
			<para><filename>file1</filename> 将从</para>

			<itemizedlist>
			  <listitem>
			    <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			  </listitem>

			  <listitem>
			    <para>http://site1/directory-trial:1/</para>
			  </listitem>

			  <listitem>
			    <para>http://site1/directory-one/</para>
			  </listitem>

			  <listitem>
			    <para>http://site1/directory/</para>
			  </listitem>

			  <listitem>
			    <para>http://site2/</para>
			  </listitem>

			  <listitem>
			    <para>http://site7/</para>
			  </listitem>

			  <listitem>
			    <para><varname>MASTER_SITE_BACKUP</varname></para>
			  </listitem>
			</itemizedlist>

			<para>下载。</para>
		      </listitem>

		      <listitem>
			<para><filename>file2</filename> 将和
			  <filename>file1</filename> 以同样的方式下载，
			  因为它们属于同一组</para>

			<itemizedlist>
			  <listitem>
			    <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			  </listitem>

			  <listitem>
			    <para>http://site1/directory-trial:1/</para>
			  </listitem>

			  <listitem>
			    <para>http://site1/directory-one/</para>
			  </listitem>

			  <listitem>
			    <para>http://site1/directory/</para>
			  </listitem>

			  <listitem>
			    <para>http://site2/</para>
			  </listitem>

			  <listitem>
			    <para>http://site7/</para>
			  </listitem>

			  <listitem>
			    <para><varname>MASTER_SITE_BACKUP</varname></para>
			  </listitem>
			</itemizedlist>
		      </listitem>

		      <listitem>
			<para><filename>file3</filename> 将从</para>

			<itemizedlist>
			  <listitem>
			    <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			  </listitem>

			  <listitem>
			    <para>http://site3/</para>
			  </listitem>

			  <listitem>
			    <para><varname>MASTER_SITE_BACKUP</varname></para>
			  </listitem>
			</itemizedlist>

			<para>下载。</para>
		      </listitem>

		      <listitem>
			<para><filename>file4</filename> 将从</para>

			<itemizedlist>
			  <listitem>
			    <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			  </listitem>

			  <listitem>
			    <para>http://site4/</para>
			  </listitem>

			  <listitem>
			    <para>http://site5/</para>
			  </listitem>

			  <listitem>
			    <para>http://site6/</para>
			  </listitem>

			  <listitem>
			    <para>http://site7/</para>
			  </listitem>

			  <listitem>
			    <para>http://site8/directory-one/</para>
			  </listitem>

			  <listitem>
			    <para><varname>MASTER_SITE_BACKUP</varname></para>
			  </listitem>
			</itemizedlist>

			<para>下载。</para>
		      </listitem>

		      <listitem>
			<para><filename>file5</filename> 将从</para>

			<itemizedlist>
			  <listitem>
			    <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			  </listitem>

			  <listitem>
			    <para><varname>MASTER_SITE_BACKUP</varname></para>
			  </listitem>
			</itemizedlist>

			<para>下载。</para>
		      </listitem>

		      <listitem>
			<para><filename>file6</filename> 将从</para>

			<itemizedlist>
			  <listitem>
			    <para><varname>MASTER_SITE_OVERRIDE</varname></para>
			  </listitem>

			  <listitem>
			    <para>http://site8/</para>
			  </listitem>

			  <listitem>
			    <para><varname>MASTER_SITE_BACKUP</varname></para>
			  </listitem>
			</itemizedlist>

			<para>下载。</para>
		      </listitem>
		    </itemizedlist>
		  </example>
		</listitem>
	      </orderedlist>
	    </listitem>

	    <listitem>
	      <para>如何对来自
		<filename>bsd.sites.mk</filename> 的特殊变量， 例如
		<varname>MASTER_SITE_SOURCEFORGE</varname> 进行分组？</para>

	      <para>参见 <xref linkend="ports-master-sites-n-example-detailed-use-master-site-sourceforge"/>。</para>

	      <example xml:id="ports-master-sites-n-example-detailed-use-master-site-sourceforge">
		<title><varname>MASTER_SITE_SOURCEFORGE</varname> 中
		  <literal>MASTER_SITES:n</literal> 的详细用法</title>

		<programlisting>MASTER_SITES=   http://site1/ ${MASTER_SITE_SOURCEFORGE:S/$/:sourceforge,TEST/}
DISTFILES=      something.tar.gz:sourceforge</programlisting>
	      </example>

	      <para><filename>something.tar.gz</filename> 将从所有
		<varname>MASTER_SITE_SOURCEFORGE</varname> 中的站点下载。</para>
	    </listitem>

	    <listitem>
	      <para>如何与 <varname>PATCH*</varname> 变量连用？</para>

	      <para>前面的例子介绍的都是
		<varname>MASTER*</varname> 变量，
		但对于 <varname>PATCH*</varname> 也是完全一样的，
		它们在 <xref linkend="ports-master-sites-n-example-detailed-use-patch-sites"/>
		有所介绍。</para>

	      <example xml:id="ports-master-sites-n-example-detailed-use-patch-sites">
		<title>简化的 <varname>PATCH_SITES</varname> 中的
		  <literal>MASTER_SITES:n</literal> 用法。</title>

		<programlisting>PATCH_SITES=    http://site1/ http://site2/:test
PATCHFILES=     patch1:test</programlisting>
	      </example>
	    </listitem>
	  </orderedlist>
	</sect3>

	<sect3>
	  <title>会改变 ports 的哪些行为？ 哪些不会？</title>

	  <orderedlist numeration="lowerroman">
	    <listitem>
	      <para>所有普通的 ports 的行为都会保持不变。
		<literal>MASTER_SITES:n</literal> 功能的代码，
		只有在某些元素包含了前述， 特别是 <xref linkend="porting-master-sites-n-group-semantics"/>
		中所提及语法的
		<literal>:n</literal> 后缀时，
		才会启用。</para>
	    </listitem>

	    <listitem xml:id="porting-master-sites-n-what-changes-in-port-targets">
	      <para>不受影响的 port target：
		<buildtarget>checksum</buildtarget>、
		<buildtarget>makesum</buildtarget>、
		<buildtarget>patch</buildtarget>、
		<buildtarget>configure</buildtarget>、
		<buildtarget>build</buildtarget>， 等等。
		显然， <buildtarget>do-fetch</buildtarget>、
		<buildtarget>fetch-list</buildtarget>、
		<buildtarget>master-sites</buildtarget> 和
		<buildtarget>patch-sites</buildtarget> 的行为会发生变化。</para>

	      <itemizedlist>
		<listitem>
		  <para><buildtarget>do-fetch</buildtarget>： 会按照新的、
		    带有组后缀的
		    <varname>DISTFILES</varname> 和
		    <varname>PATCHFILES</varname> 在
		    <varname>MASTER_SITES</varname> 和
		    <varname>PATCH_SITES</varname> 所匹配的组元素， 以及
		    <varname>MASTER_SITE_SUBDIR</varname> 和
		    <varname>PATCH_SITE_SUBDIR</varname> 来进行。
		    请参见 <xref linkend="ports-master-sites-n-example-detailed-use-complete-example-master-sites"/>。</para>
		</listitem>

		<listitem>
		  <para><buildtarget>fetch-list</buildtarget>： 和旧式的
		    <buildtarget>fetch-list</buildtarget> 类似， 但以同
		    <buildtarget>do-fetch</buildtarget> 相似的方式处理组。</para>
		</listitem>

		<listitem>
		  <para><buildtarget>master-sites</buildtarget> 和
		    <buildtarget>patch-sites</buildtarget>：
		    (与旧版本不兼容) 仅返回组 <literal>DEFAULT</literal>
		    的元素； 事实上， 它们会执行
		    <buildtarget>master-sites-default</buildtarget> 和
		    <buildtarget>patch-sites-default</buildtarget>
		    这两个 target。</para>

		  <para>更进一步， 使用
		    <buildtarget>master-sites-all</buildtarget> 或
		    <buildtarget>patch-sites-all</buildtarget> 这两个
		    target 之一， 要比直接检查
		    <buildtarget>MASTER_SITES</buildtarget> 或
		    <buildtarget>PATCH_SITES</buildtarget> 更好。
		    此外， 未来版本可能不再保证直接检查能够正确工作。
		    请参见 <xref linkend="porting-master-sites-n-new-port-targets-master-sites-all"/>
		    以了解关于这些新 target 的更多技术细节。</para>
		</listitem>

	      </itemizedlist>
	    </listitem>

	    <listitem>
	      <para>port 中的新 target</para>

	      <orderedlist>
		<listitem>
		  <para>一系列
		    <buildtarget>master-sites-<replaceable>n</replaceable></buildtarget>
		    和
		    <buildtarget>patch-sites-<replaceable>n</replaceable></buildtarget>
		    target 可以分别用来列出 <varname>MASTER_SITES</varname> 和
		    <varname>PATCH_SITES</varname> 中的 <replaceable>n</replaceable>
		    组的内容。 例如，
		    <buildtarget>master-sites-DEFAULT</buildtarget> 和
		    <buildtarget>patch-sites-DEFAULT</buildtarget> 都会返回
		    <literal>DEFAULT</literal> 组的内容， 而
		    <buildtarget>master-sites-test</buildtarget> 和
		    <buildtarget>patch-sites-test</buildtarget> 则返回
		    <literal>test</literal> 组的内容， 等等。</para>
		</listitem>

		<listitem xml:id="porting-master-sites-n-new-port-targets-master-sites-all">
		  <para>新增的
		    <buildtarget>master-sites-all</buildtarget> 和
		    <buildtarget>patch-sites-all</buildtarget> 这两个 target，
		    会完成先前
		    <buildtarget>master-sites</buildtarget> 和
		    <buildtarget>patch-sites</buildtarget> 所做的工作。
		    它们会返回所有组的元素， 就像这些元素都属于同一组一样，
		    并且会列出与
		    <varname>MASTER_SITE_BACKUP</varname> 或
		    <varname>MASTER_SITE_OVERRIDE</varname> 中在
		    <varname>DISTFILES</varname> 或
		    <varname>PATCHFILES</varname> 中指定的同样多个； 分别对于
		    <buildtarget>master-sites-all</buildtarget> 和
		    <buildtarget>patch-sites-all</buildtarget>。</para>
		</listitem>
	      </orderedlist>
	    </listitem>
	  </orderedlist>
	</sect3>
      </sect2>

      <sect2>
	<title><varname>DIST_SUBDIR</varname> (独立的源码包子目录)</title>

	<para>避免让您的 port 使
	  <filename>/usr/ports/distfiles</filename> 陷入混乱。
	  如果您的 port 需要下载很多文件， 或者需要下载可能与其它 port
	  的源文件名冲突的文件 (例如，
	  <filename>Makefile</filename>)， 则应将 <varname>DIST_SUBDIR</varname>
	  设置为 port 的名字 (通常可以用 <literal>${PORTNAME}</literal> 或
	  <literal>${PKGNAMEPREFIX}${PORTNAME}</literal>)。 这将把
	  <varname>DISTDIR</varname> 从默认的
	  <filename>/usr/ports/distfiles</filename> 改为
	  <filename>/usr/ports/distfiles/DIST_SUBDIR</filename>，
	  并将与您的 port 有关的文件放到那个目录中。</para>

	<para>此外， 它也会在备份文件主服务器 <filename>ftp.FreeBSD.org</filename>
	  上查找同一子目录下的文件 (直接在您的
	  <varname>Makefile</varname> 中设置 <varname>DISTDIR</varname>
	  则不会有这样的效果， 因此您应使用
	  <varname>DIST_SUBDIR</varname>。)</para>

	<note>
	  <para>这一设置并不影响您在  <filename>Makefile</filename>
	    中定义的 <varname>MASTER_SITES</varname>。</para>
	</note>
      </sect2>

      <sect2>
	<title><varname>ALWAYS_KEEP_DISTFILES</varname> (一直保存源码包)</title>

	<para>如果您的 port 采用的是预编译的包，
	  但却采用了某种要求源代码必须与预编译版本一同提供的授权，
	  例如 GPL， 则应使用 <varname>ALWAYS_KEEP_DISTFILES</varname>
	  来告诉 &os; 联编集群保留一份在 <varname>DISTFILES</varname>
	  中文件的副本。 一般来说这些 port 的用户并不需要这些文件，
	  因此， 只在定义了
	  <varname>PACKAGE_BUILDING</varname> 符的时候，
	  才将源代码包文件加入 <varname>DISTFILES</varname> 是个好主意。
	</para>

	<example xml:id="ports-master-sites-n-example-always-keep-distfiles">
	  <title>如何使用 <varname>ALWAYS_KEEP_DISTFILES</varname>。</title>
	    <programlisting>.if defined(PACKAGE_BUILDING)
DISTFILES+=             <replaceable>foo.tar.gz</replaceable>
ALWAYS_KEEP_DISTFILES=  yes
.endif</programlisting>
	</example>

	<para>当您在 <varname>DISTFILES</varname> 加入其它文件时，
	  请务必确保这些文件也出现在了 <filename>distinfo</filename> 中。
	  此外， 这些额外的文件通常也会展开到
	  <varname>WRKDIR</varname> 中， 对于某些 ports，
	  这可能导致一些不希望的副作用， 因而需要进行特别的处理。</para>
      </sect2>
    </sect1>

      <sect1 xml:id="makefile-maintainer">
	<title><varname>MAINTAINER</varname> (监护人)</title>

	<para>请在此处写上您的电子邮件地址。  <!-- smiley
	  --><emphasis>:-)</emphasis></para>

	<para>需要注意一点， <varname>MAINTAINER</varname>
	  变量的值只能是一个不包括注释部分的电子邮件地址，
	  其格式应为 <literal>user@hostname.domain</literal>。
	  请不要在此处写任何说明性的文字， 例如您的真实姓名 &mdash; 这会给
	  <filename>bsd.port.mk</filename> 带来麻烦。</para>

	<para>监护人有责任保持 port 随时更新， 并确保其能够正确地运行。
	  详细的 port 监护人职责说明， 请参见 <link xlink:href="&url.articles.contributing-ports;/maintain-port.html">
	  port 监护人面临的挑战</link> 一节。</para>

	<para>对于 port 的修改， 应被发给 port 的监护人进行复审，
	  且在 commit 之前需要获得其监护人的同意。
	  假如某一 port 的监护人没有在两周之内 (不包括主要的公共假日)
	  响应来自用户的更新请求， 则可视为监护人超时，
	  在这种情况下可以在没有监护人明确同意的情形下进行更新。
	  如果监护人在多达三个月的时间内没有进行任何响应，
	  则可以认为该监护人不辞而别， 允许对出现此类问题的 port 进行监护人变更。
	  尽管如此， 监护人为 &a.portmgr; 或者 &a.security-officer; 的 port
	  不受此限。 对监护人为这些小组的 port 进行未经许可的 commit 是不允许的。</para>

	<para>我们保留对监护人所提交修正案进行改动的权力， 以便使其更符合现行的 Ports
	  Collection 规范， 而无需提交补丁的人明确批准。 此外， 大规模的基础性修改，
	  也可能使 port 在没有得到监护人同意的情形下进行修改。
	  但这类修改都不应影响 port 本身的功能。</para>

	<para>&a.portmgr; 保留以任何原因收回或绕过任何人监护权的权力，
	  而 &a.security-officer; 则保留以安全原因收回或绕过监护权的权力。</para>
      </sect1>

      <sect1 xml:id="makefile-comment">
	<title><varname>COMMENT</varname> (一句话说明)</title>

	<para>这一变量用于指定 port 的一句话说明。
	  <emphasis>请</emphasis> 勿将 package 的名字 (或软件的版本)
	  放在说明中。 这一说明的第一个字母应大写， 结尾不用句点。
	  下面是一个例子：</para>

	<programlisting>COMMENT=       A cat chasing a mouse all over the screen</programlisting>

	<para><filename>Makefile</filename> 中的 COMMENT 变量应该紧接着 MAINTAINER
	  变量出现。</para>

	<para>请务必将 COMMENT 这行限制在不超过 70 个字符之内，
	  因为这行内容会成为 &man.pkg.info.1;
	  呈现给用户的 port 的一句话简介。</para>
      </sect1>

      <sect1 xml:id="makefile-depend">
	<title>依赖关系</title>

	<para>许多 ports 会依赖其它 port。 这是包括 &os;
	  在内的多数 类-Unix 系统的很方便的功能。
	  这项功能， 可以避免在每个 port 或预编译包中都带上重复的依赖的代码，
	  而可以以依赖关系的方式去共享它们。
	  有七个变量用于帮助您确保所需的文件都存在于用户的机器上。
	  此外， 也提供了用于支持常见情形的依赖关系变量，
	  以及对依赖关系行为的更多控制。</para>

	<sect2>
	  <title><varname>LIB_DEPENDS</varname> (依赖的函数库/共享库)</title>

	  <para>这个变量用于指定 port 所依赖的共享库。 其内容是由一系列
	    <replaceable>lib</replaceable>:<replaceable>dir</replaceable><optional>:target</optional>
	    元组构成的表， 其中 <replaceable>lib</replaceable> 是共享库的名字，
	    而 <replaceable>dir</replaceable> 则是在找不到时应该从哪里联编和安装，
	    最后， <replaceable>target</replaceable> 用于指定在那个目录中调用的
	    target。 例如，
	    <programlisting>LIB_DEPENDS=   jpeg.9:${PORTSDIR}/graphics/jpeg</programlisting>
	    会检测主版本号为 9 的 jpeg 共享库， 如果它不存在，
	    则会进入到您的 ports 目录中的 <filename>graphics/jpeg</filename>
	    子目录， 并联编和安装它。 如果您指定的 <replaceable>target</replaceable>
	    就是 <varname>DEPENDS_TARGET</varname> (默认是
	    <literal>install</literal>)， 则可以略去不写。</para>

	  <note>
	    <para><replaceable>lib</replaceable> 部分是一个正则表达式， 用于在
	      <command>ldconfig -r</command> 的输出中进行查找。 可以使用类似
	      <literal>intl.[5-7]</literal> 和 <literal>intl</literal> 这样的值。
	      前一种模式， 即
	      <literal>intl.[5-7]</literal>， 能够匹配
	      <literal>intl.5</literal>、 <literal>intl.6</literal> 和
	      <literal>intl.7</literal> 中的任意一个。 第二种模式， 即
	      <literal>intl</literal> 则可以匹配任意版本的
	      <literal>intl</literal> 库。</para>
	  </note>

	  <para>依赖关系会被检测两次， 一次是在
	    <buildtarget>extract</buildtarget> target 中， 而另一次则是在
	    <buildtarget>install</buildtarget> target。 另外，
	    依赖关系的名字会放到 package 中， 以便让
	    &man.pkg.add.1; 能够自动地在用户系统上安装所需的未安装的其它
	    package。</para>
	</sect2>

	<sect2>
	  <title><varname>RUN_DEPENDS</varname> (依赖的运行环境)</title>

	  <para>这个变量可以用来指定 port 在运行时所需要的可执行文件，
	    以及资源文件。 它是一系列
	    <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:target</optional>
	    元组的列表， 这里， <replaceable>path</replaceable> 时所需的可执行，
	    或者资源文件的名字， <replaceable>dir</replaceable> 是在无法找到这些文件或目录时，
	    去什么地方完成联编和安装以便获得这些文件； 而
	    <replaceable>target</replaceable> 则用来指定在这个目录中所调用的
	    target 的名字。 假如 <replaceable>path</replaceable> 以斜线
	    (<literal>/</literal>) 开始， 则会当作普通文件，
	    使用 <command>test -e</command> 来测试； 反之，
	    则系统会假定这是一个可执行文件， 并且用 <command>which -s</command>
	    来检测程序是否存在于搜索路径中。</para>

	  <para>例如，</para>

	    <programlisting>RUN_DEPENDS=   ${LOCALBASE}/etc/innd:${PORTSDIR}/news/inn \
	       xmlcatmgr:${PORTSDIR}/textproc/xmlcatmgr</programlisting>

	  <para>将检查文件， 或者目录
	    <filename>/usr/local/etc/innd</filename> 是否存在，
	    如果找不到， 则将从 port 目录的
	    <filename>news/inn</filename> 子目录加以安装。
	    系统也会检查是否能够在搜索路径中找到名为 <command>xmlcatmgr</command>
	    的文件， 如果找不到的话， 则会进入 ports 目录中的
	    <filename>textproc/xmlcatmgr</filename> 子目录，
	    并进行联编和安装的操作。</para>

	  <note>
	    <para>这种情况下， <command>innd</command> 实际上是一个可执行文件；
	      如果可执行文件不会出现在搜索路径中， 您就需要指定完整路径了。</para>
	  </note>

	  <note>
	    <para>ports 联编集群上官方的搜索 <envar>PATH</envar> 是</para>

	    <programlisting>/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/X11R6/bin</programlisting>
	  </note>

	  <para>这个依赖关系会在
	    <buildtarget>install</buildtarget> target 的过程中进行检查。
	    此外， 依赖关系的名字会被放到 package 中， 以便
	    &man.pkg.add.1; 能够在用户的系统中尚未安装相关软件时自动地安装那些 package。
	    如果您希望指定一个的 <replaceable>target</replaceable>
	    和默认的 <varname>DEPENDS_TARGET</varname> 相同，
	    则可以略去不写。</para>

	  <para>一种比较常见的情形是
	    <varname>RUN_DEPENDS</varname> 和
	    <varname>BUILD_DEPENDS</varname> 完全一样，
	    这种情况在移植的软件是采用脚本语言书写，
	    或联编环境与运行环境需求相同时尤其普遍。
	    这种情况可以用下面简单明了的方式直接将其中一个变量赋值给另一个变量：</para>

	  <programlisting>RUN_DEPENDS= ${BUILD_DEPENDS}</programlisting>

	  <para>不过， 这种赋值有可能会令运行环境被某些没有在
	    port 原本的 <varname>BUILD_DEPENDS</varname> 明确定义的依赖关系污染。
	    导致这种情况的原因是 &man.make.1; 计算变量赋值时默认采用的是延后计算 (lazy evaluation)。
	    例如， 如果在 <filename>Makefile</filename> 中使用了
	    <varname>USE_<replaceable>*</replaceable></varname> 变量，
	    这些变量就会由 <filename>ports/Mk/bsd.*.mk</filename> 处理，
	    并填写与之对应的联编依赖关系。 例如， <literal>USE_GMAKE=yes</literal>
	    会把 <package>devel/gmake</package> 加入到
	    <varname>BUILD_DEPENDS</varname>。
	    如果希望避免这些附加的依赖关系污染 <varname>RUN_DEPENDS</varname>，
	    在使用赋值的时候就需要小心考虑这类扩展的情况，
	    例如， 可以在赋值展开之前复制变量的值：</para>

	    <programlisting>RUN_DEPENDS:=  ${BUILD_DEPENDS}</programlisting>
	</sect2>

	<sect2>
	  <title><varname>BUILD_DEPENDS</varname> (依赖的联编环境)</title>

	  <para>此变量用于指定用来联编 port 的可执行文件或资源文件。
	    与 <varname>RUN_DEPENDS</varname> 类似， 它是一个
	    <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:target</optional>
	    元组的列表。 例如， <programlisting> BUILD_DEPENDS=
	      unzip:${PORTSDIR}/archivers/unzip</programlisting> 将检测名为
	    <command>unzip</command> 的可执行文件是否存在， 如果不存在，
	    则会进入到您的 ports 目录中的 <filename>archivers/unzip</filename>
	    并完成联编和安装工作。</para>

	  <note>
	    <para>这里的 <quote>build</quote> 表示从解压缩到编译的全部过程。
	      依赖关系是在 <buildtarget>extract</buildtarget> target 的过程中检测的。
	      假如您要指定的  <replaceable>target</replaceable> 和
	      <varname>DEPENDS_TARGET</varname> 相同， 则可以略去不写。</para>
	  </note>
	</sect2>

	<sect2>
	  <title><varname>FETCH_DEPENDS</varname> (依赖的下载环境)</title>

	  <para>这一变量用于指定 port 在下载时所需的可执行文件或资源文件。
	    和前两个类似， 它是一组
	    <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:target</optional>
	    元组。 例如， <programlisting> FETCH_DEPENDS=
	      ncftp2:${PORTSDIR}/net/ncftp2</programlisting>
	    将检测名为 <command>ncftp2</command> 的可执行文件是否存在，
	    如果找不到， 则将进入到您 ports 目录中的
	    <filename>net/ncftp2</filename> 子目录并加以联编和安装。</para>

	  <para>这个依赖关系是在
	    <buildtarget>fetch</buildtarget> target 过程中检查的。
	    如果与 <varname>DEPENDS_TARGET</varname> 相同，
	    则可以省略 <replaceable>target</replaceable> 部分。</para>
	</sect2>

	<sect2>
	  <title><varname>EXTRACT_DEPENDS</varname> (依赖的解压缩环境)</title>

	  <para>此变量用于指定 port 在解压缩时所需的可执行文件或其它资源文件。
	    和前一个变量类似， 它是一系列
	    <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:target</optional>
	    元组的列表。 例如， <programlisting>EXTRACT_DEPENDS=
	      unzip:${PORTSDIR}/archivers/unzip</programlisting> 将检查名为
	    <command>unzip</command> 的可执行文件是否存在， 如果不存在，
	    则会进入到您的 ports 目录中的 <filename>archivers/unzip</filename>
	    子目录， 予以联编和安装。</para>

	  <para>这个依赖关系是在
	    <buildtarget>extract</buildtarget> target 的过程中检查的。 如果与
	    <varname>DEPENDS_TARGET</varname> 相同，
	    则可以略去 <replaceable>target</replaceable> 部分。</para>

	  <note>
	    <para>只有在其它方式都不可用 (默认是 <command>gzip</command>)
	      而且无法通过 <xref linkend="use-vars"/> 所介绍的 <varname>USE_ZIP</varname> 或
	      <varname>USE_BZIP2</varname> 都不能达到需要时，
	      才应使用这个变量。</para>
	  </note>
	</sect2>

	<sect2>
	  <title><varname>PATCH_DEPENDS</varname> (依赖的打补丁环境)</title>

	  <para>这个变量用于指定 port 在进行 patch
	    操作时所需的可执行文件或其它资源文件。 和前一个变量类似， 它是一组
	    <replaceable>path</replaceable>:<replaceable>dir</replaceable><optional>:target</optional>
	    元组的表。 例如， <programlisting> PATCH_DEPENDS=
	      ${NONEXISTENT}:${PORTSDIR}/java/jfc:extract
		</programlisting> 表示进入到您的 ports 目录中的
	    <filename>java/jfc</filename> 子目录， 并将其解压缩。</para>

	  <para>这个依赖关系是在
	    <buildtarget>patch</buildtarget> target 的过程中检查的。
	    <replaceable>target</replaceable> 部分如果和
	    <varname>DEPENDS_TARGET</varname> 相同， 就可略去不写。</para>
	</sect2>

	<sect2 xml:id="use-vars">
	<title><varname>USE_<replaceable>*</replaceable></varname></title>

	<para>提供了一系列变量， 用以封装大量 port 都用到的依赖关系。
	  虽然使用这些变量是可选的， 但它们能显著减少 port 的
	  <filename>Makefile</filename> 复杂性。 这些变量的共同特征在于，
	  它们的名字都是 <varname>USE_<replaceable>*</replaceable></varname>
	  这样的形式。 这些变量的使用， 应严格限制于 port 的
	  <filename>Makefile</filename> 以及
	  <filename>ports/Mk/bsd.*.mk</filename>，
	  而绝不应用于表达用户能够设置的选项 &mdash; 这种情况下应采用
	  <varname>WITH_<replaceable>*</replaceable></varname> 和
	  <varname>WITHOUT_<replaceable>*</replaceable></varname>
	  这样的变量。</para>

	<note>
	  <para>在 <emphasis>任何</emphasis> 情况下，
	    都不应在 <filename>/etc/make.conf</filename> 中配置任何
	    <varname>USE_<replaceable>*</replaceable></varname>。
	    例如， 设置 <programlisting>USE_GCC=3.4</programlisting>
	    将导致每个 port 都依赖 gcc34， 甚至包括
	    gcc34 本身！</para>
	</note>

	<table frame="none">
	  <title>常用的 <varname>USE_<replaceable>*</replaceable></varname>
	    变量</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>变量</entry>

		<entry>含义</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>USE_BZIP2</varname></entry>

		<entry>此 port 的源码包是使用
		  <command>bzip2</command> 压缩的。</entry>
	      </row>

	      <row>
		<entry><varname>USE_ZIP</varname></entry>

		<entry>此 port 的源码包是用
		  <command>zip</command> 压缩的。</entry>
	      </row>

	      <row>
		<entry><varname>USE_BISON</varname></entry>

		<entry>此 port 在联编时使用 <command>bison</command>。</entry>
	      </row>

	      <row>
		<entry><varname>USE_CDRTOOLS</varname></entry>

		<entry>此 port 需要使用 <application>cdrecord</application>，
		  根据用户的喜好， 可能是 <package>sysutils/cdrtools</package> 或 <package>sysutils/cdrtools-cjk</package>。</entry>
	      </row>

	      <row>
		<entry><varname>USE_GCC</varname></entry>

		<entry>此 port 需要使用某一特定版本的
		  <command>gcc</command> 才能完成编译。
		  可以使用类似 <literal>3.4</literal> 这样的值来精确指定版本。
		  如果希望使用不低于某一版本的编译器， 则可以用
		  <literal>3.4+</literal> 这样的形式。 如果与所希望的版本吻合，
		  则将使用基本系统中所提供的 <command>gcc</command>， 反之，
		  系统会从 ports 中安装所希望版本的 <command>gcc</command>，
		  并调整 <varname>CC</varname> 以及
		  <varname>CXX</varname> 变量的设置。</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	  <para>与 <application>gmake</application>
	    和 <filename>configure</filename> 脚本有关的变量在
	    <xref linkend="building"/> 中进行了介绍， 而
	    <application>autoconf</application>、
	    <application>automake</application> 以及
	    <application>libtool</application> 的介绍则可以在
	    <xref linkend="using-autotools"/> 找到。 <xref linkend="using-perl"/>
	    介绍了与 <application>Perl</application> 有关的的变量。
	    <xref linkend="using-x11"/> 中列出了关于 X11 的变量。 关于 GNOME 的变量在 <xref linkend="using-gnome"/>， 而关于 KDE 的则在 <xref linkend="using-kde"/>。 <xref linkend="using-java"/> 讲述了和 Java 有关的变量， 而 <xref linkend="using-php"/> 则包含了关于
	    <application>Apache</application>、 <application>PHP</application>
	    以及 PEAR 的介绍性信息。 关于 <application>Python</application>，
	    在 <xref linkend="using-python"/> 进行了讨论， 而关于
	    <application>Ruby</application> 的介绍，
	    则可以在 <xref linkend="using-ruby"/> 中找到。
	    <xref linkend="using-sdl"/> 提供了用于
	    <application>SDL</application> 应用程序的变量介绍， 最后，
	    <xref linkend="using-xfce"/> 包含了关于
	    <application>Xfce</application> 的信息。</para>

	</sect2>

	<sect2>
	  <title>在依赖关系中指定最低版本</title>

	  <para>在依赖某个其他 port 时， 可以采用下面的句法， 通过除
	    <varname>LIB_DEPENDS</varname> 之外的
	    <varname>*_DEPENDS</varname> 变量来指定最低版本：</para>

	  <programlisting>p5-Spiffy&gt;=0.26:${PORTSDIR}/devel/p5-Spiffy</programlisting>

	  <para>第一个字段指明了所依赖 package 的名字，
	    用以与 package 数据库中的某项匹配， 然后是比较算符，
	    以及 package 的版本号。 前面的例子中，
	    如果系统中安装了 p5-Spiffy-0.26 则认为满足了依赖条件。</para>
	</sect2>

	<sect2>
	  <title>关于依赖关系的补充说明</title>

	  <para>如前面所提到的那样， 在需要某一依赖的 port 时，
	    将调用 <buildtarget>DEPENDS_TARGET</buildtarget> 所指定的 target。
	    这一变量的默认值是 <literal>install</literal>。 这不是一个用户变量，
	    它不应在 port 的
	    <filename>Makefile</filename> 中予以定义。 如果您的 port 需要使用特殊的
	    target 来处理依赖关系， 应使用 <varname>*_DEPENDS</varname> 的
	    <literal>:target</literal> 部分， 而不是重定义
	    <varname>DEPENDS_TARGET</varname> 来完成。</para>

	  <para>当您输入 <command>make clean</command> 时， 其依赖的 port
	    也会自动进行清理。 如果您不希望如此， 应定义环境变量
	    <varname>NOCLEANDEPENDS</varname>。 如果 port
	    依赖一些重新联编需要花费很长时间的 port 时， 例如 KDE， GNOME
	    或 Mozilla 时， 这一方法会非常有用。</para>

	  <para>要无条件地依赖某个 port， 可以使用 <varname>${NONEXISTENT}</varname>
	    作为 <varname>BUILD_DEPENDS</varname> 或
	    <varname>RUN_DEPENDS</varname> 的第一部分。 只有在您需要使用其它
	    port 提供的源代码时才应这样做。 通常也可以通过这样指定来缩短编译所需的时间。
	    例如

	    <programlisting>BUILD_DEPENDS=   ${NONEXISTENT}:${PORTSDIR}/graphics/jpeg:extract</programlisting>

	    表示依赖 <literal>jpeg</literal> port 并将其解压缩。</para>
	</sect2>

      <sect2>
	<title>循环的依赖关系是致命的</title>

	<important>
	  <para>不要在 ports tree 中引入任何循环依赖关系!</para>
	</important>

	<para>ports 联编技术不能够容忍循环依赖关系。 如果您引入了这样的关系，
	  就一定会有人安装的 FreeBSD 会因此而损坏， 而且这种现象会越来越多。
	  这些情形很难检测； 如果有疑虑， 在进行这样的修改之前， 务必执行：
	  <command>cd /usr/ports; make index</command>。 这个过程在旧的机器上会很慢，
	  但能够让大量的用户 &mdash; 也包括您自己 &mdash;
	  拯救于由这种问题所造成的困惑之中。</para>
      </sect2>

      </sect1>

    <sect1 xml:id="makefile-masterdir">
      <title><varname>MASTERDIR</varname> (主 port 所在的目录)</title>

      <para>如果 port 需要依某些变量的设置 (举例来说， 分辨率或纸型)
	来联编略有不同的预编译包， 则可以为每一个这样的包建立不同的目录，
	这样可以让用户更容易地看到他们想要安装的版本， 但又能在这些 port
	之间共用尽可能多的文件。 一般情况下， 如果运用得当， 除主目录之外都只需要很短的
	<filename>Makefile</filename>。 这些 <filename>Makefile</filename> 中，
	可以用 <varname>MASTERDIR</varname> 来指定其它文件所在的目录。
	另外， 还应使用一个变量作为
	<link linkend="porting-pkgname"><varname>PKGNAMESUFFIX</varname></link>
	的一部分， 以便为不同的包给出不同的命名。</para>

      <para>用例子来阐述这些会更为明晰。 以下是
	<filename>japanese/xdvi300/Makefile</filename> 的部分代码：</para>

      <programlisting>PORTNAME=       xdvi
PORTVERSION=    17
PKGNAMEPREFIX=  ja-
PKGNAMESUFFIX=  ${RESOLUTION}
 :
# default
RESOLUTION?=   300
.if ${RESOLUTION} != 118 &amp;&amp; ${RESOLUTION} != 240 &amp;&amp; \
       ${RESOLUTION} != 300 &amp;&amp; ${RESOLUTION} != 400
       @${ECHO_MSG} "Error: invalid value for RESOLUTION: \"${RESOLUTION}\""
       @${ECHO_MSG} "Possible values are: 118, 240, 300 (default) and 400."
       @${FALSE}
.endif</programlisting>

      <para><package>japanese/xdvi300</package> 也提供了全部常规的补丁，
	以及打包用到的文件等等内容。 如果您在那里输入 <command>make</command>，
	它将使用默认的分辨率值 (300) 并正常地联编 port。</para>

      <para>对于其它分辨率而言， 以下是 <emphasis>完整的</emphasis>
	<filename>xdvi118/Makefile</filename>：</para>

      <programlisting>RESOLUTION=     118
MASTERDIR=      ${.CURDIR}/../xdvi300

.include "${MASTERDIR}/Makefile"</programlisting>

      <para>(<filename>xdvi240/Makefile</filename> 和
	<filename>xdvi400/Makefile</filename> 是相似的)。
	<varname>MASTERDIR</varname> 定义会告诉
	<filename>bsd.port.mk</filename> 常规的目录，
	例如 <varname>FILESDIR</varname> 以及
	<varname>SCRIPTDIR</varname> 应在
	<filename>xdvi300</filename> 中查找。 <literal>RESOLUTION=118</literal>
	这行将覆盖在 <filename>xdvi300/Makefile</filename> 中所作的
	<literal>RESOLUTION=300</literal> 设置， 从而 port
	将以分辨率为 118 的设置来联编。</para>
    </sect1>

    <sect1 xml:id="makefile-manpages">
      <title>联机手册</title>

      <para><varname>MAN[1-9LN]</varname> 这些变量，
	会自动地将联机手册加到 <filename>pkg-plist</filename> (这也意味着
	<emphasis>不能</emphasis> 在
	<filename>pkg-plist</filename> 中列出联机手册 &mdash; 参见 <link linkend="plist-sub">PLIST 的生成</link> 来了解更多细节)。 此外，
	这也会让安装阶段自动地根据在 <filename>/etc/make.conf</filename>
	中所作的 <varname>NO_MANCOMPRESS</varname>
	设置来自动对联机手册文件执行压缩或解压缩操作。</para>

      <para>如果 port 尝试通过使用符号连接或硬连接将联机手册安装为多个名字，
	就必须使用 <varname>MLINKS</varname> 变量来予以明示。
	由 port 创建的连接， 将由 <filename>bsd.port.mk</filename>
	删除和重建， 以确认它们指向了正确的文件。 任何在 MLINKS 中列出的文件都不应在
	<filename>pkg-plist</filename> 中再出现。</para>

      <para>要指定是否在安装时对联机手册进行压缩，
	可以使用 <varname>MANCOMPRESSED</varname> 变量。
	这一变量可以取三种值， <literal>yes</literal>、 <literal>no</literal> 和
	<literal>maybe</literal> 之一。 <literal>yes</literal>
	表示联机手册已经以压缩的形式安装， <literal>no</literal> 表示还没有，
	而 <literal>maybe</literal> 则表示所安装的软件会尊重
	<varname>NO_MANCOMPRESS</varname> 的设置值， 因此
	<filename>bsd.port.mk</filename> 不需要特别做什么事情。</para>

      <para>如果设置了 <varname>USE_IMAKE</varname> 而未定义
	<varname>NO_INSTALL_MANPAGES</varname>，
	<varname>MANCOMPRESSED</varname> 会自动设为
	<literal>yes</literal>， 反之则是
	<literal>no</literal>。 除非默认值不合适，
	否则就不需要在 port 中明确地加以改变。</para>

      <para>如果 port 将联机手册放到了
	<varname>PREFIX</varname> 之外的其它目录， 则应使用
	<varname>MANPREFIX</varname> 来加以设置。 此外，
	如果只有某些部分的联机手册会安装到不标准的位置， 例如某些 <literal>perl</literal>
	模块的 port， 还可以使用
	<varname>MAN<replaceable>sect</replaceable>PREFIX</varname> (此处
	<replaceable>sect</replaceable> 是 <literal>1-9</literal>、
	<literal>L</literal> 或 <literal>N</literal> 之一) 来指定。</para>

      <para>如果您的联机手册需要装入专用于某一语言专用的子目录，
	需要将 <varname>MANLANG</varname> 设为那种语言的名字。
	此变量的默认值是 <literal>""</literal> (也就是只有英语)。</para>

      <para>下面是一个综合的例子。</para>

      <programlisting>MAN1=          foo.1
MAN3=          bar.3
MAN4=          baz.4
MLINKS=        foo.1 alt-name.8
MANLANG=       "" ja
MAN3PREFIX=    ${PREFIX}/share/foobar
MANCOMPRESSED= yes</programlisting>

      <para>这表示 port 会安装六个文件；</para>

	  <programlisting>${MANPREFIX}/man/man1/foo.1.gz
${MANPREFIX}/man/ja/man1/foo.1.gz
${PREFIX}/share/foobar/man/man3/bar.3.gz
${PREFIX}/share/foobar/man/ja/man3/bar.3.gz
${MANPREFIX}/man/man4/baz.4.gz
${MANPREFIX}/man/ja/man4/baz.4.gz</programlisting>

      <para>此外， <filename>${MANPREFIX}/man/man8/alt-name.8.gz</filename>
	可能会通过您的 port 安装， 也可能不会。 无论如何，
	都会创建一个符号连接， 把 foo(1) 和
	alt-name(8) 联机手册连起来。</para>

      <para>假如只有部分联机手册是翻译过的，
	则可以使用一些根据 <varname>MANLANG</varname> 内容动态生成的变量：</para>

      <programlisting>MANLANG=       "" de ja
MAN1=          foo.1
MAN1_EN=       bar.1
MAN3_DE=       baz.3</programlisting>

      <para>这相当于下列文件：</para>

      <programlisting>${MANPREFIX}/man/man1/foo.1.gz
${MANPREFIX}/man/de/man1/foo.1.gz
${MANPREFIX}/man/ja/man1/foo.1.gz
${MANPREFIX}/man/man1/bar.1.gz
${MANPREFIX}/man/de/man3/baz.3.gz</programlisting>
    </sect1>

    <sect1 xml:id="makefile-info">
      <title>Info 文件</title>

      <para>如果软件包需要安装 GNU info 文件，
	则需要在 <varname>INFO</varname> 变量中一一列出 (不需要指定
	<literal>.info</literal> 后缀)。 系统假定这些文件均会安装到
	<filename>PREFIX/INFO_PATH</filename> 目录中。
	如果软件包有需要， 也可以通过修改 <varname>INFO_PATH</varname> 来指定不同的位置。
	不过， 并不推荐这样做。 所有列出的项目均是相对于
	<filename>PREFIX/INFO_PATH</filename> 的文件路径。
	例如， <package>lang/gcc34</package> 表示将
	info 文件安装到
	<filename>PREFIX/INFO_PATH/gcc34</filename>，
	因此 <varname>INFO</varname> 应写成类似这样：
	<programlisting>INFO= gcc34/cpp gcc34/cppinternals gcc34/g77 ...
</programlisting>
	 这样安装/卸载代码就会自动地在注册包之前将它们加入到临时的
	<filename>pkg-plist</filename> 中了。</para>
    </sect1>

      <sect1 xml:id="makefile-options">
      <title>Makefile 选项</title>

      <para>某些大型应用程序可以在联编时使用一系列配置选项，
	用以在系统中已经安装了某些库或应用程序时增加一些功能。
	例如， 选择某种自然 (人类的) 语言， GUI 或命令行界面，
	由于并不是所有的用户都希望使用这些库或者应用程序， port
	系统提供了一组方便的机制， 来让 port 的作者控制联编时的配置。
	支持这些特性可以让用户体验更好， 并达到事半功倍的效果。</para>

      <sect2>
          <title>开关 (Knobs)</title>

	<sect3>
	  <title><varname>WITH_<replaceable>*</replaceable></varname> 和
	    <varname>WITHOUT_<replaceable>*</replaceable></varname></title>

	  <para>这些变量是为系统管理员准备的。 许多这样的变量被标准化并置于
	    <link xlink:href="http://www.freebsd.org/cgi/cvsweb.cgi/ports/KNOBS?rev=HEAD&amp;content-type=text/x-cvsweb-markup"><filename>ports/KNOBS</filename></link>
	    文件。</para>

          <para>在创建一个 port 的时候，不要使用某个应用程序专有的 knob
            名称，比如对于 Avahi 这个 port，应该用
	    <varname>WITHOUT_MDNS</varname> 而不是
	    <varname>WITHOUT_AVAHI_MDNS</varname>。</para>

	  <note>
	    <para>您不应假定每一个
	      <varname>WITH_<replaceable>*</replaceable></varname>
	      都会有对应的
	      <varname>WITHOUT_<replaceable>*</replaceable></varname>
	      变量， 反之亦然。 一般而言， 会使用默认值。</para>
	  </note>

	  <note>
	    <para>除非另有说明， 这些变量都是测试是否定义，
	      而不是它们设置了 <literal>YES</literal> 或
	      <literal>NO</literal>。</para>
	  </note>

	  <table frame="none">
	    <title>常见的 <varname>WITH_<replaceable>*</replaceable></varname>
	      和 <varname>WITHOUT_<replaceable>*</replaceable></varname>
	      变量</title>

	    <tgroup cols="2">
	      <thead>
	        <row>
		  <entry>变量</entry>

		  <entry>意义</entry>
	        </row>
	      </thead>

	      <tbody>
	        <row xml:id="knobs-without-nls">
		  <entry><varname>WITHOUT_NLS</varname></entry>

		  <entry>表示不需要国际化支持， 这可以节省编译所消耗的时间。
		    默认情况下， 会启用国际化支持。</entry>
	        </row>

	        <row>
		  <entry><varname>WITH_OPENSSL_BASE</varname></entry>

		  <entry>使用基本系统中的 OpenSSL 版本。</entry>
	        </row>

	        <row>
		  <entry><varname>WITH_OPENSSL_PORT</varname></entry>

                  <entry>从 <package>security/openssl</package>
                    安装 OpenSSL，即使基本系统中的版本是最新的。</entry>
	        </row>

	        <row>
		  <entry><varname>WITHOUT_X11</varname></entry>

		  <entry>如果 port 能够在是否包含
		    X 支持的情况下分别联编， 则一般情况应该默认以包含
		    X 支持的配置来联编。 如果定义了这一变量，
		    则应联编不包含 X 支持的版本。</entry>
	        </row>
	      </tbody>
	    </tgroup>
	  </table>

	</sect3>

	<sect3>
	  <title>开关 (knob) 的命名</title>
	    <para>我们建议 port 的开发人员使用相似的开关， 以便最终用户使用，
	      并减少开关名称的总数。 最为常用的开关名字可以在
	      <link xlink:href="http://www.freebsd.org/cgi/cvsweb.cgi/ports/KNOBS?rev=HEAD&amp;content-type=text/x-cvsweb-markup">KNOBS</link>
	      文件中找到。</para>

	    <para>开关的名字应反映其功能。 如果 port 的 <varname>PORTNAME</varname>
	      包括 lib- 前缀， 则开关名中应删去 lib- 前缀。</para>

	</sect3>
      </sect2>

      <sect2>
	<title><varname>OPTIONS</varname> (菜单式可选项)</title>

	<sect3>
	  <title>背景</title>
	    <para><varname>OPTIONS</varname> 将为正在安装 port
	      的用户提供一个包含可用选项的对话框，
	      并将用户的选择保存到 <filename>/var/db/ports/portname/options</filename> 中。
	      下次重新联编 port 时， 这些选项将被再次使用。
	      这样一来， 就不需要劳神去记忆您之前联编 port 时的那几十个
	      <varname>WITH_<replaceable>*</replaceable></varname> 和
	      <varname>WITHOUT_<replaceable>*</replaceable></varname>选项了！</para>

	    <para>当用户运行 <command>make config</command> (或首次运行
	      <command>make build</command>) 时， 框架会首先检查
	      <filename>/var/db/ports/portname/options</filename>。
	      如果这个文件不存在， 则它会使用
	      <varname>OPTIONS</varname> 的值来生成一个可以启用或禁用各个选项的对话框。
	      随后， 用户的选择将保存到
	      <filename>options</filename> 文件中，
	      并被用于联编 port。</para>

	    <para>如果新版本的 port 新增了
	      <varname>OPTIONS</varname>， 则系统会再次给出对话框，
	      并根据先前的 <varname>OPTIONS</varname>
	      配置预设先前存在的配置。</para>

	    <para>使用 <command>make showconfig</command> 可以查看保存的配置。
	      此外， <command>make rmconfig</command> 可以删除已经保存的配置。</para>
	</sect3>

	<sect3>
	  <title>语法</title>
	    <para><varname>OPTIONS</varname> 变量的语法是：

<programlisting>OPTIONS=	OPTION	"说明性文字" 默认值 ...
</programlisting>

	      默认值必须是 <literal>ON</literal> 和
	      <literal>OFF</literal> 之一。 这种三元组可以使用多次。</para>

	    <para>定义 <varname>OPTIONS</varname> 变量的值，
	      必须在引入 <filename>bsd.port.options.mk</filename> 之前进行。
	      而 <varname>WITH_*</varname> 和 <varname>WITHOUT_*</varname>
	      变量则只能在引入了
	      <filename>bsd.port.options.mk</filename> 之后才可以进行检测。 使用
	      <filename>bsd.port.pre.mk</filename> 也可以达到同样的目的，
	      在系统开始提供 <filename>bsd.port.options.mk</filename> 之前的许多
	      port 都在使用这种用法。 不过， 请注意
	      <filename>bsd.port.pre.mk</filename> 会要求某些变量已经进行过定义， 如
	      <varname>USE_*</varname> 等。</para>

	  <example xml:id="ports-options-simple-use">
	    <title>简单的 <varname>OPTIONS</varname> 用法</title>
	    <para><programlisting>OPTIONS=      FOO "启用 foo 选项" On \
              BAR "支持 bar 功能" Off

.include &lt;bsd.port.options.mk&gt;

.if defined(WITHOUT_FOO)
CONFIGURE_ARGS+=	--without-foo
.else
CONFIGURE_ARGS+=	--with-foo
.endif

.if defined(WITH_BAR)
RUN_DEPENDS+=	bar:${PORTSDIR}/bar/bar
.endif

.include &lt;bsd.port.mk&gt;</programlisting></para>
	  </example>

	  <example xml:id="ports-options-old-style-use">
	    <title>Old style use of <varname>OPTIONS</varname></title>
	    <para><programlisting>OPTIONS=      FOO "Enable option foo" On

.include &lt;bsd.port.pre.mk&gt;

.if defined(WITHOUT_FOO)
CONFIGURE_ARGS+=	--without-foo
.else
CONFIGURE_ARGS+=	--with-foo
.endif

.include &lt;bsd.port.post.mk&gt;</programlisting></para>
	  </example>
	</sect3>
      </sect2>

      <sect2>
	<title>自动激活的特性</title>

	<para>在使用 GNU configure 脚本时， 一定要小心有些特性会由其自动检测而激活。
	  您应通过明确地指定相应的
	  <literal>--without-xxx</literal> 或 <literal>--disable-xxx</literal>
	  参数到 <varname>CONFIGURE_ARGS</varname> 来禁用不希望的特性。</para>

	<example>
	  <title>处理选项时的错误做法</title>
	  <programlisting>.if defined(WITH_FOO)
LIB_DEPENDS+=		foo.0:${PORTSDIR}/devel/foo
CONFIGURE_ARGS+=	--enable-foo
.endif</programlisting>
	</example>

	<para>在前面的例子中， 假设系统中已经安装了 libfoo 库。 用户可能并不希望应用程序使用 libfoo，
	  因此他在 <literal>make config</literal> 对话框中关掉了这个选项。
	  但是， 应用程序的 configure 脚本检测到了系统中存在这个库，
	  并将其加入到了最终可执行文件支持的功能中。 现在， 如果用户决定从系统中卸载 libfoo 时，
	  ports 系统就无法保护这个应用程序免遭破坏了 (因为没有记录 libfoo 的依赖关系)。</para>

	<example>
	  <title>处理选项时的正确做法</title>
	  <programlisting>.if defined(WITH_FOO)
LIB_DEPENDS+=		foo.0:${PORTSDIR}/devel/foo
CONFIGURE_ARGS+=	--enable-foo
.else
CONFIGURE_ARGS+=	--disable-foo
.endif</programlisting>
	</example>

	<para>在第二个例子中， libfoo 库被明确禁用。 即使系统中已经安装了这个库，
	  configure 脚本也不会启用相应的功能了。</para>
      </sect2>

    </sect1>

    <sect1 xml:id="makefile-wrkdir">
      <title>指定工作临时目录</title>

      <para>每个 port 都会被解压缩到一个工作临时目录中， 这个目录必须是可写的。
	ports 系统默认情况下会将
	<varname>DISTFILES</varname> 解压缩到一个叫做
	<literal>${DISTNAME}</literal> 的目录中。 换言之， 如果设了：</para>

      <programlisting>PORTNAME=      foo
PORTVERSION=   1.0</programlisting>

      <para>则 port 的源码包文件的顶级目录将是
	<filename>foo-1.0</filename>。</para>

      <para>如果这不是所希望的情形， 您可以修改一系列变量的设置。</para>

      <sect2>
	<title><varname>WRKSRC</varname> (开始联编操作的目录名)</title>

	<para>这个变量给出了在应用程序的源代码包解压缩之后所生成的目录的名字。
	  如果我们之前的例子解压缩生成一个叫做 <filename>foo</filename> (而不是
	  <filename>foo-1.0</filename>) 的目录， 您应：</para>

	<programlisting>WRKSRC=      ${WRKDIR}/foo</programlisting>

	<para>或者， 也可能是</para>

	<programlisting>WRKSRC=      ${WRKDIR}/${PORTNAME}</programlisting>
      </sect2>

      <sect2>
	<title><varname>NO_WRKSUBDIR</varname> (不需要临时的联编目录)</title>

	<para>如果 port 完全不需要写入到某个子目录中，
	  您应设置 <varname>NO_WRKSUBDIR</varname> 以明示这一点。</para>

	<programlisting>NO_WRKSUBDIR= yes</programlisting>
      </sect2>
    </sect1>

    <sect1 xml:id="conflicts">
      <title>处理冲突</title>

      <para>针对不同的 package 或 port 之间的冲突情形，
	系统提供了不同的变量来协助开发人员进行表达： <varname>CONFLICTS</varname>、
	<varname>CONFLICTS_INSTALL</varname> 和
	<varname>CONFLICTS_BUILD</varname>。</para>

      <note>
	<para>这些用于描述冲突的变量会自动地设置
	  <varname>IGNORE</varname>， 后者的完整介绍，
	  可以在 <xref linkend="dads-noinstall"/> 找到。</para>
      </note>

      <para>在删去相互冲突的 port 时， 建议将 <varname>CONFLICTS</varname>
	保留几个月， 以便让那些不经常更新系统的用户能够看到。</para>

      <sect2>
	<title><varname>CONFLICTS_INSTALL</varname></title>

	<para>如果您的软件包不能与某些软件包同时安装
	  (例如由于安装同样的文件到相同的位置、 运行时不兼容等等)，
	  则应把其它软件包的名字列在
	  <varname>CONFLICTS_INSTALL</varname> 变量中。 此处可以使用 shell
	  通配符， 如 <literal>*</literal> 和 <literal>?</literal>。
	  列出其它软件包的名字时需要遵循它们在
	  <filename>/var/db/pkg</filename> 中出现的样子。 请确保
	  <varname>CONFLICTS_INSTALL</varname> 不会匹配到您正制作的这个预编译包的名字，
	  否则， 使用
	  <varname>FORCE_PKG_REGISTER</varname> 来强制安装就没有办法进行了。
	  对于 CONFLICTS_INSTALL 的检查是在联编过程之后、
	  安装开始之前进行的。</para>
      </sect2>

      <sect2>
	<title><varname>CONFLICTS_BUILD</varname></title>

	<para>如果您的软件包在系统中存在某些其它软件包时不能完成联编，
	  则应把其它软件包的名字列在
	  <varname>CONFLICTS_BUILD</varname> 变量中。 此处可以使用 shell
	  通配符， 如 <literal>*</literal> 和 <literal>?</literal>。
	  列出其它软件包的名字时需要遵循它们在
	  <filename>/var/db/pkg</filename> 中出现的样子。
	  对于 CONFLICTS_BUILD 的检查是在联编过程开始之前进行的。
	  联编时的冲突不会在编译好的包中予以记录。</para>
      </sect2>

      <sect2>
	<title><varname>CONFLICTS</varname></title>

	<para>如果您的 port 在某些其它 port 已经存在的情况下既不能联编，
	  也不能安装， 则应把其它软件包的名字列在
	  <varname>CONFLICTS</varname> 变量中。 此处可以使用 shell
	  通配符， 如 <literal>*</literal> 和 <literal>?</literal>。
	  列出其它软件包的名字时需要遵循它们在
	  <filename>/var/db/pkg</filename> 中出现的样子。 请确保
	  <varname>CONFLICTS</varname> 不会匹配到您正制作的这个预编译包的名字，
	  否则， 使用
	  <varname>FORCE_PKG_REGISTER</varname> 来强制安装就没有办法进行了。
	  对于 CONFLICTS 的检查是在联编过程之后、
	  安装开始之前进行的。</para>
      </sect2>
    </sect1>

    <sect1 xml:id="install">
      <title>安装文件</title>

      <sect2 xml:id="install-macros">
	<title>INSTALL_* 宏</title>

	<para>一定要使用由 <filename>bsd.port.mk</filename>
	  提供的宏， 以确保在您自己的
	  <buildtarget>*-install</buildtarget> target 中能够以正确的属主和权限模式安装文件。</para>

	<itemizedlist>
	  <listitem>
	    <para><varname>INSTALL_PROGRAM</varname> 是安装可执行二进制文件的命令。</para>
	  </listitem>

	  <listitem>
	    <para><varname>INSTALL_SCRIPT</varname> 是安装可执行脚本文件的命令。</para>
	  </listitem>

	  <listitem>
	    <para><varname>INSTALL_LIB</varname> 是安装动态连接库的命令。</para>
          </listitem>

	  <listitem>
	    <para><varname>INSTALL_KLD</varname> 是用于安装可加载式内核模块的命令。
	      在某些平台上， 当对内核模块进行 strip 之后会导致一些问题，
	      因此您应使用这个宏而不是 <varname>INSTALL_PROGRAM</varname> 来安装内核模块。</para>
	  </listitem>

	  <listitem>
	    <para><varname>INSTALL_DATA</varname> 是安装可共享数据的命令。</para>
	  </listitem>

	  <listitem>
	    <para><varname>INSTALL_MAN</varname> 是安装联机手册和其他文档的命令
	      (注意它并不会执行压缩操作)。</para>
	  </listitem>
	</itemizedlist>

	<para>这些宏展开后基本上都是包含适当参数的 <command>install</command> 命令。</para>
      </sect2>

      <sect2 xml:id="install-strip">
	<title>对可执行文件和动态连接库做脱模 (strip) 操作</title>

	<para>除非不得不进行， 否则不要手工对可执行文件作脱模操作。
	  所有文件在安装时都应脱模， 但 <varname>INSTALL_PROGRAM</varname>
	  宏会在安装的同时对其进行脱模 (参见下一节的内容)。
	  <varname>INSTALL_LIB</varname> 宏</para>

	<para>如果您需要对某一文件进行脱模， 但不希望使用
	  <varname>INSTALL_PROGRAM</varname> 及 <varname>INSTALL_LIB</varname> 宏，
	  则应使用 <varname>${STRIP_CMD}</varname> 来处理程序。
	  一般而言这应该在
	  <buildtarget>post-install</buildtarget> target 中进行。 例如：</para>

	<programlisting>post-install:
	${STRIP_CMD} ${PREFIX}/bin/xdl</programlisting>

	<para>可以使用 &man.file.1; 命令来检查所安装的可执行文件是否进行过脱模。
	  如果它没有给出 <literal>not stripped</literal> 的提示，
	  则表示已经做过脱模了。 另外，
	  &man.strip.1; 不会对已经脱模过的文件重新脱模， 它会直接退出的。</para>
      </sect2>

      <sect2 xml:id="install-copytree">
	<title>安装一个目录下的全部文件</title>

	<para>有时， 会有需要安装大量的文件， 并保持其层次结构， 例如，
	  将整个目录结构从 <varname>WRKSRC</varname> 复制到 <varname>PREFIX</varname> 的目标目录。</para>

	<para>针对这种情况， 系统提供了两个宏。 使用这些宏，
	  而不是直接使用 <command>cp</command> 的优势是它们能够确保目标文件的属主和权限正确。 第一个宏，
	  <varname>COPYTREE_BIN</varname> 将所有安装的文件视为可执行文件， 因而适合安装文件到
	  <filename>PREFIX/bin</filename>。
	  第二个宏， <varname>COPYTREE_SHARE</varname>， 则不会设置可执行权限，
	  因此适合于将文件安装到 <filename>PREFIX/share</filename>
	  下。</para>

	<programlisting>post-install:
	${MKDIR} ${EXAMPLESDIR}
	(cd ${WRKSRC}/examples/ &amp;&amp; ${COPYTREE_SHARE} \* ${EXAMPLESDIR})</programlisting>

	<para>这个例子将原作者提供的整个
	  <filename>examples</filename> 目录复制到您 port 指定的安装示范文件的位置。</para>

	<programlisting>post-install:
	${MKDIR} ${DATADIR}/summer
	(cd ${WRKSRC}/temperatures/ &amp;&amp; ${COPYTREE_SHARE} "June July August" ${DATADIR}/summer/)</programlisting>

	<para>这个例子将把夏季的三个月的数据， 复制到
	  <filename>DATADIR</filename> 中的
	  <filename>summer</filename> 子目录。</para>

	<para>经由设置 <varname>COPYTREE_*</varname> 宏的第三个参数，
	  您还可以为 <command>find</command> 指定额外的参数。
	  例如， 如果希望安装除了 Makefile 之外的其他所有文件，
	  可以使用下述命令。</para>

	<programlisting>post-install:
	${MKDIR} ${EXAMPLESDIR}
	(cd ${WRKSRC}/examples/ &amp;&amp; \
		${COPYTREE_SHARE} \* ${EXAMPLESDIR} "! -name Makefile")</programlisting>

	<para>需要注意的是， 这些宏并不能自动将所安装的文件加到
	  <filename>pkg-plist</filename> 中， 您还是需要自行列出它们。</para>

      </sect2>

      <sect2 xml:id="install-documentation">
	<title>安装附加的文档</title>

	<para>如果您的软件包含了标准的联机手册和 info 手册以外的文档，
	  而且您认为它们对用户会有用， 请把这些文档安装到
	  <filename>PREFIX/share/doc</filename> 下。
	  和前面类似， 这也可以在
	  <buildtarget>post-install</buildtarget> target 中完成。</para>

	<para>为您的 port 建立一个新的目录。
	  这个目录的名字应该反映它是属于哪个 port 的。 通常建议使用
	  <varname>PORTNAME</varname>。 不过， 如果您认为不同版本的 port
	  可能会同时安装， 也可以用完整的
	  <varname>PKGNAME</varname>。</para>

	<para>另外， 应该让是否安装取决于变量
	  <varname>NOPORTDOCS</varname> 的设置， 这样用户就能够在
	  <filename>/etc/make.conf</filename> 中禁止安装它。 例如：</para>

	<programlisting>post-install:
.if !defined(NOPORTDOCS)
	${MKDIR} ${DOCSDIR}
	${INSTALL_MAN} ${WRKSRC}/docs/xvdocs.ps ${DOCSDIR}
.endif</programlisting>

	<para>这里是一些便于使用的变量， 以及它们在
	  <filename>Makefile</filename> 中默认的展开方式：</para>

	<itemizedlist>
	  <listitem>
	    <para><varname>DATADIR</varname> 会展开成
	      <filename>PREFIX/share/PORTNAME</filename>。</para>
	  </listitem>

	  <listitem>
	    <para><varname>DATADIR_REL</varname> 会展开成
	      <filename>share/PORTNAME</filename>。</para>
	  </listitem>

	  <listitem>
	    <para><varname>DOCSDIR</varname> 会展开成
	      <filename>PREFIX/share/doc/PORTNAME</filename>。</para>
	  </listitem>

	  <listitem>
	    <para><varname>DOCSDIR_REL</varname> 会展开成
	      <filename>share/doc/PORTNAME</filename>。</para>
	  </listitem>

	  <listitem>
	    <para><varname>EXAMPLESDIR</varname> 会展开成
	      <filename>PREFIX/share/examples/PORTNAME</filename>。</para>
	  </listitem>

	  <listitem>
	    <para><varname>EXAMPLESDIR_REL</varname> 会展开成
	      <filename>share/examples/PORTNAME</filename>。</para>
	  </listitem>
	</itemizedlist>

	<note>
	  <para><varname>NOPORTDOCS</varname> 只控制将要安装到 <varname>DOCSDIR</varname>
	    的那些文档， 而不应影响标准的联机手册以及 info 手册的安装。 安装到
	    <varname>DATADIR</varname> 和 <varname>EXAMPLESDIR</varname>
	    的文件则相应地受 <varname>NOPORTDATA</varname> 和
	    <varname>NOPORTEXAMPLES</varname> 控制。</para>
	</note>

	<para>这些变量也会被导出到 <varname>PLIST_SUB</varname> 中。
	  只要可能， 它们的值就将在那里以相对于
	  <filename>PREFIX</filename> 的路径形式出现。
	  也就是说， <filename>share/doc/PORTNAME</filename>
	  在装箱单中默认情况下会替换掉 <literal>%%DOCSDIR%%</literal>， 等等。
	  (更多的 <filename>pkg-plist</filename> 代换可以在
	  <link linkend="plist-sub">这里</link> 找到。)</para>

	<para>所有非无条件安装的文档文件和目录，
	  都应在 <filename>pkg-plist</filename> 出现， 并且使用
	  <literal>%%PORTDOCS%%</literal> 前缀， 例如：</para>

	<programlisting>%%PORTDOCS%%%%DOCSDIR%%/AUTHORS
%%PORTDOCS%%%%DOCSDIR%%/CONTACT
%%PORTDOCS%%@dirrm %%DOCSDIR%%</programlisting>

	<para>如果不希望在 <filename>pkg-plist</filename> 中逐个列举文档文件， port
	  也可以将 <varname>PORTDOCS</varname> 设置为一组文件及其 shell glob
	  模式， 通过这种方式来加入到最终的装箱单中。
	  这些名字应是相对于 <varname>DOCSDIR</varname> 的。
	  因此， 使用了 <varname>PORTDOCS</varname>，
	  并将文档安装到非标准位置的 port， 应相应地设置
	  <varname>DOCSDIR</varname>。
	  如果有在 <varname>PORTDOCS</varname> 中列出目录，
	  或者这一变量中的 glob 模式匹配到了目录， 则整个子树中的文件和目录，
	  都将被注册到最终的装箱单中。 如果定义了 <varname>NOPORTDOCS</varname>， 则
	  <varname>PORTDOCS</varname> 中定义的文件和目录将不被安装或加入装箱单。
	  是否安装文档到前面所说的 <varname>PORTDOCS</varname> 仍取决于 port 本身。
	  下面是一个典型的使用 <varname>PORTDOCS</varname> 的例子：</para>

        <programlisting>PORTDOCS=       README.* ChangeLog docs/*</programlisting>

	<note>
	  <para>与 <varname>PORTDOCS</varname> 类似，
	  对应于 <varname>DATADIR</varname> 和
	  <varname>EXAMPLESDIR</varname> 的变量分别是 <varname>PORTDATA</varname>
	  和 <varname>PORTEXAMPLES</varname>。</para>

	  <para>您也可以使用 <filename>pkg-message</filename> 这个文件，
	    来在安装时显示一些信息。 参见 <link linkend="porting-message">关于使用
	    <filename>pkg-message</filename> 的这一节</link> 以了解进一步的详情。
	    需要说明的是， 并不需要把 <filename>pkg-message</filename> 加到
	    <filename>pkg-plist</filename> 中。</para>
	</note>
      </sect2>

      <sect2 xml:id="install-subdirs">
	<title>子目录</title>

	<para>尽可能让 port 将它创建的文件， 放置到
	  <varname>PREFIX</varname> 中正确的位置。 一些 port
	  会把各式各样的东西混在一起， 并放到一个同名的目录中， 这是不对的。
	  另外， 许多 port 会把除了可执行文件、 头文件和联机手册之外的所有文件，
	  全都一股脑地放到 <filename>lib</filename> 中， 这在和 BSD
	  配合使用时会有问题。 多数文件，
	  应被放到下列位置之一： <filename>etc</filename>
	  (安装/配置文件)、 <filename>libexec</filename>
	  (由系统内部调用的可执行文件)、 <filename>sbin</filename>
	  (为超级用户/管理员提供的可执行文件)、 <filename>info</filename>
	  (用于 info 浏览器的文档) 或  <filename>share</filename>
	  (平台无关的其它文件)。 请参见 &man.hier.7; 以了解进一步的详情； 针对
	  <filename>/usr</filename> 的那些规则， 同样也适用于
	  <filename>/usr/local</filename>。 例外情况是那些需要和 USENET
	  <quote>news</quote> 打交道的 port， 它们可以选择采用
	  <filename>PREFIX/news</filename>
	  作为文件的目的地。</para>
      </sect2>

    </sect1>

    </chapter>

    <chapter xml:id="special">
      <title>特殊情况</title>

      <para>有一些您在创建port时的特殊情况，我们在这里提一下。</para>

      <sect1 xml:id="porting-shlibs">
	<title>共享库</title>

	<para>如果您的port安装了一个或多个共享库,那么请定义一个
	  <varname>USE_LDCONFIG</varname> make 变量，
	  在<buildtarget>post-install</buildtarget>标记把它注册进共享库
	  缓冲时会调用<filename>bsd.port.mk</filename>去运行
	  <literal>&dollar;{LDCONFIG} -m</literal>来指向新库的安装目录。
	  (通常是 <filename>PREFIX/lib</filename>)
	  同样，您也可以适当的在您的
	  <filename>pke-plist</filename>文件
	  中定义一组<literal>@exec /sbin/ldconfig -m</literal>
	  和<literal>@unexec /sbin/ldconfig -R，</literal>
	  那么用户可以在安装后马上
	  就能使用，并且在卸载软件包后系统也不会认为这些共享库仍然存在。</para>

	<programlisting>USE_LDCONFIG= yes</programlisting>

	<para>如果您需要把共享库安装在缺省的位置之外，
	  可以通过定义 make 变量 <varname>USE_LDCONFIG</varname>
	  来改变默认的安装路径， 它包含安装共享库的目录列表
	  例如： 如果您的共享库安装到
	  <filename>PREFIX/lib/foo</filename> 和
	  <filename>PREFIX/lib/bar</filename>
	  directories目录，您可以在您的
	  <filename>Makefile</filename>中这样设置:</para>

	<programlisting>USE_LDCONFIG= ${PREFIX}/lib/foo ${PREFIX}/lib/bar</programlisting>

	<para>请务必仔细检查， 通常这是完全不必要的，
	  或者可以通过 <literal>-rpath</literal> 或在连接时设置 <envar>LD_RUN_PATH</envar>
	  来避免 (参见 <package>lang/moscow_ml</package>
	  给出的例子)， 或者用一个 shell 封装程序来在执行可执行文件之前设置
	  <varname>LD_LIBRARY_PATH</varname>， 类似
	  <package>www/seamonkey</package> 那样。</para>

	<para>当在 64-位系统上安装 32-位 的函数库时， 请使用
	  <varname>USE_LDCONFIG32</varname>。</para>

	<para>尽量将共享库版本号保持为
	  <filename>libfoo.so.0</filename> 这样的格式。
	  我们的运行环境连接器只会检查主 (第一个) 版本数字。</para>

	<para>如果在更新 port 时升级了其库的主版本号，
	  则其它所有连接了受影响的库的 port 的 <varname>PORTREVISION</varname> 都应递增，
	  以强制它们采用新版本的库重新编译。</para>

      </sect1>

      <sect1 xml:id="porting-restrictions">
	<title>Ports 的发行限制</title>

	<para>众多协议，并且其中的一些致力于
	  限制怎样的应用程序能被打包，
	  是否能用于销售赢利等等。</para>

	<important>
	  <para>
	    做为一名porter您有义务去阅读软件的协议
	    并且确保FreeBSD 项目不必为通过FTP/HTTP
	    或CD-ROM重新发布源码或编译的二进制而解释
	    什么。如果有任何疑问，
	    请联系 &a.ports;。</para>
	</important>

	<para>处于这种情况，就可以设置以下描述
	  的变量。</para>

	<sect2>
	  <title><varname>NO_PACKAGE</varname> (禁止编译结果打包)</title>

	  <para>这个变量表示我们可能不能生成这个应用
	    程序的二进制文件。例如，他的协议不允许
	    二进制文件的再次发行，或者他可能禁止从
	    补丁过的源代码打包的发行。</para>

	  <para>不管怎么样，port的 <varname>DISTFILES</varname> 可以
	    随意的镜像到FTP/HTTP。除非<varname>NO_CDROM</varname>
	    变量也被设置，软件包也可以发行在一张CD-ROM
	    （或类似的媒介上）。</para>

	  <para><varname>NO_PACKAGE</varname>也能用在当二进制包
	    不是非常有用，并且这个应用软件经常要
	    从源代码编译。例如：当这个应用软件在
	    编译的时候要在配置信息中指定特定的硬件
	    代码时，可以设置<varname>NO_PACKAGE</varname>。</para>

	  <para><varname>NO_PACKAGE</varname>应该设置成字符串
	    来描述为什么这个软件
	    不能打包。</para>
	</sect2>

	<sect2>
	  <title><varname>NO_CDROM</varname> (禁止以 CDROM 发行预编译包)</title>

	  <para>这个变量仅仅指出虽然我们允许
	    生成二进制包，但也许我们既不能把这个
	    软件包也不能把port的<varname>DISTFILES</varname>
	    放在光盘（或类似的媒介）上销售。但不管怎么样，
	    二进制包和port的<varname>DISTFILES</varname>
	    可以从FTP/HTTP上获得。</para>


	  <para>如果这个变量和
	    <varname>NO_PACKAGE</varname>一起被设置，
	    那么这个port的<varname>DISTFIELS</varname>
	    将只能从FTP/HTTP上获得。</para>

	  <para><varname>NO_CDROM</varname> 应该被设置成一个字符串
	    来描述为什么这个port不能重新发布在CD-ROM上。
	    例如：如果这个port的协议仅仅是用于<quote>非商业活动</quote>
	    ,那么这个变量就能设置了。</para>
	</sect2>

      <sect2>
	<title><varname>NOFETCHFILES</varname> (不自动抓取指定的文件)</title>

	<para>在 <varname>NOFETCHFILES</varname> 变量中定义的文件，
	  不会自动从
	  <varname>MASTER_SITES</varname> 抓取。 一种典型的用例是，
	  使用来自某个软件供应商提供的 CD-ROM 上的文件。</para>

	<para>用于检查在 <varname>MASTER_SITES</varname> 上是否包含了所需文件的工具，
	  应忽略这些文件， 而不是报告它们不存在。</para>
      </sect2>

      <sect2>
	<title><varname>RESTRICTED</varname> (禁止任何形式的再分发)</title>

	<para>如果应用程序既不允许镜像其 <varname>DISTFILES</varname>，
	  也不允许发布其预编译版本的包， 设置它就可以了。</para>

	<para><varname>NO_CDROM</varname> 或 <varname>NO_PACKAGE</varname>
	  不应与 <varname>RESTRICTED</varname> 同时设置，
	  因为它包含了这些情形。</para>

	<para><varname>RESTRICTED</varname> 应设置为一个说明 port 为何不能发布的串。
	  典型情况可能是由于 port 包含了专有的软件， 因而用户需要自行下载
	  <varname>DISTFILES</varname>， 可能是注册或者同意某一
	  <acronym>EULA</acronym> 的条款。</para>
      </sect2>

      <sect2>
	<title><varname>RESTRICTED_FILES</varname> (禁止某些文件的再分发)</title>

	<para>当设置了 <varname>RESTRICTED</varname> 或 <varname>NO_CDROM</varname>
	  时， 这个变量会默认设置为 <literal>${DISTFILES}
	  ${PATCHFILES}</literal>， 否则它会为空。 如果只有某些源码包文件是受限的，
	  则可以用这个变量来指明它们。</para>

	<para>注意， port committer 应该在
	  <filename>/usr/ports/LEGAL</filename> 中为每一个源码包文件撰写对应的项目，
	  并介绍这些限制的原因。</para>
      </sect2>
    </sect1>

    <sect1 xml:id="building">
      <title>联编机制</title>

      <sect2 xml:id="parallel-builds">
	<title>Ports 的并行联编</title>

	<para>&os; ports 框架支持使用多个 <command>make</command> 子进程来进行并行编译，
	  在 <acronym>SMP</acronym> 上这可以全面地利用系统的
	  <acronym>CPU</acronym> 计算能力， 令 port 的联编过程更快、 更有效率。</para>

	<para>目前这是通过向原作者的代码传递
	  &man.make.1; 参数 <varname>-jX</varname> 来实现的。
	  遗憾的是， 并不是所有的 port 都能够很好地处理这个选项。
	  因此， 必须通过明确地在 <filename>Makefile</filename> 中指定
	  <literal>MAKE_JOBS_SAFE=yes</literal> 来启用这一功能。</para>

	<para>从 port 监护人的角度还有一个控制的方法是设置
	  <varname>MAKE_JOBS_UNSAFE=yes</varname> 变量。
	  这个变量主要是用于已知不能与 <varname>-jX</varname>
	  配合使用的 port， 即使用户在 <filename>/etc/make.conf</filename> 中定义了
	  <literal>FORCE_MAKE_JOBS=yes</literal> 变量， 系统也不会使用并行编译。</para>
      </sect2>

      <sect2 xml:id="using-make">
	<title><command>make</command>、 <command>gmake</command>， 以及
	  <command>imake</command></title>

	<para>如果 port 用到了 <application>GNU make</application>， 应设置
	  <literal>USE_GMAKE=yes</literal>。</para>

	  <table frame="none">
	    <title>与 <application>gmake</application> 有关的 port 变量</title>

	    <tgroup cols="2">
	      <thead>
		<row>
		  <entry>变量</entry>

		  <entry>意义</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry><varname>USE_GMAKE</varname></entry>

		  <entry>此 port 需要使用 <command>gmake</command>
		    来完成联编过程。</entry>
		</row>

		<row>
		  <entry><varname>GMAKE</varname></entry>

		  <entry>不在 <envar>PATH</envar> 中时， <command>gmake</command>
		    的完整路径。</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>

	  <para>对于 X 应用程序的 port， 如果它使用
	    <application>imake</application> 根据
	    <filename>Imakefile</filename> 文件来生成
	    <filename>Makefile</filename>， 则应设置
	    <literal>USE_IMAKE=yes</literal>。 这会使联编过程中的配置
	    (configure) 阶段自动执行 <command>xmkmf -a</command>。
	    如果 <option>-a</option> 标志会给您的 port 带来麻烦， 则需设置
	    <literal>XMKMF=xmkmf</literal>。 如果 port 用到了
	    <application>imake</application> 但并不使用
	    <buildtarget>install.man</buildtarget> target， 则应设置
	    <literal>NO_INSTALL_MANPAGES=yes</literal>。</para>

	  <para>如果 port 源文件的 <filename>Makefile</filename> 的主联编
	    target 是 <buildtarget>all</buildtarget> 以外的名字，
	    应对应地设置 <varname>ALL_TARGET</varname>。
	    对于 <buildtarget>install</buildtarget> 而言， 对应的变量是
	    <varname>INSTALL_TARGET</varname>。</para>

	</sect2>

	<sect2 xml:id="using-configure">
	  <title><command>configure</command> 脚本</title>

	<para>假如 port 使用 <command>configure</command> 脚本来从
	  <filename>Makefile.in</filename>
	  生成 <filename>Makefile</filename> 文件， 需要设置
	  <literal>GNU_CONFIGURE=yes</literal>。
	  如果希望传额外的参数给 <command>configure</command> 脚本
	  (默认参数为 <literal>--prefix=&dollar;{PREFIX}
	  --infodir=&dollar;{PREFIX}/&dollar;{INFO_PATH}
	  --mandir=&dollar;{MANPREFIX}/man
	  --build=&dollar;{CONFIGURE_TARGET}</literal>)，
	  应通过 <varname>CONFIGURE_ARGS</varname> 来指定这些参数。
	  类似地， 可以通过
	  <varname>CONFIGURE_ENV</varname> 变量来传递一些环境变量。</para>

	<para>如果您的软件包使用 GNU <command>configure</command>，
	  而生成的可执行文件命名方式 <quote>怪异</quote> 如
	  <filename>i386-portbld-freebsd4.7-</filename><replaceable>应用程序名</replaceable>，
	  则需要更进一步地通过改变
	  <varname>CONFIGURE_TARGET</varname> 变量来按照较新版本的
	  <command>autoconf</command> 生成的脚本所希望的方式指定 target。
	  其方法是， 紧随 <filename>Makefile</filename>
	  中 <literal>GNU_CONFIGURE=yes</literal> 一行之后加入：</para>

	<para>
	  <literal>CONFIGURE_TARGET=--build=${MACHINE_ARCH}-portbld-freebsd${OSREL}</literal>
	  </para>

	  <table frame="none">
	    <title>用于用到了 <command>configure</command> 脚本的 port 的变量</title>

	    <tgroup cols="2">
	      <thead>
		<row>
		  <entry>变量</entry>

		  <entry>意义</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry><varname>GNU_CONFIGURE</varname></entry>

		  <entry>此 port 需要用 <command>configure</command> 脚本来准备联编。</entry>
		</row>

		<row>
		  <entry><varname>HAS_CONFIGURE</varname></entry>

		  <entry>与 <varname>GNU_CONFIGURE</varname> 类似，
		    但默认的 configure target 并不加入
		    <varname>CONFIGURE_ARGS</varname>。</entry>
		</row>

		<row>
		  <entry><varname>CONFIGURE_ARGS</varname></entry>

		  <entry>希望传给
		    <command>configure</command> 脚本的额外参数。</entry>
		</row>

		<row>
		  <entry><varname>CONFIGURE_ENV</varname></entry>

		  <entry>希望在执行 <command>configure</command>
		    脚本时设置的环境变量。</entry>
		</row>

		<row>
		  <entry><varname>CONFIGURE_TARGET</varname></entry>

		  <entry>替换默认的 configure target。 其默认值是
		    <literal>&dollar;{MACHINE_ARCH}-portbld-freebsd&dollar;{OSREL}</literal>。</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>
	</sect2>

	<sect2 xml:id="using-scons">
	  <title>使用 <command>scons</command></title>

	  <para>如果您的 port 使用 <application>SCons</application>， 就需要定义
	    <literal>USE_SCONS=yes</literal> 了。</para>

	  <table frame="none">
	    <title>使用 <command>scons</command> 的 port 会用到的变量</title>

	    <tgroup cols="2">
	      <thead>
		<row>
		  <entry>变量</entry>

		  <entry>含义</entry>
		</row>
	      </thead>

	      <tbody>
		<row>
		  <entry><varname>SCONS_ARGS</varname></entry>

		  <entry>当前 port 希望传给 SCons
		    环境的参数。</entry>
		</row>

		<row>
		  <entry><varname>SCONS_BUILDENV</varname></entry>

		  <entry>希望在系统环境中设置的变量。</entry>
		</row>

		<row>
		  <entry><varname>SCONS_ENV</varname></entry>

		  <entry>希望在 SCons 环境中设置的变量。</entry>
		</row>

		<row>
		  <entry><varname>SCONS_TARGET</varname></entry>

		  <entry>传递给 SCons 的最后一个参数， 类似于
		    <varname>MAKE_TARGET</varname>。</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </table>

	  <para>如果希望让第三方的 <filename>SConstruct</filename> 尊重通过 <varname>SCONS_ENV</varname>
	    (其中最重要的是
	    <varname>CC/CXX/CFLAGS/CXXFLAGS</varname> 配置) 传给 Scons 的配置， 则需要对
	    <filename>SConstruct</filename> 进行修改， 使联编的
	    <literal>Environment</literal> 按下列方式建立：</para>

	  <programlisting>env = Environment(**ARGUMENTS)</programlisting>

	  <para>其后， 可以通过 <literal>env.Append</literal> 和
	    <literal>env.Replace</literal> 来对它进行修改。</para>
	</sect2>
    </sect1>

    <sect1 xml:id="using-autotools">
      <title>利用 GNU autotools</title>

	<sect2 xml:id="using-autotools-introduction">
	  <title>入门</title>

	  <para>众多 GNU autotools 提供了一种在多重操作系统和机器架构之上联编软件的抽象机制。
	    在 Ports Collection 中， port 可以通过简单的方法来使用这些工具：</para>

	  <programlisting>USE_AUTOTOOLS= <replaceable>工具</replaceable>:<replaceable>版本</replaceable>[:<replaceable>操作</replaceable>] ...</programlisting>

	  <para>撰写本书时， <replaceable>工具</replaceable> 可以设置为
	    <literal>libtool</literal>、 <literal>libltdl</literal>、
	    <literal>autoconf</literal>、 <literal>autoheader</literal>、
	    <literal>automake</literal> 或 <literal>aclocal</literal> 之一。</para>

	  <para><replaceable>版本</replaceable> 用来指定希望使用的工具的特定版本 (参见
	    <literal>devel/{automake,autoconf,libtool}[0-9]+</literal>
	    以了解有效的版本号)。</para>

	  <para><replaceable>操作</replaceable> 是一个可选的扩展选项，
	    用于修改如何使用工具。</para>

	  <para>可以同时指定多个不同的工具， 可以在一行中指定， 也可以用
	    Makefile 的 <literal>+=</literal> 结构。</para>

          <para>最后， 可以使用一个特殊的名为
	    <literal>autotools</literal> 的工具，
	    它会安装全部可用的 autotools 版本，
	    以适应跨平台开发的需要。 您可以通过安装 <literal>devel/autotools</literal> port 来达到这一目的。</para>

	</sect2>

	<sect2 xml:id="using-libtool">
	  <title><command>libtool</command></title>

	  <para>使用 GNU 联编框架的共享库通常会使用
	    <command>libtool</command> 来调整共享库的编译和安装，
	    以便与所运行的操作系统相匹配。 通常的做法是使用应用程序所附带的
	    <command>libtool</command> 副本。
	    如果需要使用外部的 <command>libtool</command>，
	    则可以使用 Ports 套件提供的版本：</para>

	  <programlisting>USE_AUTOTOOLS= libtool:<replaceable>版本</replaceable>[:env]</programlisting>

	  <para>如果不使用额外的操作符，
	    <literal>libtool:版本</literal>
	    表示希望联编框架使用 configure 脚本来对系统所安装的 <command>libtool</command>
	    进行修补。 这会暗含地定义 <varname>GNU_CONFIGURE</varname>。
	    更进一步， 联编框架还会设置一系列 make 和 shell
	    变量用于 port 后续的操作。 请参见
	    <filename>bsd.autotools.mk</filename> 了解进一步的详情。</para>

	  <para>如果指定了 <literal>:env</literal> 操作符， 则表示只设置环境，
	    而跳过其他的操作。</para>

	  <para>最后， <varname>LIBTOOLFLAGS</varname> 和
	    <varname>LIBTOOLFILES</varname> 可以用来替换最常修改的参数， 以及将被
	    <command>libtool</command> 修补的文件。 多数 port 不需要这样做。
	    请参见 <filename>bsd.autotools.mk</filename> 以了解进一步的细节。</para>

	</sect2>

	<sect2 xml:id="using-libltdl">
	  <title><command>libltdl</command></title>

	  <para>一些 ports 会使用 <command>libltdl</command> 库，
	    后者是 <command>libtool</command> 软件包的一部分。
	    使用这个库并不意味着必须使用
	    <command>libtool</command> 本身， 因此提供了另一组结构。</para>

	  <programlisting>USE_AUTOTOOLS= libltdl:<replaceable>版本</replaceable></programlisting>

	  <para>目前， 这一设置所做的全部工作是将
	    <varname>LIB_DEPENDS</varname> 设置为适当的
	    <command>libltdl</command> port， 并作为一项方便的功能，
	    协助开发人员消除在 <varname>USE_AUTOTOOLS</varname> 框架以外的，
	    对于 autotools port 的依赖。 这个工具并不提供其它的操作符。</para>

	</sect2>

	<sect2 xml:id="using-autoconf">
	  <title><command>autoconf</command> 和
	    <command>autoheader</command></title>

	  <para>某些 port 并没有直接提供 configure 脚本， 但包含了作为
	    autoconf 模板的 <filename>configure.ac</filename> 文件。
	    可以用下列设置来要求
	    <command>autoconf</command> 创建 configure 脚本，
	    并使用 <command>autoheader</command> 来为 configure
	    脚本创建模板头文件。</para>

	  <programlisting>USE_AUTOTOOLS=	autoconf:<replaceable>版本</replaceable>[:env]</programlisting>

	  <para>以及</para>

	  <programlisting>USE_AUTOTOOLS=	autoheader:<replaceable>版本</replaceable></programlisting>

	  <para>上述设置会暗含使用
	    <literal>autoconf:版本</literal>。</para>

	  <para>对于 <command>libtool</command>， 设置与前面类似。
	    如果指定可选的 <literal>:env</literal> 操作符，
	    则表示只设置用于后续工作的环境。 如果不指定，
	    则会对 port 进行相应的修补和重新配置。</para>

	  <para>其它的可选变量， 如
	    <varname>AUTOCONF_ARGS</varname> 和
	    <varname>AUTOHEADER_ARGS</varname> 可以通过 port 的
	    <filename>Makefile</filename> 来显式地指定替换。
	    类似 <command>libtool</command>， 多数 port 并不需要这样做。</para>

	</sect2>

	<sect2 xml:id="using-automake">
	  <title><command>automake</command> 和
	    <command>aclocal</command></title>

	  <para>某些软件包只提供了 <filename>Makefile.am</filename>
	    文件。 这些文件必须首先用
	    <command>automake</command> 转换为
	    <filename>Makefile.in</filename> 并使用
	    <command>configure</command> 来生成实际的
	    <filename>Makefile</filename>。</para>

	  <para>类似地， 偶尔会有一些软件包不提供联编所需的
	    <filename>aclocal.m4</filename> 文件。
	    这些文件可以通过使用 <command>aclocal</command>
	    来扫描 <filename>configure.ac</filename> 或
	    <filename>configure.in</filename> 自动生成。</para>

	  <para><command>aclocal</command> 与
	    <command>automake</command> 有和 <command>autoheader</command>
	    与 <command>autoconf</command> 在前面一节中所介绍的相类似的关系。
	    <command>aclocal</command> 会暗含使用
	    <command>automake</command>， 因此：</para>

	  <programlisting>USE_AUTOTOOLS=	automake:<replaceable>版本</replaceable>[:<replaceable>env</replaceable>]</programlisting>

	  <para>和</para>

	  <programlisting>USE_AUTOTOOLS=	aclocal:<replaceable>版本</replaceable></programlisting>

	  <para>也自动暗含使用
	    <literal>automake:版本</literal>。</para>

	  <para>与 <command>libtool</command> 类似，
	    <command>autoconf</command> 如果使用了可选的
	    <literal>:env</literal> 操作符表示仅仅设置用于后续使用的环境，
	    如果不设置， 则会对 port 进行重新配置。</para>

	  <para>对于
	    <command>autoconf</command> 和 <command>autoheader</command> 而言，
	    <command>automake</command> 和 <command>aclocal</command>
	    提供了对应的可选参数变量 <varname>AUTOMAKE_ARGS</varname> 和
	    <varname>ACLOCAL_ARGS</varname>， 如果需要的话，
	    可以在 port 的 <filename>Makefile</filename> 中指定。</para>

	</sect2>
    </sect1>

    <sect1 xml:id="using-gettext">
      <title>使用 GNU <literal>gettext</literal></title>

      <sect2>
	<title>基本用法</title>

	<para>如果您的 port 需要使用 <literal>gettext</literal>，
	  只要将 <varname>USE_GETTEXT</varname> 设置为 <literal>yes</literal>，
	  您的 port 就会增加对 <package>devel/gettext</package> 的依赖。
	  <varname>USE_GETTEXT</varname> 也可以指定为所需的
	  <literal>libintl</literal> 库的版本，
	  它是 <literal>gettext</literal> 的基本组成部分，
	  尽管如此， <emphasis>强烈建议您不要</emphasis> 使用这个功能：
	  您的 port 应能与目前版本的
	  <package>devel/gettext</package> 配合工作。</para>

	<para>在 port 中相当常见的情况下， 会需要同时使用
	  <literal>gettext</literal> 和 <command>configure</command>。
	  一般而言， GNU <command>configure</command> 能够自动定位到 <literal>gettext</literal>。
	  如果它没有成功地完成这项工作， 则可以通过类似下面这样的
	  <envar>CPPFLAGS</envar> 和 <envar>LDFLAGS</envar> 将
	  <literal>gettext</literal> 的位置告诉它：</para>

	<programlisting>USE_GETTEXT=    yes
CPPFLAGS+=      -I${LOCALBASE}/include
LDFLAGS+=       -L${LOCALBASE}/lib

GNU_CONFIGURE=  yes
CONFIGURE_ENV=  CPPFLAGS="${CPPFLAGS}" \
                LDFLAGS="${LDFLAGS}"</programlisting>

	<para>当然， 不需要传参数给 <command>configure</command> 时， 代码可以更为简练：</para>

	<programlisting>USE_GETTEXT=    yes
GNU_CONFIGURE=  yes
CONFIGURE_ENV=  CPPFLAGS="-I${LOCALBASE}/include" \
                LDFLAGS="-L${LOCALBASE}/lib"</programlisting>
      </sect2>

      <sect2>
	<title>可选用法</title>

	<para>一些软件产品提供了禁用 NLS 的能力，
	  例如， 在 <command>configure</command> 时， 指定
	  <option>--disable-nls</option> 参数。 如果您 port
	  的软件支持这种配置， 则应根据 <link linkend="knobs-without-nls"><varname>WITHOUT_NLS</varname></link>
	  的设置来有条件地使用 <literal>gettext</literal>。
	  对于比较简单和不太复杂的 port， 您可以使用下列结构：</para>

	<programlisting>GNU_CONFIGURE=          yes

.if !defined(WITHOUT_NLS)
USE_GETTEXT=            yes
PLIST_SUB+=             NLS=""
.else
CONFIGURE_ARGS+=        --disable-nls
PLIST_SUB+=             NLS="@comment "
.endif</programlisting>

	<para>您要做的下一件事是合理地安排装箱单文件，
	  使其根据用户配置来决定是否将消息编录 (message catalog)
	  文件放入最终的装箱单。 前面已经介绍了在 <filename>Makefile</filename>
	  中所需的写法， 这种做法在 <link linkend="plist-sub">高级
	  <filename>pkg-plist</filename> 用法</link> 这节中进行了介绍。
	  简单地说， 在 <filename>pkg-plist</filename>
	  中出现的 <literal>%%NLS%%</literal> 均会在禁用 NLS 时自动替换为
	  <quote><literal>@comment&nbsp;</literal></quote>，
	  反之则替换为空串。 这样， 在最终的装箱单中带 <literal>%%NLS%%</literal> 的行，
	  在 NLS 关闭的情况下就会变为注释， 反之， 这些前缀就会自动删掉。
	  现在需要做的事情就是把 <literal>%%NLS%%</literal> 插到 <filename>pkg-plist</filename>
	  中的消息编录文件的那些行开头， 例如：</para>

	<programlisting>%%NLS%%share/locale/fr/LC_MESSAGES/foobar.mo
%%NLS%%share/locale/no/LC_MESSAGES/foobar.mo</programlisting>

	<para>在比较复杂的情形中， 您可能需要使用更高级的技术， 例如 <link linkend="plist-dynamic">动态生成装箱单</link> 等。</para>
      </sect2>

      <sect2>
	<title>处理消息编录目录</title>

	<para>在安装消息编录文件时还有一个需要注意的地方。 这些文件会放到
	  <filename>LOCALBASE/share/locale</filename>
	  下与语言对应的目录中， 这些目录一般您的 port 不需要创建和删除。
	  最常用的语言的目录已经在 <filename>/etc/mtree/BSD.local.dist</filename>
	  中列出； 也就是说， 它们是基本系统的一部分。 其他一些语言的目录， 则由 <package>devel/gettext</package> 控制。
	  您最好查看一下 <filename>pkg-plist</filename>，
	  以确定是否正在安装某种不常用语言的文件。</para>
      </sect2>
    </sect1>

    <sect1 xml:id="using-perl">
      <title>使用 <literal>perl</literal></title>

      <para>如果 <varname>MASTER_SITES</varname> 设为
	<varname>MASTER_SITE_PERL_CPAN</varname>， 则应尽量把
	<varname>MASTER_SITE_SUBDIR</varname> 设置为顶级目录的名字。
	例如， 对 <literal>p5-Module-Name</literal>
	而言推荐的名字是 <literal>Module</literal>。
	您可以在 <link xlink:href="http://cpan.org/modules/by-module/">cpan.org</link>
	找到顶级目录的名字。 这可以确保在模块的作者发生变化时，
	保持 port 继续可用。</para>

      <para>以上规则有一个例外， 即对应目录不存在或源码包不在那个目录中时， 允许使用作者的 id 作为
	<varname>MASTER_SITE_SUBDIR</varname>。</para>

      <para>所有这些选项均同时接受 <literal>YES</literal>
	和版本串， 类似 <literal>5.8.0+</literal> 这样的写法。 使用
	<literal>YES</literal> 表示 port 能够配合所有受支持的 <application>Perl</application> 版本来使用。
	如果 port 只能配合特定版本的 <application>Perl</application> 来使用，
	则可以用版本串来表示， 例如最低版本
	(如 <literal>5.7.3+</literal>)、 最高版本 (如
	<literal>5.8.0-</literal>) 或某个具体的版本 (如
	<literal>5.8.3</literal>)。</para>

      <table frame="none">
	<title>用于用到 <literal>perl</literal> 的 port 的变量</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>变量</entry>

	      <entry>意义</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>USE_PERL5</varname></entry>

	      <entry>表示 port 将 <literal>perl 5</literal> 用于联编和运行。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_PERL5_BUILD</varname></entry>

	      <entry>表示 port 将 <literal>perl 5</literal> 用于联编。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_PERL5_RUN</varname></entry>

	      <entry>表示 port 将 <literal>perl 5</literal> 用于运行。</entry>
	    </row>

	    <row>
	      <entry><varname>PERL</varname></entry>

	      <entry><literal>perl 5</literal> 的完整路径， 可能是系统自带的，
		或者从 port 安装， 但没有版本号。 如果您需要在脚本中替换
		<quote><literal>#!</literal></quote> 行， 则应使用这个变量。</entry>
	    </row>

	    <row>
	      <entry><varname>PERL_CONFIGURE</varname></entry>

	      <entry>采用 Perl 的 MakeMaker 进行配置。 这一变量隐含设置
		<varname>USE_PERL5</varname>。</entry>
	    </row>

	    <row>
	      <entry><varname>PERL_MODBUILD</varname></entry>

	      <entry>使用 Module::Build 进行配置、 联编并安装。
		这一变量隐含设置 <varname>PERL_CONFIGURE</varname>。</entry>
	    </row>
	  </tbody>
	</tgroup>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>只读变量</entry>

	      <entry>意义</entry>
	    </row>
	  </thead>

	  <tbody>
	    <row>
	      <entry><varname>PERL_VERSION</varname></entry>

	      <entry>系统中安装的 <literal>perl</literal> 的完整版本 (例如，
		<literal>5.8.9</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>PERL_LEVEL</varname></entry>

	      <entry>系统中安装的 <literal>perl</literal> 的版本整数值，
		其形式为 <literal>MNNNPP</literal>
		(例如， <literal>500809</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>PERL_ARCH</varname></entry>

	      <entry><literal>perl</literal> 保存某平台专用的库的位置。
		默认值为 <literal>${ARCH}-freebsd</literal>。</entry>
	    </row>

	    <row>
	      <entry><varname>PERL_PORT</varname></entry>

	      <entry>系统中所安装的 <literal>perl</literal> port 的名字
		(例如， <literal>perl5</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>SITE_PERL</varname></entry>

	      <entry>站点专用的
		<literal>perl</literal> package 安装路径。
		其值会自动加入到 PLIST_SUB 中。</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <note>
	<para>Perl 模块通常并没有官方网站， 这些 port
	  应将 <systemitem>cpan.org</systemitem> 作为其
	  <filename>pkg-descr</filename> WWW 行的内容。 推荐的 URL 格式为
	  <literal>http://search.cpan.org/dist/Module-Name/</literal>
	  (保留最后的斜线)。</para>
      </note>

    </sect1>

    <sect1 xml:id="using-x11">
      <title>使用 X11</title>

      <sect2 xml:id="x11-variables">
	<title>X.Org 组件</title>

	<para>在 Ports 套件中提供的 X11 实现是 X.Org。
	  如果您的应用程序用到了 X 组件， 则应将
	  <varname>USE_XORG</varname> 设为所需要的那些组件。
	  目前可用的组件包括：</para>

	<para><literal>bigreqsproto compositeproto damageproto dmx dmxproto
	  evieproto fixesproto fontcacheproto fontenc fontsproto fontutil
	  glproto ice inputproto kbproto libfs oldx printproto randrproto
	  recordproto renderproto resourceproto scrnsaverproto sm trapproto
	  videoproto x11 xau xaw xaw6 xaw7 xaw8 xbitmaps xcmiscproto xcomposite
	  xcursor xdamage xdmcp xevie xext xextproto xf86bigfontproto
	  xf86dgaproto xf86driproto xf86miscproto xf86rushproto
	  xf86vidmodeproto xfixes xfont xfontcache xft xi xinerama
	  xineramaproto xkbfile xkbui xmu xmuu xorg-server xp xpm xprintapputil
	  xprintutil xpr oto xproxymngproto xrandr xrender xres xscrnsaver xt
	  xtrans xtrap xtst xv xvmc xxf86dga xxf86misc xxf86vm</literal>.</para>

	<para>最新的列表， 可以在
	  <filename>/usr/ports/Mk/bsd.xorg.mk</filename> 中找到。</para>

	<para>The Mesa Project 是一个致力于自由的 OpenGL
	  实现的计划。 您可以使用 <varname>USE_GL</varname> 变量来让 port 依赖其不同的组件。
	  可用的选项包括： <literal>glut, glu, glw, glew, gl</literal> 和
	  <literal>linux</literal>。 为了实现向前兼容，
	  当使用 <literal>yes</literal> 时系统会自动将其映射为 <literal>glu</literal>。</para>

	<example xml:id="use-xorg-example">
	  <title>使用 USE_XORG 的例子</title>
	  <programlisting>USE_XORG=   xrender xft xkbfile xt xaw
USE_GL=     glu</programlisting>
	</example>

	<para>许多 ports 会定义 <varname>USE_XLIB</varname>，
	  这会导致 port 依赖 50 多个动态连接库。 由于它出现于 X.org
	  模块化之前， 因此这个变量仅为向前兼容的原因提供，
	  新的 port 不应再使用它。</para>

      <table frame="none">
	<title>用到 X 的 port 可以使用的变量</title>

	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry><varname>USE_XLIB</varname></entry>

	      <entry>此 port 用到了 X 库。 已过时 - 您应使用 <varname>USE_XORG</varname> 变量列出用到的
		X.Org 组件， 而不是使用这个变量。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_IMAKE</varname></entry>

	      <entry>此 port 用到了 <command>imake</command>。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_X_PREFIX</varname></entry>

	      <entry>已过时。 目前其作用与
		<varname>USE_XLIB</varname> 相同， 并可以直接用后者替换。</entry>
	    </row>

	    <row>
	      <entry><varname>XMKMF</varname></entry>

	      <entry>设置为 <command>xmkmf</command> 的完整路径名， 如果它不在
		<envar>PATH</envar> 中的话。 默认值是 <literal>xmkmf
		  -a</literal>。</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <table frame="none">
	<title>用于表示对 X11 某些组件的依赖关系的变量</title>

	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry><varname>X_IMAKE_PORT</varname></entry>

	      <entry>用以提供 <command>imake</command> 以及许多其它用于联编
		X11 的工具的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_LIBRARIES_PORT</varname></entry>

	      <entry>用以提供 X11 库的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_CLIENTS_PORT</varname></entry>

	      <entry>用以提供 X 客户的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_SERVER_PORT</varname></entry>

	      <entry>用以提供 X 服务的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTSERVER_PORT</varname></entry>

	      <entry>用以提供字体服务的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_PRINTSERVER_PORT</varname></entry>

	      <entry>用以提供打印服务的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_VFBSERVER_PORT</varname></entry>

	      <entry>用以提供在虚拟帧缓存服务(virtual framebuffer server) 的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_NESTSERVER_PORT</varname></entry>

	      <entry>用以提供嵌套 X 服务的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTS_ENCODINGS_PORT</varname></entry>

	      <entry>用以为字体提供编码的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTS_MISC_PORT</varname></entry>

	      <entry>用以提供多种位图字体的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTS_100DPI_PORT</varname></entry>

	      <entry>用以提供 100dpi 位图字体的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTS_75DPI_PORT</varname></entry>

	      <entry>用以提供 75dpi 位图字体的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTS_CYRILLIC_PORT</varname></entry>

	      <entry>用以提供西里尔位图字体的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTS_TTF_PORT</varname></entry>

	      <entry>用以提供 &truetype; 字体的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_FONTS_TYPE1_PORT</varname></entry>

	      <entry>用以提供 Type1 字体的 port。</entry>
	    </row>

	    <row>
	      <entry><varname>X_MANUALS_PORT</varname></entry>

	      <entry>用以提供面向开发人员的联机手册的 port。</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <example xml:id="using-x11-vars">
	<title>在变量中使用与 X11 有关的变量</title>
	<programlisting># 使用某些 X11 库并依赖字体服务和西里尔字体。
RUN_DEPENDS=   ${LOCALBASE}/bin/xfs:${X_FONTSERVER_PORT} \
               ${LOCALASE}/lib/X11/fonts/cyrillic/crox1c.pcf.gz:${X_FONTS_CYRILLIC_PORT}

USE_XORG=      x11 xpm</programlisting>
      </example>

      </sect2>

      <sect2 xml:id="x11-motif">
	<title>需要使用 Motif 的 port</title>

	<para>如果您的 port 需要 Motif 库， 则应在
	  <filename>Makefile</filename> 中定义 <varname>USE_MOTIF</varname>。
	  默认的 Motif 实现是
	  <package>x11-toolkits/open-motif</package>。
	  用户可以通过设置 <varname>WANT_LESSTIF</varname> 变量来选择
	  <package>x11-toolkits/lesstif</package> 代替它。</para>

	<para><filename>bsd.port.mk</filename> 会将 <varname>MOTIFLIB</varname>
	  变量设置为到合适的 Motif 库的引用。 请使用补丁将您 port 中
	  <filename>Makefile</filename> 或
	  <filename>Imakefile</filename> 提到 Motif
	  库的地方改为 <literal>&dollar;{MOTIFLIB}</literal>。</para>

	<para>有两种比较常见的情况：</para>

	<itemizedlist>
	  <listitem>
	    <para>如果 port 中将 Motif 在其 <filename>Makefile</filename> 或
	      <filename>Imakefile</filename> 表达为
	      <literal>-lXm</literal>， 则简单地将其替换为
	      <literal>&dollar;{MOTIFLIB}</literal>。</para>
	  </listitem>

	  <listitem>
	    <para>如果 port 在其 <filename>Imakefile</filename>
	      中使用 <literal>XmClientLibs</literal>， 则将其改为
	      <literal>&dollar;{MOTIFLIB} &dollar;{XTOOLLIB}
		&dollar;{XLIB}</literal>.</para>
	  </listitem>

	</itemizedlist>

	<para>注意 <varname>MOTIFLIB</varname> (通常) 会展开为
	  <literal>-L/usr/X11R6/lib -lXm</literal> 或
	  <literal>/usr/X11R6/lib/libXm.a</literal>， 所以不需要在其前加入
	  <literal>-L</literal> 或 <literal>-l</literal>。</para>

      </sect2>

      <sect2>
	<title>X11 字体</title>

	<para>如果 port 将为 X Window 系统安装字体， 将这些字体放到
	  <filename>LOCALBASE/lib/X11/fonts/local</filename>。</para>

      </sect2>

      <sect2>
	<title>通过 Xvfb 来获得虚拟的 <envar>DISPLAY</envar></title>

	<para>某些应用程序必须在有可用的 X11 显示的时候才能成功编译。
	  当编译的机器没有控制台时， 这会带来问题。 为了解决这个问题，
	  如果定义了适当的变量， 联编基础设施会启动采用虚拟帧缓存的
	  X server。 此时， 编译过程中将会传出可用的 <envar>DISPLAY</envar>。</para>

	<programlisting>USE_DISPLAY=  yes</programlisting>

      </sect2>

      <sect2 xml:id="desktop-entries">
	<title>桌面项</title>

	<para>通过利用
	  <varname>DESKTOP_ENTRIES</varname> 变量，
	  可以很容易地在您的 port 中创建桌面项 (<link xlink:href="http://standards.freedesktop.org/desktop-entry-spec/latest/">Freedesktop
	  标准</link>)。 这些项会在类似 GNOME 或 KDE
	  这样的符合这一标准的桌面环境中显示在应用程序菜单中。
	  这样做会自动创建、 安装 <filename>.desktop</filename> 文件， 并将其加入
	  <filename>pkg-plist</filename>。 其语法为：</para>

	<programlisting>DESKTOP_ENTRIES=  "NAME" "COMMENT" "ICON" "COMMAND" "CATEGORY" StartupNotify</programlisting>

	<para>您可以在 <link xlink:href="http://standards.freedesktop.org/menu-spec/latest/apa.html">
	  Freedesktop 网站上</link> 找到可用的分类名称。 <varname>StartupNotify</varname>
	  表示应用程序在支持启动通知的环境中清除状态信息。</para>

	<para>例子：</para>

	<programlisting>DESKTOP_ENTRIES=  "ToME" "Roguelike game based on JRR Tolkien's work" \
                  "${DATADIR}/xtra/graf/tome-128.png" \
                  "tome -v -g" "Application;Game;RolePlaying;" \
                  false</programlisting>

      </sect2>

    </sect1>

    <sect1 xml:id="using-gnome">
      <title>使用 GNOME</title>

      <para>FreeBSD/GNOME 项目组使用一组自己的变量来定义 port
	所使用的 GNOME 组件。
	<link xlink:href="http://www.FreeBSD.org/gnome/docs/porting.html">这些变量的详细列表</link>
	 可以在 FreeBSD/GNOME 项目的主页找到。</para>

    </sect1>

    <sect1 xml:id="using-qt">
      <title>使用 Qt</title>

      <sect2 xml:id="qt-common">
	<title>在 port 中使用 Qt</title>

	<table frame="none">
	  <title>用于使用 Qt 的 port 的变量</title>

	  <tgroup cols="2">
	    <tbody>
	      <row>
		<entry><varname>USE_QT_VER</varname></entry>

		<entry>表示 port 用到了 Qt 工具套件。
		  可用的值包括 <literal>3</literal> 和 <literal>4</literal>；
		  用于指定使用的 Qt 的主版本。 此外， 系统会自动为 <command>configure</command>
		  脚本和 <command>make</command> 命令提供必要的参数。</entry>
	      </row>

	      <row>
		<entry><varname>QT_PREFIX</varname></entry>

		<entry>这个变量会自动设为 Qt 的安装路径 (只读变量)。</entry>
	      </row>

	      <row>
		<entry><varname>MOC</varname></entry>

		<entry>这个变量会自动设为 <command>moc</command> 的路径
		  (只读变量)。 默认值与
		  <varname>USE_QT_VER</varname> 变量的值有关。</entry>
	      </row>

	      <row>
		<entry><varname>QTCPPFLAGS</varname></entry>

		<entry>通过
		  <varname>CONFIGURE_ENV</varname> 传给 Qt 工具套件的编译参数。
		  默认配置与
		  <varname>USE_QT_VER</varname> 有关。</entry>
	      </row>

	      <row>
		<entry><varname>QTCFGLIBS</varname></entry>

		<entry>通过
		  <varname>CONFIGURE_ENV</varname> 传给 Qt 工具套件的连接库。
		  默认配置与
		  <varname>USE_QT_VER</varname> 有关。</entry>
	      </row>

	      <row>
		<entry><varname>QTNONSTANDARD</varname></entry>

		<entry>禁止系统自动修改
		  <varname>CONFIGURE_ENV</varname>、
		  <varname>CONFIGURE_ARGS</varname> 和
		  <varname>MAKE_ENV</varname>。</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	<table frame="none">
	  <title>其他用于使用 Qt 4.x 的变量</title>

	  <tgroup cols="2">
	    <tbody>
	      <row>
		<entry><varname>QT_COMPONENTS</varname></entry>

		<entry>用于指定 Qt4 工具和函数库的依赖。
		  详情见后。</entry>
	      </row>

	      <row>
		<entry><varname>UIC</varname></entry>

		<entry>这个变量会自动设为 <command>uic</command> 的路径 (只读变量)。
		  默认值与
		  <varname>USE_QT_VER</varname> 有关。</entry>
	      </row>

	      <row>
		<entry><varname>QMAKE</varname></entry>

		<entry>这个变量会自动设为 <command>qmake</command> 的路径
		  (只读变量)。 其默认值与
		  <varname>USE_QT_VER</varname> 有关。</entry>
	      </row>

	      <row>
		<entry><varname>QMAKESPEC</varname></entry>

		<entry>这个变量会自动设为
		  <command>qmake</command> 配置文件的路径 (只读变量)。
		  其默认值与 <varname>USE_QT_VER</varname>
		  有关。</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	<para>当设置了 <varname>USE_QT_VER</varname> 时，
	  系统自动会给 <command>configure</command> 脚本传一系列有用的参数：</para>

	<programlisting>CONFIGURE_ARGS+= --with-qt-includes=${QT_PREFIX}/include \
                 --with-qt-libraries=${QT_PREFIX}/lib \
                 --with-extra-libs=${LOCALBASE}/lib \
                 --with-extra-includes=${LOCALBASE}/include
CONFIGURE_ENV+=  MOC="${MOC}" CPPFLAGS="${CPPFLAGS} ${QTCPPFLAGS}" LIBS="${QTCFGLIBS}" \
                 QTDIR="${QT_PREFIX}" KDEDIR="${KDE_PREFIX}"</programlisting>

	<para>如果将 <varname>USE_QT_VER</varname> 设为 <literal>4</literal>，
	  则还会进行下列配置：</para>

	<programlisting>CONFIGURE_ENV+= UIC="${UIC}" QMAKE="${QMAKE}" QMAKESPEC="${QMAKESPEC}"
MAKE_ENV+=      QMAKESPEC="${QMAKESPEC}"</programlisting>

      </sect2>

      <sect2 xml:id="qt4-components">
	<title>组件的选择 (仅限 Qt 4.x)</title>

	<para>当把 <varname>USE_QT_VER</varname> 设为 4 时， 就可以通过
	  <varname>QT_COMPONENTS</varname> 变量来指定对
	  Qt4 工具和函数库的依赖了。 通过在组件的名称后面添加 <literal>_build</literal> 或 <literal>_run</literal>
	  这样的后缀， 则可相应地将这依赖关系限于联编或运行时刻。
	  在没有指定后缀时， 系统默认在联编和运行时刻均依赖该组件。
	  通常情况下在指明函数库一类的组件时应不使用后缀，
	  联编工具类组件应使用 <literal>_build</literal> 后缀，
	  而插件类组件， 则应使用 <literal>_run</literal> 后缀。
	  下表中列出了一些最常用的组件 (全部可用的组件， 则在
	  <filename>/usr/ports/Mk/bsd.qt.mk</filename>
	  中的 <varname>_QT_COMPONENTS_ALL</varname> 列出)：</para>

	<table frame="none">
	  <title>可用的 Qt4 函数库组件</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>名字</entry>
		<entry>描述</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>corelib</literal></entry>
		<entry>核心库 (在 port 只使用 <literal>corelib</literal> 而没有用到其他库时可以省略)</entry>
	      </row>

	      <row>
		<entry><literal>gui</literal></entry>
		<entry>图形用户界面库</entry>
	      </row>

	      <row>
		<entry><literal>network</literal></entry>
		<entry>网络函数库</entry>
	      </row>

	      <row>
		<entry><literal>opengl</literal></entry>
		<entry>OpenGL 函数库</entry>
	      </row>

	      <row>
		<entry><literal>qt3support</literal></entry>
		<entry>Qt3 兼容支持函数库</entry>
	      </row>

	      <row>
		<entry><literal>qtestlib</literal></entry>
		<entry>单元测试函数库</entry>
	      </row>

	      <row>
		<entry><literal>script</literal></entry>
		<entry>脚本函数库</entry>
	      </row>

	      <row>
		<entry><literal>sql</literal></entry>
		<entry>SQL 函数库</entry>
	      </row>

	      <row>
		<entry><literal>xml</literal></entry>
		<entry>XML 函数库</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	<para>您可以通过在成功编译之后， 通过在主可执行文件上运行
	  <command>ldd</command> 来确定所需的库。</para>

	<table frame="none">
	  <title>可用的 Qt4 工具组件</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>名字</entry>
		<entry>描述</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>moc</literal></entry>
		<entry>元对象编译器 (几乎所有的 Qt 应用程序在联编过程中都需要它)</entry>
	      </row>

	      <row>
		<entry><literal>qmake</literal></entry>
		<entry>Makefile 生成器 / 联编工具</entry>
	      </row>

	      <row>
		<entry><literal>rcc</literal></entry>
		<entry>资源编译器 (如果应用程序中包含
		  <filename>*.rc</filename> 或 <filename>*.qrc</filename>
		  文件， 就需要它)</entry>
	      </row>

	      <row>
		<entry><literal>uic</literal></entry>
		<entry>用户界面编译器 (如果应用程序中包含使用 Qt Designer
		  创建的 <filename>*.ui</filename> 文件时就需要它
		  - 一般说来 Qt 应用程序都会使用 GUI 的)</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	<table frame="none">
	  <title>可用的 Qt4 插件组件</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>名字</entry>
		<entry>描述</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>iconengines</literal></entry>
		<entry>SVG 图标引擎插件 (如果应用程序使用 SVG 图标)</entry>
	      </row>

	      <row>
		<entry><literal>imageformats</literal></entry>
		<entry>用于 GIF、 JPEG、 MNG 和
		  SVG 的 imageformat 插件 (如果应用程序使用图片文件)</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	<example xml:id="qt4-components-example">
	  <title>选择 Qt4 组件</title>

	  <para>在这个例子中， 我们将要移植的应用程序用到了
	    Qt4 图形用户界面函数库、 Qt4 核心 (core) 函数库、
	    所有 Qt4 代码生成工具以及 Qt4 的
	    Makefile 生成器。 由于 gui 函数库会自动附带对核心函数库的依赖，
	    因此并不需要明确指出需要 corelib 的依赖关系。 Qt4 代码生成工具 moc、
	    uic 和 rcc 以及 Makefile 生成器
	    qmake 只在联编过程中才会用到，
	    因此可以指定 <literal>_build</literal> 后缀：</para>

	  <programlisting>USE_QT_VER=    4
QT_COMPONENTS= gui moc_build qmake_build rcc_build uic_build</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="qt-additional">
	<title>其他考虑</title>

	<para>如果应用程序没有提供
	  <filename>configure</filename> 文件， 而是给了一个 <filename>.pro</filename>
	  文件， 则应这样：</para>

	<programlisting>HAS_CONFIGURE=	yes

do-configure:
        @cd ${WRKSRC} &amp;&amp; ${SETENV} ${CONFIGURE_ENV} \
                ${QMAKE} -unix PREFIX=${PREFIX} texmaker.pro</programlisting>

	<para>请注意， 这与系统提供的 <filename>BUILD.sh</filename>
	  中的 <command>qmake</command> 类似。 传递
	  <varname>CONFIGURE_ENV</varname> 能够确保 <command>qmake</command>
	  可以看到 <varname>QMAKESPEC</varname> 变量，
	  否则它可能无法正常工作。 <command>qmake</command> 会生成标准的
	  Makefile， 因此无需自行编写
	  <buildtarget>build</buildtarget> target。</para>

	<para>Qt 应用程序通常会编写为能够跨平台使用， 通常 X11/Unix 并不是开发它的平台，
	  有时这会导致一些边边角角的问题， 例如：</para>

	<itemizedlist>
	  <listitem>
	    <para><emphasis>缺少必要的 includepaths。</emphasis>
	      许多应用程序会使用托盘图标支持， 但忽略了这些头或库文件需要在 X11
	      目录中查找。 您可以通过命令行告诉 <command>qmake</command>
	      将这些头文件和函数库加入到搜索路径中， 例如：</para>

	    <programlisting>${QMAKE} -unix PREFIX=${PREFIX} INCLUDEPATH+=${LOCALBASE}/include \
	LIBS+=-L${LOCALBASE}/lib sillyapp.pro</programlisting>
	  </listitem>

	  <listitem>
	    <para><emphasis>有问题的安装路径。</emphasis>
	      有时， 类似图标或 .desktop 文件这样的一些数据， 默认情况下没有安装到
	      XDG-兼容的程序会扫描的路径中。 <package>editors/texmaker</package>
	      就是一个这样的例子 - 请参考这个 port 的 <filename>files</filename>
	      目录中的 <filename>patch-texmaker.pro</filename>，
	      以了解如何在 Qmake 工程文件中修正这个问题。</para>
	  </listitem>
	</itemizedlist>

      </sect2>

    </sect1>

    <sect1 xml:id="using-kde">
      <title>使用 KDE</title>

      <sect2 xml:id="kde-variables">
	<title>变量定义 (只用于 KDE 3.x)</title>

	<table frame="none">
	  <title>用于使用 KDE 3.x 的 port 的变量</title>

	  <tgroup cols="2">
	    <tbody>
	      <row>
		<entry><varname>USE_KDELIBS_VER</varname></entry>

		<entry>表示 port 用到了 KDE 库。
		  这个变量可以指定希望使用的 KDE 主版本号，
		  如果设置了这个变量， 则系统也会将
		  <varname>USE_QT_VER</varname> 设为适当的版本。
		  该变量目前唯一有效的值是
		  <literal>3</literal>。</entry>
	      </row>

	      <row>
		<entry><varname>USE_KDEBASE_VER</varname></entry>

		<entry>表示 port 用到了 KDE 的基本系统。
		  这个变量可以指定希望使用的 KDE 主版本号，
		  如果设置了这个变量， 则系统也会将
		  <varname>USE_QT_VER</varname> 设为适当的版本。
		  该变量目前唯一有效的值是 <literal>3</literal>。</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

      </sect2>

      <sect2 xml:id="kde4-variables">
	<title>用于 KDE 4 的变量定义</title>

	<para>如果您的应用程序需要使用 KDE 4.x， 则应将 <varname>USE_KDE4</varname>
	  设为所需组件的列表。 下面列出一些最常用到的组件
	  (最新的组件列表位于 <filename>/usr/ports/Mk/bsd.kde4.mk</filename>
	  中的 <varname>_USE_KDE4_ALL</varname>)：</para>

	<table frame="none">
	  <title>可用的 KDE4 组件</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>名称</entry>
		<entry>说明</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>akonadi</literal></entry>
		<entry>个人信息管理 (PIM)存储服务</entry>
	      </row>

	      <row>
		<entry><literal>automoc4</literal></entry>
		<entry>令 port 使用 automoc4 联编工具集</entry>
	      </row>

	      <row>
		<entry><literal>kdebase</literal></entry>
		<entry>基本的 KDE 应用程序 (Konqueror、 Dolphin、 Konsole)</entry>
	      </row>

	      <row>
		<entry><literal>kdeexp</literal></entry>
		<entry>试验性的 KDE 库 (包含尚未完全确定不变的 API)</entry>
	      </row>

	      <row>
		<entry><literal>kdehier</literal></entry>
		<entry>常用的 KDE 目录层次结构</entry>
	      </row>

	      <row>
		<entry><literal>kdelibs</literal></entry>
		<entry>基本 KDE 库</entry>
	      </row>

	      <row>
		<entry><literal>kdeprefix</literal></entry>
		<entry>如果设置了这个选项， 则 port 将安装到
		  <literal>&dollar;{KDE4_PREFIX}</literal>
		  而不是 <literal>&dollar;{LOCALBASE}</literal></entry>
	      </row>

	      <row>
		<entry><literal>pimlibs</literal></entry>
		<entry>PIM 函数库</entry>
	      </row>

	      <row>
		<entry><literal>workspace</literal></entry>
		<entry>用于组成桌面的应用程序和函数库 (Plasma、 KWin)</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	<para>KDE 4.x port 会安装到 <literal>&dollar;{KDE4_PREFIX}</literal>，
	  目前是 <filename>/usr/local/kde4</filename>，
	  以避免与 KDE 3.x ports 冲突。 这是通过指定 <literal>kdeprefix</literal>
	  组件来实现的， 它表示替换默认的 <varname>PREFIX</varname>。 不过，
	  port 仍会遵循通过 <envar>MAKEFLAGS</envar> 环境变量设置的
	  <varname>PREFIX</varname> 以及其它 <application>make</application> 参数。</para>

	<para>KDE 4.x ports 有可能和 KDE 3.x ports 冲突， 因此如果启用了
	  <literal>kdeprefix</literal> 组件， 它们会安装到
	  <literal>&dollar;{KDE4_PREFIX}</literal>。 目前
	  <literal>KDE4_PREFIX</literal> 的默认值是
	  <filename>/usr/local/kde4</filename>。 也可以将 KDE 4.x ports
	  安装到自定义的 <literal>PREFIX</literal>。 当
	  <literal>PREFIX</literal> 是通过 <envar>MAKEFLAGS</envar>
	  环境变量， 或直接在 <application>make</application> 命令行指定时，
	  它会替换 <literal>kdeprefix</literal> 提供的配置。</para>

	<example xml:id="kde4-components-example">
	  <title><varname>USE_KDE4</varname>  示例</title>

	  <para>下面是一个简单的 KDE 4 port。 <varname>USE_CMAKE</varname>
	  指定 port 使用 <application>CMake</application> &mdash;
	  许多 KDE 4 项目所使用的配置工具。
	  <varname>USE_KDE4</varname> 则引入 KDE 函数库， 并令 port 在联编阶段使用
	  <application>automoc4</application>。 需要的 KDE 组件，
	  以及其他依赖的组件可以从 configure 的日志中获知。
	  <varname>USE_KDE4</varname> 并不会自动设置 <varname>USE_QT_VER</varname>。
	  如果 port 需要使用某些 Qt4 组件， 则需要设置 <varname>USE_QT_VER</varname>
	  并指定所需要的组件。 </para>

	  <programlisting>USE_CMAKE=     yes
USE_KDE4=      automoc4 kdelibs kdeprefix
USE_QT_VER=    4
QT_COMPONENTS= qmake_build moc_build rcc_build uic_build</programlisting>
	</example>
      </sect2>

    </sect1>

    <sect1 xml:id="using-java">
      <title>使用 Java</title>

      <sect2 xml:id="java-variables">
	<title>变量定义</title>

      <para>如果您的 port 需要 Java&trade; 开发包 (JDK&trade;) 来完成联编、
	支持运行， 甚至完成解开源代码包这样的工作，
	就应该定义 <varname>USE_JAVA</varname>。</para>

      <para>在 Ports Collection 中有许多不同的 JDK， 它们的版本各不相同，
	或是来自不同的供应商。 如果您的 port 必须使用其中的某个特定的版本，
	也可以予以定义。 最新的稳定版本是
	<package>java/jdk16</package>。</para>

      <table frame="none">
	<title>用到 Java 的 port 可以使用的变量</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>变量</entry>
	      <entry>意义</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><varname>USE_JAVA</varname></entry>
	      <entry>只有定义它才能使其它变量生效。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_VERSION</varname></entry>
	      <entry>用空格分开的适合 port 使用的 Java 版本。
		可选的 <literal>"+"</literal> 可以用于指定某个范围的版本 (可以用：
		<literal>1.5[+] 1.6[+] 1.7[+]
		</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_OS</varname></entry>
	      <entry>用空格分开的适应 port 的 JDK port 操作系统类型 (可以用： <literal>native
		linux</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_VENDOR</varname></entry>
	      <entry>用空格分开的适应 port 的 JDK port 供应商
		(可以用： <literal>freebsd bsdjava sun
		openjdk</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_BUILD</varname></entry>
	      <entry>设置这个变量表示所选的 JDK port 应被列入 port 的联编依赖关系。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_RUN</varname></entry>
	      <entry>设置这个变量表示所选的 JDK port 应被列入 port 的运行环境依赖关系。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_EXTRACT</varname></entry>
	      <entry>设置这个变量表示所选的 JDK port 应被列入 port 的解压缩支持依赖关系。</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>下面是在设置了 <varname>USE_JAVA</varname> 之后，
	port 能够从系统中获得的配置：</para>

      <table frame="none">
	<title>向使用了 Java 的 port 提供的变量</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>变量</entry>
	      <entry>值</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><varname>JAVA_PORT</varname></entry>
	      <entry>JDK port 的名字 (例如
		<literal>'java/diablo-jdk16'</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_VERSION</varname></entry>
	      <entry>JDK port 的完整版本 (例如
		<literal>'1.6.0'</literal>)。 如果您只需要版本号的前两位， 则可用
		<varname>${JAVA_PORT_VERSION:C/^([0-9])\.([0-9])(.*)$/\1.\2/}</varname>。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_OS</varname></entry>
	      <entry>所用 JDK port 的操作系统 (例如
		<literal>'native'</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_VENDOR</varname></entry>
	      <entry>所用 JDK port 的供应商 (例如
		<literal>'freebsd'</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_OS_DESCRIPTION</varname></entry>
	      <entry>所用 JDK port 操作系统的描述
		(例如 <literal>'Native'</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_PORT_VENDOR_DESCRIPTION</varname></entry>
	      <entry>所用 JDK port 供应商的描述 (例如
		<literal>'FreeBSD Foundation'</literal>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_HOME</varname></entry>
	      <entry>JDK 的安装目录 (例如
		<filename>'/usr/local/diablo-jdk1.6.0'</filename>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVAC</varname></entry>
	      <entry>所用 Java 编译器的完整路径 (例如
		<filename>'/usr/local/diablo-jdk1.6.0/bin/javac'</filename>)。
		</entry>
	    </row>

	    <row>
	      <entry><varname>JAR</varname></entry>
	      <entry>所用 <command>jar</command> 工具的完整路径 (例如
		<filename>'/usr/local/diablo-jdk1.6.0/bin/jar'</filename> 或
		<filename>'/usr/local/bin/fastjar'</filename>)。</entry>
	    </row>

	    <row>
	      <entry><varname>APPLETVIEWER</varname></entry>
	      <entry>所用 <command>appletviewer</command> 工具的完整路径 (例如
		<filename>'/usr/local/diablo-jdk1.6.0/bin/appletviewer'</filename>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA</varname></entry>
	      <entry>所用 <command>java</command> 执行文件的完整路径。
		您应使用它来执行 Java 程序 (例如
		<filename>'/usr/local/diablo-jdk1.6.0/bin/java'</filename>)。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVADOC</varname></entry>
	      <entry>所用 <command>javadoc</command> 工具的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVAH</varname></entry>
	      <entry>所用 <command>javah</command> 程序的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVAP</varname></entry>
	      <entry>所用 <command>javap</command> 程序的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_KEYTOOL</varname></entry>
	      <entry>所用 <command>keytool</command> 工具的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_N2A</varname></entry>
	      <entry>所用 <command>native2ascii</command> 工具的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_POLICYTOOL</varname></entry>
	      <entry>所用 <command>policytool</command> 程序的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_SERIALVER</varname></entry>
	      <entry>所用 <command>serialver</command> 程序的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>RMIC</varname></entry>
	      <entry>所用 RMI 桩/架 生成器，
		<command>rmic</command> 的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>RMIREGISTRY</varname></entry>
	      <entry>所用 RMI 注册表程序，
		<command>rmiregistry</command> 的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>RMID</varname></entry>
	      <entry>所用 RMI 服务程序 <command>rmid</command> 的完整路径。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVA_CLASSES</varname></entry>
	      <entry>所用 JDK 类文件目录的完整路径。
		<filename>${JAVA_HOME}/jre/lib/rt.jar</filename>。</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>您可以使用 <literal>java-debug</literal> make target
	以获取用于调试 port 的信息。 大多数前述变量的值皆会予以呈现。</para>

      <para>此外， 还会定义下述常量， 以确保所有的
	Java port 均以一致之方式安装：</para>

      <table frame="none">
	<title>为使用 Java 的 port 定义的常量</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>常量</entry>
	      <entry>值</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><varname>JAVASHAREDIR</varname></entry>
	      <entry>所有 Java 相关资料的安装根目录。
		默认值： <filename>${PREFIX}/share/java</filename>.
	      </entry>
	    </row>

	    <row>
	      <entry><varname>JAVAJARDIR</varname></entry>
	      <entry>用以安装 JAR 文件的目录。 默认值：
		<filename>${JAVASHAREDIR}/classes</filename>。</entry>
	    </row>

	    <row>
	      <entry><varname>JAVALIBDIR</varname></entry>
	      <entry>其它 port 安装的 JAR 文件所在的目录。 默认值：
		<filename>${LOCALBASE}/share/java/classes</filename>。</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>相关的项也会定义在
	<varname>PLIST_SUB</varname> (在
	<xref linkend="plist-sub"/> 中进行介绍) 和
	<varname>SUB_LIST</varname> 中。</para>

      </sect2>

      <sect2 xml:id="java-building-with-ant">
	<title>采用 Ant 进行联编</title>

	<para>如果 port 采用 Apache Ant 进行联编，
	  则需要定义 <varname>USE_ANT</varname>。 如是， 则 Ant
	  将作为 子-make 命令来使用。 如果 port 未定义 <literal>do-build</literal>
	  target， 则将默认依 <varname>MAKE_ENV</varname>、
	  <varname>MAKE_ARGS</varname> 和 <varname>ALL_TARGET</varname>。
	  的设置执行 Ant。 这类似于 <xref linkend="building"/> 中介绍的关于
	  <varname>USE_GMAKE</varname> 的机制。</para>

      </sect2>

      <sect2 xml:id="java-best-practices">
	<title>最佳实践</title>

	<para>如果您正移植某个 Java 库， 您的 port 应把
	  JAR 文件安装到 <filename>${JAVAJARDIR}</filename>， 而其它文件则应放在
	  <filename>${JAVASHAREDIR}/${PORTNAME}</filename> 下
	  (除了文档， 参见下文)。 要减少打包文件的尺寸，
	  您可以直接在 <filename>Makefile</filename> 中引用这些 JAR 文件，
	  具体做法是使用下面的语句 (此处的 <filename>myport.jar</filename>
	  是作为 port 一部分安装的 JAR 文件的名字)：</para>

	<programlisting>PLIST_FILES+= %%JAVAJARDIR%%/myport.jar</programlisting>

	<para>移植 Java 应用程序时， port 通常会希望将所有文件安装到同一目录
	  (包括其依赖的 JAR)。 这时强烈建议使用
	  <filename>${JAVASHAREDIR}/${PORTNAME}</filename>。
	  移植软件的开发人员， 可以自行决定是否将所依赖的其它 JAR 安装到此目录，
	  或直接使用已经装好的那些
	  (来自 <filename>${JAVAJARDIR}</filename>)。</para>

	<para>无论您正制作哪一类的 port (库或者应用程序)，
	  附加的文档都应安装到和其它 port
	  <link linkend="install-documentation">同样的位置</link>。
	  已经知道， JavaDoc 会根据 JDK 版本的不同而产生不同的文件。
	  对于那些不打算强制使用某一特定版本 JDK 的 port 而言，
	  这无疑提高了制作装箱单
	  (<filename>pkg-plist</filename>) 的难度。 这是为什么强烈建议使用
	  <varname>PORTDOCS</varname> 宏的原因。 更进一步， 即使您能够预测
	  <command>javadoc</command> 将要生成的文件， 所需的
	  <filename>pkg-plist</filename> 的尺寸， 也是鼓吹使用
	  <varname>PORTDOCS</varname> 的一大理由。</para>

	<para><varname>DATADIR</varname> 的默认值是
	  <filename>${PREFIX}/share/${PORTNAME}</filename>。
	  对 Java port 而言将 <varname>DATADIR</varname> 改为
	  <filename>${JAVASHAREDIR}/${PORTNAME}</filename> 是一个好主意。
	  当然， <varname>DATADIR</varname> 会自动加到
	  <varname>PLIST_SUB</varname> 中 (在 <xref linkend="plist-sub"/> 有所介绍) 因此您可以在
	  <filename>pkg-plist</filename> 中直接使用
	  <literal>%%DATADIR%%</literal>。</para>

	<para>撰写本文时， 对是应该从源代码联编， 还是直接安装预编译的
	  Java ports 安装包并没有明确的规定。 尽管如此， <link xlink:href="http://www.freebsd.org/java/">&os; Java Project</link>
	  的开发人员仍鼓励移植软件的开发者在不麻烦的情况下尽可能从源代码完成联编。</para>

	<para>本节中所介绍的全部特性， 均是在 <filename>bsd.java.mk</filename>
	  中实现的。 如果您感觉自己的 port 需要更为复杂的 Java 支持，
	  请首先参阅 <link xlink:href="http://www.freebsd.org/cgi/cvsweb.cgi/ports/Mk/bsd.java.mk">
	  bsd.java.mk CVS 日志</link>， 因为通常撰文介绍最新特性需要一些时间。
	  此外， 如果您认为所缺少的支持对许多其它 Java port 亦属有益，
	  请在 &a.java; 对其进行讨论。</para>

	<para>在 PR 中的 <literal>java</literal> 类别，
	  主要是用于 &os; Java project 移植 JDK 本身之用。
	  因而， 提交您的 Java port 时， 应归入
	  <literal>ports</literal> 类别， 除非您正尝试解决的问题是 JDK
	  实现本身或 <filename>bsd.java.mk</filename> 的。</para>

	<para>类似地， 您应参考 <xref linkend="makefile-categories"/> 中所详述的关于
	  <varname>CATEGORIES</varname> 在 Java port 中的使用规则。</para>

      </sect2>

    </sect1>

    <sect1 xml:id="using-php">
      <title>Web 应用， Apache 和 PHP</title>

      <sect2 xml:id="using-apache">
	<title>Apache</title>

	<table frame="none">
	  <title>用到 Apache 的 port 可以使用的变量</title>

	  <tgroup cols="2">
	    <tbody>

	      <row>
		<entry><varname>USE_APACHE</varname></entry>

		<entry>此 port 需要 Apache。 可用的值：
		  <literal>yes</literal> (任意可用版本)、
		  <literal>1.3</literal>、 <literal>2.0</literal>、
		  <literal>2.2</literal>、 <literal>2.0+</literal>、
		  等等。 默认依赖的版本是
		  <literal>1.3</literal>。</entry>
	      </row>

	      <row>
		<entry><varname>WITH_APACHE2</varname></entry>

		<entry>此 port 需要 Apache 2.0。 如果没有这个变量，
		  则 port 将依赖 Apache 1.3。 这一变量目前已经过时，
		  因而不应继续使用。</entry>
	      </row>

	      <row>
		<entry><varname>APXS</varname></entry>

		<entry>到 <command>apxs</command> 可执行文件的完整路径。
		  您可以在 port 中替代该值。</entry>
	      </row>

	      <row>
		<entry><varname>HTTPD</varname></entry>

		<entry>到 <command>httpd</command> 可执行文件的完整路径。
		  您可以在 port 中替代该值。</entry>
	      </row>

	      <row>
		<entry><varname>APACHE_VERSION</varname></entry>

		<entry>目前系统中安装的 Apache 版本 (只读变量)。
		  这一变量只有在引用了 <filename>bsd.port.pre.mk</filename>
		  之后才能使用， 其可能的值为：
		  <literal>13</literal>、 <literal>20</literal>、
		  <literal>22</literal>。</entry>
	      </row>

	      <row>
		<entry><varname>APACHEMODDIR</varname></entry>

		<entry>Apache 模块所在的文件夹。 在 pkg-plist 中，
		  这一变量会自动展开。</entry>
	      </row>

	      <row>
		<entry><varname>APACHEINCLUDEDIR</varname></entry>

		<entry>Apache 头文件所在的文件夹。 在 pkg-plist 中，
		  这一变量会自动展开。</entry>
	      </row>

	      <row>
		<entry><varname>APACHEETCDIR</varname></entry>

		<entry>Apache 配置文件所在的文件夹。 在 pkg-plist 中，
		  这一变量会自动展开。</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

	<table frame="none">
	  <title>在移植 Apache 模块时比较有用的变量</title>

	  <tgroup cols="2">
	    <tbody>

	      <row>
		<entry><varname>MODULENAME</varname></entry>

		<entry>模块的名称。 默认值为
		  <varname>PORTNAME</varname>。 例如：
		  <literal>mod_hello</literal></entry>
	      </row>

	      <row>
		<entry><varname>SHORTMODNAME</varname></entry>

		<entry>模块的简略名字。 默认情况下会自动根据
		  <varname>MODULENAME</varname> 计算， 但您也可以自行设置值来替代它。
		  例如： <literal>hello</literal></entry>
	      </row>

	      <row>
		<entry><varname>AP_FAST_BUILD</varname></entry>

		<entry>使用 <command>apxs</command> 来编译和安装模块。</entry>
	      </row>

	      <row>
		<entry><varname>AP_GENPLIST</varname></entry>

		<entry>同时自动创建
		  <filename>pkg-plist</filename>。</entry>
	      </row>

	      <row>
		<entry><varname>AP_INC</varname></entry>

		<entry>在编译过程中， 将指定的目录加入到搜索头文件的目录中。</entry>
	      </row>

	      <row>
		<entry><varname>AP_LIB</varname></entry>

		<entry>在编译过程中， 将指定的目录加入到搜索函数库的目录中。</entry>
	      </row>

	      <row>
		<entry><varname>AP_EXTRAS</varname></entry>

		<entry>传递给
		  <command>apxs</command> 的额外参数。</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>
      </sect2>

      <sect2 xml:id="web-apps">
	<title>Web 应用</title>

	<para>Web 应用程序应安装到
	  <filename>PREFIX/www/应用程序的名字</filename>。
	  为方便起见， 这个路径在
	  <filename>Makefile</filename> 和 <filename>pkg-plist</filename>
	  均以 <varname>WWWDIR</varname> 变量的形式提供。 在
	  <filename>Makefile</filename> 中可以使用
	  <varname>WWWDIR_REL</varname> 来表示包含了
	  <varname>PREFIX</varname> 的该变量值。</para>

	<para>web 服务器进程所用的用户和用户组， 分别以
	  <varname>WWWOWN</varname> 和 <varname>WWWGRP</varname> 变量的形式提供，
	  如果您需要修改某些文件的属主的话。 这两个变量的默认值均为 <literal>www</literal>。
	  如果您的 port 希望使用其他值， 请使用 <literal>WWWOWN?= myuser</literal> 这种写法，
	  以便让用户能够更容易地修改它。</para>

	<para>除非您的 port 必需使用 Apache， 否则不要将其写入依赖关系。
	  请尊重运行您的应用程序的用户选择 Apache 以外的其他 web 服务器的需求。</para>

      </sect2>

      <sect2 xml:id="php-variables">
	<title>PHP</title>

	<table frame="none">
	  <title>用到 PHP 的 port 中可以使用的变量</title>

	  <tgroup cols="2">
	    <tbody>
	      <row>
		<entry><varname>USE_PHP</varname></entry>

		<entry>此 port 需要 PHP。 取值为 <literal>yes</literal>
		  将把 PHP 加入依赖关系。 此外， 还可以在此指定将所需要的 PHP
		  扩展模块。 例如： <literal>pcre xml
		  gettext</literal></entry>
	      </row>

	      <row>
		<entry><varname>DEFAULT_PHP_VER</varname></entry>

		<entry>选择在没有安装 PHP 时自动安装的 PHP 主版本。 默认是
		  <literal>4</literal>。 可选 <literal>4</literal>、
		  <literal>5</literal> 之一。</entry>
	      </row>

	      <row>
		<entry><varname>IGNORE_WITH_PHP</varname></entry>

		<entry>此 port 无法与给定版本的 PHP 一同工作。
		  可选值为 <literal>4</literal>、
		  <literal>5</literal> 之一。</entry>
	      </row>

	      <row>
		<entry><varname>USE_PHPIZE</varname></entry>

		<entry>此 port 将作为 PHP 扩展模块进行联编。</entry>
	      </row>

	      <row>
		<entry><varname>USE_PHPEXT</varname></entry>

		<entry>此 port 将作为 PHP 扩展，
		  且需要作为扩展模块注册。</entry>
	      </row>

	      <row>
		<entry><varname>USE_PHP_BUILD</varname></entry>

		<entry>联编依赖于 PHP。</entry>
	      </row>

	      <row>
		<entry><varname>WANT_PHP_CLI</varname></entry>

		<entry>希望使用 CLI (命令行) 版本的 PHP。</entry>
	      </row>

	      <row>
		<entry><varname>WANT_PHP_CGI</varname></entry>

		<entry>希望使用 CGI 版本的 PHP。</entry>
	      </row>

	      <row>
		<entry><varname>WANT_PHP_MOD</varname></entry>

		<entry>希望使用 Apache 模块版本的 PHP。</entry>
	      </row>

	      <row>
		<entry><varname>WANT_PHP_SCR</varname></entry>

		<entry>希望使用 CLI 或 CGI 版本的 PHP。</entry>
	      </row>

	      <row>
		<entry><varname>WANT_PHP_WEB</varname></entry>

		<entry>希望使用 Apache 模块或 CGI 版本的 PHP。</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

      </sect2>

      <sect2>
	<title>PEAR 模块</title>

	<para>移植 PEAR 模块的过程非常简单。</para>

	<para>使用 <varname>FILES</varname>、
	  <varname>TESTS</varname>、 <varname>DATA</varname>、
	  <varname>SQLS</varname>、 <varname>SCRIPTFILES</varname>、
	  <varname>DOCS</varname> 以及 <varname>EXAMPLES</varname>
	  这些变量来指明您希望安装的文件。
	  所有这里列出的文件都会自动安装到合适的位置， 并加入
	  <filename>pkg-plist</filename>。</para>

	<para>在 <filename>Makefile</filename> 文件的最后一行引入
	  <filename>&dollar;{PORTSDIR}/devel/pear/bsd.pear.mk</filename>。</para>

	<example xml:id="pear-makefile">
	  <title>用于 PEAR 类的 Makefile 例子</title>
	  <programlisting>PORTNAME=       Date
PORTVERSION=    1.4.3
CATEGORIES=     devel www pear

MAINTAINER=     example@domain.com
COMMENT=        PEAR Date and Time Zone Classes

BUILD_DEPENDS=  ${PEARDIR}/PEAR.php:${PORTSDIR}/devel/pear-PEAR
RUN_DEPENDS=    ${BUILD_DEPENDS}

FILES=          Date.php Date/Calc.php Date/Human.php Date/Span.php     \
                Date/TimeZone.php
TESTS=          test_calc.php test_date_methods_span.php testunit.php   \
                testunit_date.php testunit_date_span.php wknotest.txt   \
                bug674.php bug727_1.php bug727_2.php bug727_3.php       \
                bug727_4.php bug967.php weeksinmonth_4_monday.txt       \
                weeksinmonth_4_sunday.txt weeksinmonth_rdm_monday.txt   \
                weeksinmonth_rdm_sunday.txt
DOCS=           TODO
_DOCSDIR=       .

.include &lt;bsd.port.pre.mk&gt;
.include "&dollar;{PORTSDIR}/devel/pear/bsd.pear.mk"
.include &lt;bsd.port.post.mk&gt;</programlisting>

	</example>

      </sect2>

    </sect1>

    <sect1 xml:id="using-python">
      <title>使用 Python</title>

      <para>Ports 套件支持同时并行安装多个不同的
	Python 版本。 Ports 应确保能够根据用户配置的
	<varname>PYTHON_VERSION</varname> 变量使用正确的
	<command>python</command> 解释器。 一般说来，
	这是通过将脚本中的 <command>python</command> 路径名替换为
	<varname>PYTHON_CMD</varname> 变量的值来实现的。</para>

      <para>在 <varname>PYTHON_SITELIBDIR</varname>
	下安装文件的 ports 应在包名上使用 <literal>pyXY-</literal> 前缀，
	以便明示它们将会配合哪个 Python 版本使用。</para>

      <programlisting>PKGNAMEPREFIX= ${PYTHON_PKGNAMEPREFIX}</programlisting>

      <table frame="none">
	<title>对用到 Python 的 port 最有用的一些变量</title>

	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry><varname>USE_PYTHON</varname></entry>

	      <entry>此 port 需要 Python。 可以用
		<literal>2.3+</literal> 这样的形式来指定所希望的版本。
		除此之外， 也可以用横线来分隔两个版本号，
		以表示某个范围的版本， 例如： <literal>2.1-2.3</literal></entry>
	    </row>

	    <row>
	      <entry><varname>USE_PYDISTUTILS</varname></entry>

	      <entry>使用 Python distutils 来完成配置、 编译和安装。 对包含
		<filename>setup.py</filename> 的 port 而言这是必需的。
		它会自动覆盖默认的
		<buildtarget>do-build</buildtarget> 以及
		<buildtarget>do-install</buildtarget> 这两个 target。 如未定义
		<varname>GNU_CONFIGURE</varname>，
		它还会改变 <buildtarget>do-configure</buildtarget>。</entry>
	    </row>

	    <row>
	      <entry><varname>PYTHON_PKGNAMEPREFIX</varname></entry>

	      <entry>作为 <varname>PKGNAMEPREFIX</varname> 来区分不同 Python
		版本的 package。 例如： <literal>py24-</literal></entry>
	    </row>

	    <row>
	      <entry><varname>PYTHON_SITELIBDIR</varname></entry>

	      <entry>全站 package 所在的目录， 它包括了 Python
		的安装目录 (通常是 <varname>LOCALBASE</varname>)。
		在安装 Python 模块时， <varname>PYTHON_SITELIBDIR</varname>
		变量会非常有用。</entry>
	    </row>

	    <row>
	      <entry><varname>PYTHONPREFIX_SITELIBDIR</varname></entry>

	      <entry>去掉了 PREFIX 部分的 PYTHON_SITELIBDIR。 应尽可能在
		<filename>pkg-plist</filename> 中使用
		<literal>%%PYTHON_SITELIBDIR%%</literal>。
		<literal>%%PYTHON_SITELIBDIR%%</literal> 的默认值是
		<literal>lib/python%%PYTHON_VERSION%%/site-packages</literal></entry>
	    </row>

	    <row>
	      <entry><varname>PYTHON_CMD</varname></entry>

	      <entry>Python 解释器的命令行， 包括版本号。</entry>
	    </row>

	    <row>
	      <entry><varname>PYNUMERIC</varname></entry>

	      <entry>将数值处理扩展模块加入依赖关系。</entry>
	    </row>

	    <row>
	      <entry><varname>PYNUMPY</varname></entry>
	      <entry>对新增的数值计算扩展, numpy的依赖。
	      (PYNUMERIC 目前已被作者淘汰)。</entry>
	    </row>

	    <row>
	      <entry><varname>PYXML</varname></entry>

	      <entry>将 XML 扩展模块加入依赖关系。 (对于
	      Python 2.0 和更高版本不再需要， 因为它已经成为了标准组件)。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_TWISTED</varname></entry>

	      <entry>将 twistedCore 加入依赖关系。
		也可以用这个变量指定所需的组件，
		例如： <literal>web lore pair
		flow</literal></entry>
	    </row>

	    <row>
	      <entry><varname>USE_ZOPE</varname></entry>

	      <entry>加入对 Zope， 一种 web 应用平台的依赖。
		这会把 Python 依赖改为 Python 2.3。 此外
		<varname>ZOPEBASEDIR</varname> 也会自动设为
		Zope 安装目录的位置。</entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <para>完整的可用变量列表， 可以在
	<filename>/usr/ports/Mk/bsd.python.mk</filename>
	中找到。</para>

    </sect1>

    <sect1 xml:id="using-tcl">
      <title>使用 <application>Tcl/Tk</application></title>

      <para>Ports 套件支持同时安装多个 <application>Tcl/Tk</application> 版本。 Ports
	应至少支持默认的
	<application>Tcl/Tk</application> 版本， 以及通过
	<varname>USE_TCL</varname> 和 <varname>USE_TK</varname>
	变量指定的更高版本。 希望使用的
	<command>tcl</command> 版本， 则可以通过 <varname>WITH_TCL_VER</varname>
	变量来使用。</para>

      <table frame="none">
	<title>用到
	  <application>Tcl/Tk</application> 的 port 可以使用的变量</title>

	<tgroup cols="2">
	  <tbody>
	    <row>
	      <entry><varname>USE_TCL</varname></entry>

	      <entry>表示 port 依赖于
		<application>Tcl</application> 函数库 (不是 shell)。
		可以指定需要的最低版本， 例如 84+。 不支持的版本，
		可以在 <varname>INVALID_TCL_VER</varname>
		变量中逐个指定。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_TCL_BUILD</varname></entry>

	      <entry>表示 port 在联编过程中需要使用 <application>Tcl</application>。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_TCL_WRAPPER</varname></entry>

	      <entry>需要使用
		<application>Tcl</application> shell 而不需要特定版本的
		<literal>tclsh</literal> 的 port 可以使用这个新变量。
		系统中会安装 <literal>tclsh</literal> wrapper，
		用户则可以指定所希望的 <command>tcl</command> shell。</entry>
	    </row>

	    <row>
	      <entry><varname>WITH_TCL_VER</varname></entry>

	      <entry>由用户定义的、 希望使用的
		<application>Tcl</application> 版本。</entry>
	    </row>

	    <row>
	      <entry><varname><replaceable>UNIQUENAME</replaceable>_WITH_TCL_VER</varname></entry>

	      <entry>和 <varname>WITH_TCL_VER</varname> 类似，
		但是针对 port 指定的。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_TCL_THREADS</varname></entry>

	      <entry>需要包含线程支持的
		<application>Tcl/Tk</application>。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_TK</varname></entry>

	      <entry>表示 port 依赖于
		<application>Tk</application> 库 (不是 wish
		shell)。 它同时会隐含将 <varname>USE_TCL</varname> 设置为相同的值。
		更多的描述， 请参考
		<varname>USE_TCL</varname> 变量。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_TK_BUILD</varname></entry>

	      <entry>与 <varname>USE_TCL_BUILD</varname>
		变量表达类似的含义。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_TK_WRAPPER</varname></entry>

	      <entry>与 <varname>USE_TCL_WRAPPER</varname>
		变量表达类似的含义。</entry>
	    </row>

	    <row>
	      <entry><varname>WITH_TK_VER</varname></entry>

	      <entry>表达与 <varname>WITH_TCL_VER</varname>
		变量类似的含义， 它同时会隐含将 <varname>WITH_TCL_VER</varname>
		设置为相同的值。</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>可用的变量的完整列表， 可以在
	<filename>/usr/ports/Mk/bsd.tcl.mk</filename> 中找到。</para>
    </sect1>

    <sect1 xml:id="using-emacs">
      <title>使用 Emacs</title>

      <para>本节尚有待撰写。</para>
    </sect1>

    <sect1 xml:id="using-ruby">
      <title>使用 Ruby</title>

      <table frame="none">
	<title>使用 Ruby 的 port 可以使用的变量</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>变量</entry>
	      <entry>说明</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry><varname>USE_RUBY</varname></entry>

	      <entry>此 port 需要 Ruby。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_RUBY_EXTCONF</varname></entry>

	      <entry>此 port 使用 <filename>extconf.rb</filename>
		来完成配置。</entry>
	    </row>

	    <row>
	      <entry><varname>USE_RUBY_SETUP</varname></entry>

	      <entry>此 port 使用 <filename>setup.rb</filename>
		来完成配置。</entry>
	    </row>

	    <row>
	      <entry><varname>RUBY_SETUP</varname></entry>

	      <entry>将此变量名设置为所用的
		<filename>setup.rb</filename> 的文件名。 通常会是
		<filename>install.rb</filename>。</entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <para>下表展示了 ports 系统提供给 port 作者的一些变量。
	您应使用这些变量， 以便把文件装到合适的位置。 请尽可能多地在
	<filename>pkg-plist</filename> 中使用它们。 这些变量不应在 port
	中重新定义。</para>

      <table frame="none">
	<title>使用 Ruby 的 port 中的一些可用的只读变量</title>

	<tgroup cols="3">
	  <thead>
	    <row>
	      <entry>变量</entry>
	      <entry>说明</entry>
	      <entry>示范值</entry>
	    </row>
	  </thead>
	  <tbody>

	    <row>
	      <entry><varname>RUBY_PKGNAMEPREFIX</varname></entry>

	      <entry>作为 <varname>PKGNAMEPREFIX</varname> 以区分用于不同
		Ruby 版本的 package。</entry>

	      <entry><literal>ruby18-</literal></entry>
	    </row>

	    <row>
	      <entry><varname>RUBY_VERSION</varname></entry>

	      <entry><literal>x.y.z</literal> 形式的完整 ruby 版本。</entry>

	      <entry><literal>1.8.2</literal></entry>
	    </row>

	    <row>
	      <entry><varname>RUBY_SITELIBDIR</varname></entry>

	      <entry>平台无关库的安装路径。</entry>

	      <entry><literal>/usr/local/lib/ruby/site_ruby/1.8</literal></entry>
	    </row>

	    <row>
	      <entry><varname>RUBY_SITEARCHLIBDIR</varname></entry>

	      <entry>平台相关的库的安装路径。</entry>

	      <entry><literal>/usr/local/lib/ruby/site_ruby/1.8/amd64-freebsd6</literal></entry>
	    </row>

	    <row>
	      <entry><varname>RUBY_MODDOCDIR</varname></entry>

	      <entry>模块文档的安装路径。</entry>

	      <entry><literal>/usr/local/share/doc/ruby18/patsy</literal></entry>
	    </row>

	    <row>
	      <entry><varname>RUBY_MODEXAMPLESDIR</varname></entry>

	      <entry>模块用例的安装路径。</entry>

	      <entry><literal>/usr/local/share/examples/ruby18/patsy</literal></entry>
	    </row>

	  </tbody>
	</tgroup>
      </table>

      <para>可用变量的完整列表， 可以在
	<filename>/usr/ports/Mk/bsd.ruby.mk</filename> 中找到。</para>

    </sect1>

    <sect1 xml:id="using-sdl">
      <title>使用 SDL</title>

      <para>变量 <varname>USE_SDL</varname> 可以用于自动配置 port
	的依赖关系， 以适应使用类似
	<package>devel/sdl12</package> 和
	<package>x11-toolkits/sdl_gui</package>
	这些依赖 SDL 的库的情形。</para>

      <para>目前系统能够识别下列 SDL 库：</para>

      <itemizedlist>
	<listitem>
	  <para>sdl: <package>devel/sdl12</package></para>
	</listitem>

	<listitem>
	  <para>gfx: <package>graphics/sdl_gfx</package></para>
	</listitem>

	<listitem>
	  <para>gui: <package>x11-toolkits/sdl_gui</package></para>
	</listitem>

	<listitem>
	  <para>image: <package>graphics/sdl_image</package></para>
	</listitem>

	<listitem>
	  <para>ldbad: <package>devel/sdl_ldbad</package></para>
	</listitem>

	<listitem>
	  <para>mixer: <package>audio/sdl_mixer</package></para>
	</listitem>

	<listitem>
	  <para>mm: <package>devel/sdlmm</package></para>
	</listitem>

	<listitem>
	  <para>net: <package>net/sdl_net</package></para>
	</listitem>

	<listitem>
	  <para>sound: <package>audio/sdl_sound</package></para>
	</listitem>

	<listitem>
	  <para>ttf: <package>graphics/sdl_ttf</package></para>
	</listitem>
      </itemizedlist>

      <para>因此， 如果 port 需要依赖
	<package>net/sdl_net</package> 和
	<package>audio/sdl_mixer</package>，
	则对应的写法将是：</para>

      <programlisting>USE_SDL=        net mixer</programlisting>

      <para>同时， <package>net/sdl_net</package> 和
	<package>audio/sdl_mixer</package> 所依赖的
	<package>devel/sdl12</package> 也会被自动地加入。</para>

      <para>加入您使用 <varname>USE_SDL</varname>， 它将自动地：</para>

      <itemizedlist>
	<listitem>
	  <para>将对于 <application>sdl12-config</application> 的依赖关系加入到
	    <varname>BUILD_DEPENDS</varname></para>
	</listitem>

	<listitem>
	  <para>将变量 <varname>SDL_CONFIG</varname> 加入到
	    <varname>CONFIGURE_ENV</varname></para>
	</listitem>

	<listitem>
	  <para>将对所选的库的依赖， 加入到
	    <varname>LIB_DEPENDS</varname></para>
	</listitem>
      </itemizedlist>

      <para>要检查某个特定的 SDL 库是否可用，
	可以通过 <varname>WANT_SDL</varname> 变量来达到目的：</para>

      <programlisting>WANT_SDL=yes

.include &lt;bsd.port.pre.mk&gt;

.if ${HAVE_SDL:Mmixer}!=""
USE_SDL+=   mixer
.endif

.include &lt;bsd.port.post.mk&gt;</programlisting>

    </sect1>

    <sect1 xml:id="using-wx">
      <title>使用 <application>wxWidgets</application></title>

      <para>这一节介绍了在 ports tree 中的
	<application>wxWidgets</application> 库的现状，
	以及它与 ports 系统的集成。</para>

      <sect2 xml:id="wx-introduction">
	<title>介绍</title>

	<para>许多不同版本的
	  <application>wxWidgets</application> 库之间是存在相互冲突的 (它们会安装同名的文件)
	  在 ports 系统中， 这一问题是通过将不同的版本以包含版本号后缀的名字安装来解决的。</para>

	<para>这样做的一个最明显的缺点是， 应用程序必须进行修改， 才能找到所希望的版本。
	  幸运的是， 多数应用程序会调用 <command>wx-config</command> 脚本来确定需要的编译器和连接器选项。
	  这个脚本会随可用的版本不同而有不同的名字。 主要的应用程序都会尊重环境变量的配置，
	  或提供一个 configure 参数， 用以指定调用哪个 <command>wx-config</command>。
	  如果不是这样的话， 就需要对应用程序打补丁了。</para>
      </sect2>

      <sect2 xml:id="wx-version">
	<title>版本的选择</title>

	<para>为了让您的 port 使用指定版本的
	  <application>wxWidgets</application>， 可以定义两个变量 (如果只定义了一个，
	  则另一个会取默认值)：</para>

	<table xml:id="wx-ver-sel-table" frame="none">
	  <title>用于选择 <application>wxWidgets</application>
	    版本的变量</title>

	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>变量</entry>

		<entry>说明</entry>

		<entry>默认值</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>USE_WX</varname></entry>

		<entry>列出这个 port 能使用的版本</entry>

		<entry>全部版本</entry>
	      </row>

	      <row>
		<entry><varname>USE_WX_NOT</varname></entry>

		<entry>列出这个 port 不能使用的版本</entry>

		<entry>无</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>下面是可用的
	  <application>wxWidgets</application> 版本， 以及对应的
	  ports：</para>

	<table frame="none">
	  <title>可用的 <application>wxWidgets</application>
	    versions</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>版本</entry>

		<entry>Port</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>2.4</literal></entry>

		<entry><package>x11-toolkits/wxgtk24</package></entry>
	      </row>

	      <row>
		<entry><literal>2.6</literal></entry>

		<entry><package>x11-toolkits/wxgtk26</package></entry>
	      </row>

	      <row>
		<entry><literal>2.8</literal></entry>

		<entry><package>x11-toolkits/wxgtk28</package></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<note>
	  <para>从 <literal>2.5</literal> 版开始， 也提供了对应的
	    Unicode 版本， 这种版本可以通过 slave port 安装，
	    与普通版本相比， 它会多一个 <literal>-unicode</literal> 后缀，
	    不过这可以通过使用变量来处理 (请参见 <xref linkend="wx-unicode"/>)。</para>
	</note>

	<para>在 <xref linkend="wx-ver-sel-table"/> 中的变量，
	  可以设为下列值或由空格分隔的组合：</para>

	<table frame="none">
	  <title><application>wxWidgets</application> 版本</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>说明</entry>

		<entry>例子</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry>单个版本</entry>

		<entry><literal>2.4</literal></entry>
	      </row>

	      <row>
		<entry>某版本以上版本</entry>

		<entry><literal>2.4+</literal></entry>
	      </row>

	      <row>
		<entry>某版本以下版本</entry>

		<entry><literal>2.6-</literal></entry>
	      </row>

	      <row>
		<entry>某段版本 (版本号较小的必须在前)</entry>

		<entry><literal>2.4-2.6</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>除此之外， 还有一些用以从可用的本那本中选择所希望的版本的变量。
	  这种变量也可以设为一组版本， 而靠前的版本的优先级更高。</para>

	<table frame="none">
	  <title>用于选择希望的版本的
	    <application>wxWidgets</application> versions</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>变量名</entry>

		<entry>用于</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>WANT_WX_VER</varname></entry>

		<entry>port</entry>
	      </row>

	      <row>
		<entry><varname>WITH_WX_VER</varname></entry>

		<entry>用户</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </sect2>

      <sect2 xml:id="wx-components">
	<title>选择组件</title>

	<para>也有一些其他应用， 尽管它们本身并不是
	  <application>wxWidgets</application> 库， 但却与之相关。
	  这些应用程序可以在
	  <varname>WX_COMPS</varname> 变量中使用， 以下是可用的组件：</para>

	<table frame="none">
	  <title>可用的 <application>wxWidgets</application>
	    组件</title>

	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>名称</entry>

		<entry>说明</entry>

		<entry>版本限制</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>wx</literal></entry>

		<entry>主库</entry>

		<entry>无</entry>
	      </row>

	      <row>
		<entry><literal>contrib</literal></entry>

		<entry>第三方库</entry>

		<entry><literal>无</literal></entry>
	      </row>

	      <row>
		<entry><literal>python</literal></entry>

		<entry><application>wxPython</application>
		  (<application>Python</application> 绑定)</entry>

		<entry><literal>2.4-2.6</literal></entry>
	      </row>

	      <row>
		<entry><literal>mozilla</literal></entry>

		<entry><application>wxMozilla</application></entry>

		<entry><literal>2.4</literal></entry>
	      </row>

	      <row>
		<entry><literal>svg</literal></entry>

		<entry><application>wxSVG</application></entry>

		<entry><literal>2.6</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>您可以为每个依赖的组件， 通过冒号分隔的后缀指定其类型。
	  如果没有指定， 则会使用默认的依赖类型 (参见 <xref linkend="wx-def-dep-types"/>)。
	  下面是可用的类型：</para>

	<table frame="none">
	  <title>可用的 <application>wxWidgets</application> 依赖类型</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>名称</entry>

		<entry>说明</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>build</literal></entry>

		<entry>联编时需要该组件， 相当于
		  <varname>BUILD_DEPENDS</varname></entry>
	      </row>

	      <row>
		<entry><literal>run</literal></entry>

		<entry>运行时需要该组件， 相当于
		  <varname>RUN_DEPENDS</varname></entry>
	      </row>

	      <row>
		<entry><literal>lib</literal></entry>

		<entry>联编和运行时均需要该组件，
		  相当于 <varname>LIB_DEPENDS</varname></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>组件的默认依赖关系类型， 如下表所示：</para>

	<table xml:id="wx-def-dep-types" frame="none">
	  <title>默认的 <application>wxWidgets</application> 依赖关系类型</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>组件</entry>

		<entry>依赖关系类型</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>wx</literal></entry>

		<entry><literal>lib</literal></entry>
	      </row>

	      <row>
		<entry><literal>contrib</literal></entry>

		<entry><literal>lib</literal></entry>
	      </row>

	      <row>
		<entry><literal>python</literal></entry>

		<entry><literal>run</literal></entry>
	      </row>

	      <row>
		<entry><literal>mozilla</literal></entry>

		<entry><literal>lib</literal></entry>
	      </row>

	      <row>
		<entry><literal>svg</literal></entry>

		<entry><literal>lib</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<example xml:id="wx-components-example">
	  <title>选择 <application>wxWidgets</application>
	    组件</title>

	  <para>下面的片段展示了使用
	    <application>wxWidgets</application> 版本
	    <literal>2.4</literal> 及第三方库的方法。</para>

	  <programlisting>USE_WX=       2.4
WX_COMPS=     wx contrib</programlisting>
	</example>
      </sect2>
      <sect2 xml:id="wx-unicode">
	<title>Unicode</title>

	<para><application>wxWidgets</application> 库从其 <literal>2.5</literal>
	  版开始支持 Unicode 了。 在 ports 系统中， 这两种版本均有提供，
	  并可以通过下列变量来选择：</para>

	<table xml:id="wx-unicode-var-table" frame="none">
	  <title>用以在 Unicode 版本的
	    <application>wxWidgets</application>
	    的变量</title>

	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>变量</entry>

		<entry>说明</entry>

		<entry>作用</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>WX_UNICODE</varname></entry>

		<entry>该 port <emphasis>只能</emphasis> 配合
		  Unicode 版本使用</entry>

		<entry>port</entry>
	      </row>

	      <row>
		<entry><varname>WANT_UNICODE</varname></entry>

		<entry>port 能够与两种版本配合使用， 但希望使用
		  Unicode 版本</entry>

		<entry>port</entry>
	      </row>

	      <row>
		<entry><varname>WITH_UNICODE</varname></entry>

		<entry>令 port 使用 Unicode 版本</entry>

		<entry>用户</entry>
	      </row>

	      <row>
		<entry><varname>WITHOUT_UNICODE</varname></entry>

		<entry>令 port 使用普通版本，
		  如果支持的话 (即未定义 <varname>WX_UNICODE</varname>)</entry>

		<entry>用户</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<warning>
	  <para>如果 port 同时支持 Unicode 和普通版本，
	    请不要使用 <varname>WX_UNICODE</varname>。 如果希望默认启用
	    Unicode， 应定义 <varname>WANT_UNICODE</varname>。</para>
	</warning>
      </sect2>

      <sect2 xml:id="wx-version-detection">
	<title>检测已安装的版本</title>

	<para>要检测系统中安装的版本， 就需要定义
	  <varname>WANT_WX</varname>。 如果没有将其设置为特定的版本，
	  则组件将包含版本后缀。
	  <varname>HAVE_WX</varname> 变量在检测完成后会自动填入内容。</para>

	<example xml:id="wx-ver-det-example">
	  <title>检测已安装的 <application>wxWidgets</application>
	    版本和组件</title>

	  <para>下面的片段可以在安装
	    <application>wxWidgets</application> 的系统中令 port 使用它，
	    反之则作为一项选项提供。</para>

	  <programlisting>WANT_WX=        yes

.include &lt;bsd.port.pre.mk&gt;

.if defined(WITH_WX) || ${HAVE_WX:Mwx-2.4} != ""
USE_WX=         2.4
CONFIGURE_ARGS+=--enable-wx
.endif</programlisting>

	  <para>下面的片段在系统中有安装过时启用
	    <application>wxPython</application> 支持，
	    或在没有安装时作为选项提供； 对
	    <application>wxWidgets</application> 也是如此办理， 版本皆为
	    <literal>2.6</literal>。</para>

	  <programlisting>USE_WX=         2.6
WX_COMPS=       wx
WANT_WX=        2.6

.include &lt;bsd.port.pre.mk&gt;

.if defined(WITH_WXPYTHON) || ${HAVE_WX:Mpython} != ""
WX_COMPS+=      python
CONFIGURE_ARGS+=--enable-wxpython
.endif</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="wx-defined-variables">
	<title>定义的变量</title>

	<para>以下是一些可以在 port 中使用的变量
	  (这之前需要定义 <xref linkend="wx-ver-sel-table"/> 中的至少一个变量)。</para>

	<table frame="none">
	  <title>为使用
	    <application>wxWidgets</application> 的 port 定义的变量</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>变量名</entry>

		<entry>说明</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>WX_CONFIG</varname></entry>

		<entry>到 <application>wxWidgets</application>
		  <command>wx-config</command> 脚本的路径 (名字会随版本不同而不同)</entry>
	      </row>

	      <row>
		<entry><varname>WXRC_CMD</varname></entry>

		<entry>到 <application>wxWidgets</application>
		  <command>wxrc</command> 程序的路径 (名字会随版本不同而不同)</entry>
	      </row>

	      <row>
		<entry><varname>WX_VERSION</varname></entry>

		<entry>将要用到的 <application>wxWidgets</application> 版本
		  (例如， <literal>2.6</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>WX_UNICODE</varname></entry>

		<entry>如果没有定义， 而将会使用 Unicode 时， 系统将自动定义此变量。</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </sect2>

      <sect2 xml:id="wx-premk">
	<title>在 <filename>bsd.port.pre.mk</filename> 中进行处理</title>

	<para>如果您需要在引用了 <filename>bsd.port.pre.mk</filename> 之后立即对一些变量进行处理，
	  则需要定义 <varname>WX_PREMK</varname>。</para>

	<important>
	  <para>如果定义了 <varname>WX_PREMK</varname>， 则在此
	    <emphasis>之后</emphasis> 定义的依赖关系、 组件和变量将不会生效，
	    您在引用 <filename>bsd.port.pre.mk</filename>
	    之前的 <application>wxWidgets</application> port 变量将直接起作用。</para>
	</important>

	<example xml:id="wx-premk-example">
	  <title>在命令中使用 <application>wxWidgets</application> 变量</title>

	  <para>下面的片段以执行
	    <command>wx-config</command> 脚本来得到完整的版本号，
	    将其赋值到变量中， 并传递给一个程序举例说明了
	    <varname>WX_PREMK</varname> 的用法。</para>

	  <programlisting>USE_WX=         2.4
WX_PREMK=       yes

.include &lt;bsd.port.pre.mk&gt;

.if exists(${WX_CONFIG})
VER_STR!=       ${WX_CONFIG} --release

PLIST_SUB+=     VERSION="${VER_STR}"
.endif</programlisting>
	</example>

	<note>
	  <para>在 target 中的 <application>wxWidgets</application> 变量可以直接使用，
	    而无需 <varname>WX_PREMK</varname> 的参与。</para>
	</note>
      </sect2>

      <sect2 xml:id="wx-additional-config-args">
	<title>额外的 <command>configure</command> 参数</title>

	<para>某些 GNU <command>configure</command> 脚本在只设置了
	  <literal>WX_CONFIG</literal> 环境变量时， 无法自动找到
	  <application>wxWidgets</application>， 而需要使用额外的参数来加以指定。
	  您可以使用 <varname>WX_CONF_ARGS</varname> 变量来给出这些参数。</para>

	<table frame="none">
	  <title>可用于 <varname>WX_CONF_ARGS</varname> 的值</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>可用值</entry>

		<entry>结果</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>absolute</literal></entry>

		<entry><literal>--with-wx-config=${WX_CONFIG}</literal></entry>
	      </row>

	      <row>
		<entry><literal>relative</literal></entry>

		<entry><literal>--with-wx=${LOCALBASE}
		    --with-wx-config=${WX_CONFIG:T}</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
      </sect2>
    </sect1>

    <sect1 xml:id="using-lua">
      <title>使用 <application>Lua</application></title>

      <para>这一节描述了在 ports 系统中的
	<application>Lua</application> 库的现状， 以及它与 ports 系统的集成。</para>

      <sect2 xml:id="lua-introduction">
	<title>介绍</title>

	<para>许多不同版本的 <application>Lua</application>
	  库和相关的解释器之间是相互冲突的 (它们会安装同名的文件)。
	  在 ports 系统中， 这一问题是通过将不同版本的文件以不同的版本号作为后缀名解决的。</para>

	<para>这样做最大的一个问题是， 每个程序都需要进行修改才能找到它所需要的版本。
	  不过， 通过将适当的参数传给编译器和连接器很容易解决这个问题。</para>
      </sect2>

      <sect2 xml:id="lua-version">
	<title>选择版本</title>

	<para>要让您的 port 使用指定版本的
	  <application>Lua</application>，
	  可以定义两个变量的值 (如果只定义了其中的一个， 则另一个会使用默认值)：</para>

	<table xml:id="lua-ver-sel-table" frame="none">
	  <title>用于选择 <application>Lua</application>
	    版本的变量</title>

	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>变量</entry>

		<entry>说明</entry>

		<entry>默认值</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>USE_LUA</varname></entry>

		<entry>port 能够使用的 Lua 版本列表</entry>

		<entry>全部可用版本</entry>
	      </row>

	      <row>
		<entry><varname>USE_LUA_NOT</varname></entry>

		<entry>与 port 不兼容的版本列表</entry>

		<entry>无</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>下面是目前 ports 系统提供的可用
	  <application>Lua</application> 版本和对应的目录：</para>

	<table frame="none">
	  <title>可用的 <application>Lua</application> 版本</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>版本</entry>

		<entry>Port</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>4.0</literal></entry>

		<entry><package>lang/lua4</package></entry>
	      </row>

	      <row>
		<entry><literal>5.0</literal></entry>

		<entry><package>lang/lua50</package></entry>
	      </row>

	      <row>
		<entry><literal>5.1</literal></entry>

		<entry><package>lang/lua</package></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>在 <xref linkend="lua-ver-sel-table"/> 中的变量，
	  可以设置为下面的版本之一， 或用空格分隔的若干版本：</para>

	<table frame="none">
	  <title>指定 <application>Lua</application> 版本</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>说明</entry>

		<entry>例子</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry>一个版本</entry>

		<entry><literal>4.0</literal></entry>
	      </row>

	      <row>
		<entry>某个版本或更高版本</entry>

		<entry><literal>5.0+</literal></entry>
	      </row>

	      <row>
		<entry>不高于某个版本</entry>

		<entry><literal>5.0-</literal></entry>
	      </row>

	      <row>
		<entry>版本范围 (低版本必须在前)</entry>

		<entry><literal>5.0-5.1</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>除此之外， 也有一些用来从可用版本中选择推荐版本的其它变量。 这些变量也可以设置为一组版本，
	  而前面的版本优先级较高。</para>

	<table frame="none">
	  <title>用于选择推荐 <application>Lua</application>
	    版本的变量</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>变量名</entry>

		<entry>用于</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>WANT_LUA_VER</varname></entry>

		<entry>port</entry>
	      </row>

	      <row>
		<entry><varname>WITH_LUA_VER</varname></entry>

		<entry>用户</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<example xml:id="lua-version-example">
	  <title>选择 <application>Lua</application> 版本</title>

	  <para>下面是一个用到
	    <application>Lua</application> 版本 <literal>5.0</literal> 或
	    <literal>5.1</literal>， 并默认使用 <literal>5.0</literal>
	    的 port 的片段。 这个默认值可以通过
	    <varname>WITH_LUA_VER</varname> 来另外指定。</para>

	  <programlisting>USE_LUA=      5.0-5.1
WANT_LUA_VER= 5.0</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="lua-components">
	<title>组件的选择</title>

	<para>也有一些其它的应用， 尽管本身并不是
	  <application>Lua</application> 库， 但却与它们相关。
	  这些应用可以通过 <varname>LUA_COMPS</varname>
	  变量来指定。 可用的组件如下：</para>

	<table frame="none">
	  <title>可用的 <application>Lua</application> 组件</title>

	  <tgroup cols="3">
	    <thead>
	      <row>
		<entry>名字</entry>

		<entry>说明</entry>

		<entry>版本限制</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>lua</literal></entry>

		<entry>主库</entry>

		<entry>无</entry>
	      </row>

	      <row>
		<entry><literal>tolua</literal></entry>

		<entry>用于访问 C/C++ 代码的库</entry>

		<entry><literal>4.0-5.0</literal></entry>
	      </row>

	      <row>
		<entry><literal>ruby</literal></entry>

		<entry>Ruby 绑定</entry>

		<entry><literal>4.0-5.0</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<note>
	  <para>还有一些其它的组件， 但这些组件是由解释器，
	    而不是由应用程序使用的 (也就是不被其它模块使用)。</para>
	</note>

	<para>每个组件的依赖关系类型可以通过手工添加分隔符为冒号的后缀来指定。
	  如果不指定， 则会采用默认类型 (请参见 <xref linkend="lua-def-dep-types"/>)。
	  以下是可用的依赖关系类型：</para>

	<table frame="none">
	  <title>可用的 <application>Lua</application> 依赖关系类型</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>名字</entry>

		<entry>说明</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>build</literal></entry>

		<entry>这个组件是联编过程所必需的， 相当于
		  <varname>BUILD_DEPENDS</varname></entry>
	      </row>

	      <row>
		<entry><literal>run</literal></entry>

		<entry>在运行时需要这个组件， 相当于
		  <varname>RUN_DEPENDS</varname></entry>
	      </row>

	      <row>
		<entry><literal>lib</literal></entry>

		<entry>这个组件在联编和运行时都需要，
		  相当于 <varname>LIB_DEPENDS</varname></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>组件的默认依赖关系类型如下：</para>

	<table xml:id="lua-def-dep-types" frame="none">
	  <title>默认的 <application>Lua</application> 依赖关系类型</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>组件</entry>

		<entry>依赖关系类型</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><literal>lua</literal></entry>

		<entry>对于 <literal>4.0-5.0</literal> 是 <literal>lib</literal>
		  (动态连接) 而对于 <literal>5.1</literal> 则是
		  <literal>build</literal> (静态连接)</entry>
	      </row>

	      <row>
		<entry><literal>tolua</literal></entry>

		<entry><literal>build</literal> (静态连接)</entry>
	      </row>

	      <row>
		<entry><literal>ruby</literal></entry>

		<entry><literal>lib</literal> (动态连接)</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<example xml:id="lua-components-example">
	  <title>选择 <application>Lua</application> 组件</title>

	  <para>下面是一个使用了
	    <application>Lua</application> 版本 <literal>4.0</literal>
	    及其 <application>Ruby</application> 绑定的 port 片段。</para>

	  <programlisting>USE_LUA=      4.0
LUA_COMPS=    lua ruby</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="lua-version-detection">
	<title>检测系统中已安装的版本</title>

	<para>要检测系统中已安装的版本， 您必须定义
	  <varname>WANT_LUA</varname>。 如果没有将其设定为具体的版本，
	  则组件会包含版本后缀。 在检测之后，
	  <varname>HAVE_LUA</varname> 变量将设为检测到的版本。</para>

	<example xml:id="lua-ver-det-example">
	  <title>检测已安装的 <application>Lua</application> 版本和组件</title>

	  <para>下面是一个如果系统中有安装
	    <application>Lua</application> 或选择了选项时使用它的 port 片段。</para>

	  <programlisting>WANT_LUA=       yes

.include &lt;bsd.port.pre.mk&gt;

.if defined(WITH_LUA5) || ${HAVE_LUA:Mlua-5.[01]} != ""
USE_LUA=        5.0-5.1
CONFIGURE_ARGS+=--enable-lua5
.endif</programlisting>

	  <para>下面的这段 port 在系统中已经有安装， 或用户选择了
	    <application>tolua</application> 和
	    <application>Lua</application> 支持时加以安装， 版本均选择
	    <literal>4.0</literal>。</para>

	  <programlisting>USE_LUA=        4.0
LUA_COMPS=      lua
WANT_LUA=       4.0

.include &lt;bsd.port.pre.mk&gt;

.if defined(WITH_TOLUA) || ${HAVE_LUA:Mtolua} != ""
LUA_COMPS+=     tolua
CONFIGURE_ARGS+=--enable-tolua
.endif</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="lua-defined-variables">
	<title>定义的变量</title>

	<para>在 port 中可以使用下列变量 (在定义了
	  <xref linkend="lua-ver-sel-table"/> 中至少一个变量之后)。</para>

	<table frame="none">
	  <title>为用到
	    <application>Lua</application> 的 port 定义的变量</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>变量名</entry>

		<entry>说明</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>LUA_VER</varname></entry>

		<entry>将要使用的 <application>Lua</application> 版本。
		  (例如， <literal>5.1</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>LUA_VER_SH</varname></entry>
		<entry><application>Lua</application> 动态连接库的主版本
		  (例如， <literal>1</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>LUA_VER_STR</varname></entry>

		<entry>不带点的 <application>Lua</application> 版本
		  (例如， <literal>51</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>LUA_PREFIX</varname></entry>

		<entry>安装 <application>Lua</application> (及其组件) 使用的后缀</entry>
	      </row>

	      <row>
		<entry><varname>LUA_SUBDIR</varname></entry>

		<entry>在 <filename>${PREFIX}/bin</filename>、
		  <filename>${PREFIX}/share</filename> 和
		  <filename>${PREFIX}/lib</filename> 中用于安装
		  <application>Lua</application> 的子目录</entry>
	      </row>

	      <row>
		<entry><varname>LUA_INCDIR</varname></entry>

		<entry>用以安装 <application>Lua</application> 和
		  <application>tolua</application> 头文件的目录</entry>
	      </row>

	      <row>
		<entry><varname>LUA_LIBDIR</varname></entry>

		<entry>用以安装 <application>Lua</application> 和
		  <application>tolua</application> 库文件的目录</entry>
	      </row>

	      <row>
		<entry><varname>LUA_MODLIBDIR</varname></entry>

		<entry>用以安装 <application>Lua</application>
		  模块动态连接库 (<filename>.so</filename>) 的目录</entry>
	      </row>

	      <row>
		<entry><varname>LUA_MODSHAREDIR</varname></entry>

		<entry>用以安装 <application>Lua</application>
		  模块 (<filename>.lua</filename>) 的目录</entry>
	      </row>

	      <row>
		<entry><varname>LUA_PKGNAMEPREFIX</varname></entry>

		<entry><application>Lua</application> 模块包的后缀名</entry>
	      </row>

	      <row>
		<entry><varname>LUA_CMD</varname></entry>

		<entry>到 <application>Lua</application>
		  解释器的路径</entry>
	      </row>

	      <row>
		<entry><varname>LUAC_CMD</varname></entry>

		<entry>到 <application>Lua</application>
		  编译器的路径</entry>
	      </row>

	      <row>
		<entry><varname>TOLUA_CMD</varname></entry>

		<entry>到 <application>tolua</application>
		  程序的路径</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<example xml:id="lua-variables-example">
	  <title>告诉 port 到什么地方去找
	    <application>Lua</application></title>

	  <para>下面的 port 片段展示了如何告诉使用的
	    configure 脚本去什么地方查找 <application>Lua</application>
	    的头文件和库文件。</para>

	  <programlisting>
USE_LUA=        4.0
GNU_CONFIGURE=  yes
CONFIGURE_ENV=  CPPFLAGS="-I${LUA_INCDIR}" LDFLAGS="-L${LUA_LIBDIR}"</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="lua-premk">
	<title>在 <filename>bsd.port.pre.mk</filename> 时进行处理</title>

	<para>如果您需要在使用引用 <filename>bsd.port.pre.mk</filename> 之后就得到变量，
	  以便将其用于执行一些命令， 需要定义 <varname>LUA_PREMK</varname>。</para>

	<important>
	  <para>如果您定义了 <varname>LUA_PREMK</varname>， 则在您引用
	    <filename>bsd.port.pre.mk</filename> <emphasis>之后</emphasis>，
	    即使修改了 <application>Lua</application> port 变量，
	    版本和依赖关系也都不会随之发生变化了。</para>
	</important>

	<example xml:id="lua-premk-example">
	  <title>在命令中使用 <application>Lua</application> 变量</title>

	  <para>下面的片段展示了如何利用
	    <varname>LUA_PREMK</varname>， 并运行
	    <application>Lua</application> 解释器得到完整的版本串，
	    将其赋值给一个变量， 并传递给程序。</para>

	  <programlisting>USE_LUA=        5.0
LUA_PREMK=      yes

.include &lt;bsd.port.pre.mk&gt;

.if exists(${LUA_CMD})
VER_STR!=       ${LUA_CMD} -v

CFLAGS+=        -DLUA_VERSION_STRING="${VER_STR}"
.endif</programlisting>
	</example>

	<note>
	  <para>在 target 中的 <application>Lua</application> 变量可以在命令中安全的使用，
	    而无需使用
	    <varname>LUA_PREMK</varname>。</para>
	</note>
      </sect2>
    </sect1>

    <sect1 xml:id="using-xfce">
      <title>使用 Xfce</title>

      <para><varname>USE_XFCE</varname> 变量可以用来自动配置使用基于 Xfce 库或应用程序， 如
	<package>x11-toolkits/libxfce4gui</package> 和
	<package>x11-wm/xfce4-panel</package> 的 port 的依赖关系。</para>

      <para>目前， 系统能够识别下列 Xfce 库和应用程序：</para>

      <itemizedlist>
	<listitem>
	  <para>libexo：<package>x11/libexo</package></para>
	</listitem>

	<listitem>
	  <para>libgui：<package>x11-toolkits/libxfce4gui</package></para>
	</listitem>

	<listitem>
	  <para>libutil：<package>x11/libxfce4util</package></para>
	</listitem>

	<listitem>
	  <para>libmcs：<package>x11/libxfce4mcs</package></para>
	</listitem>

	<listitem>
	  <para>mcsmanager：<package>sysutils/xfce4-mcs-manager</package></para>
	</listitem>

	<listitem>
	  <para>panel：<package>x11-wm/xfce4-panel</package></para>
	</listitem>

	<listitem>
	  <para>thunar：<package>x11-fm/thunar</package></para>
	</listitem>

	<listitem>
	  <para>wm：<package>x11-wm/xfce4-wm</package></para>
	</listitem>

	<listitem>
	  <para>xfdev：<package>dev/xfce4-dev-tools</package></para>
	</listitem>

      </itemizedlist>

      <para>除此之外， 还能够使用下列参数：</para>

      <itemizedlist>
	<listitem>
	  <para>configenv： 如果您的 port 需要使用特殊的
	    <varname>CONFIGURE_ENV</varname> 来查找所需的库。
	    <programlisting>-I&dollar;{LOCALBASE}/include -L&dollar;{LOCALBASE}/lib</programlisting>
	    会加到 <varname>CONFIGURE_ENV</varname> 的 CPPFLAGS。</para>
	</listitem>

      </itemizedlist>

      <para>因此， 如果 port 有到
	<package>sysutils/xfce4-mcs-manager</package> 的依赖关系，
	并需要在 configure 的环境中指定特殊的饿 CPPFLAGS， 则所用的语法为：</para>

      <programlisting>USE_XFCE=        mcsmanager configenv</programlisting>
    </sect1>

    <sect1 xml:id="using-mozilla">
      <title>使用 Mozilla</title>

	<table frame="none">
	  <title>用到 Mozilla 的 port 使用的变量</title>

	  <tgroup cols="2">
	    <tbody>

	      <row>
		<entry><varname>USE_GECKO</varname></entry>

		<entry>port 支持的 Gecko 后端。 可选值：
		  <literal>libxul</literal> (<filename>libxul.so</filename>)、
		  <literal>seamonkey</literal> (<filename>libgtkembedmoz.so</filename>，
		  过时， 新 port 应避免使用)。</entry>
	      </row>
	      <row>
		<entry><varname>USE_FIREFOX</varname></entry>

		<entry>port 需要使用 Firefox 作为运行环境依赖。
		  可选值：
		  <literal>yes</literal> (使用默认版本)、
		  <literal>40</literal>、 <literal>36</literal>、
		  <literal>35</literal>。
		  默认的依赖采用的是版本
		  <literal>40</literal>。</entry>
	      </row>
	      <row>
		<entry><varname>USE_FIREFOX_BUILD</varname></entry>

		<entry>port 需要使用 Firefox 作为联编环境依赖。
		  可选值： 参见 USE_FIREFOX。
		  这个变量会自动设置 USE_FIREFOX 使用相同的值。</entry>
	      </row>
	      <row>
		<entry><varname>USE_SEAMONKEY</varname></entry>

		<entry>port 需要使用 SeaMonkey 作为运行环境依赖。
		  可选值：
		  <literal>yes</literal> (使用默认版本)、
		  <literal>20</literal>、 <literal>11</literal>
		  (过时， 新 port 应避免使用)。
		  默认的依赖采用的是版本
		  <literal>20</literal>。</entry>
	      </row>
	      <row>
		<entry><varname>USE_SEAMONKEY_BUILD</varname></entry>

		<entry>port 需要使用 SeaMonkey 作为联编环境依赖。
		  可选值： 参见 USE_SEAMONKEY。
		  这个变量会自动设置 USE_SEAMONKEY 使用相同的值。</entry>
	      </row>
	      <row>
		<entry><varname>USE_THUNDERBIRD</varname></entry>

		<entry>port 需要使用 Thunderbird 作为运行环境依赖。
		  可选值：
		  <literal>yes</literal> (使用默认版本)、
		  <literal>31</literal>、 <literal>30</literal>
		  (过时， 新 port 应避免使用)。
		  默认的依赖采用的是版本
		  <literal>31</literal>。</entry>
	      </row>
	      <row>
		<entry><varname>USE_THUNDERBIRD_BUILD</varname></entry>

		<entry>port 需要使用 Thunderbird 作为联编环境依赖。
		  可选值： 参见 USE_THUNDERBIRD。
		  这个变量会自动设置 USE_THUNDERBIRD 使用相同的值。</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>
      <para>可用变量的完整列表， 请参阅
	<filename>/usr/ports/Mk/bsd.gecko.mk</filename>。</para>
    </sect1>


    <sect1 xml:id="using-databases">
      <title>使用数据库</title>

	<table frame="none">
          <title>ports 中有关数据库的变量</title>

	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>Variable</entry>

		<entry>Means</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>USE_BDB</varname></entry>

                <entry>如果这个变量为 <literal>yes</literal>，
                  则把 <package>databases/db41</package>
                  列为依赖关系。 这个变量还可以被设置成的值有： 40，41，
		  42、 43、 44、 46、 47、 48 或 51。 您可以声明可接受值的范围，
                  <varname>USE_BDB</varname>=42+ 将寻找已安装的最高版本，
                  如果没有找到则退回到 42。</entry>
	      </row>

	      <row>
		<entry><varname>USE_MYSQL</varname></entry>

                <entry>如果这个变量为 <literal>yes</literal>，
                  则把 <package>databases/mysql55-server</package>
                  列为依赖关系。还有一个相关的变量，<varname>WANT_MYSQL_VER</varname>,
                  可以设置的值有 323，40，41，50，51， 52， 55 或者 60。</entry>
	      </row>

	      <row>
		<entry><varname>USE_PGSQL</varname></entry>

                <entry>如果设置成 <literal>yes</literal>，则把
                  <package>databases/postgresql82</package>
                  列为依赖关系。还有一个相关的变量，<varname>WANT_PGSQL_VER</varname>，
                  可以设置的值有 73，74，80，81，82， 83 或 90。</entry>
	      </row>

	    </tbody>
	  </tgroup>
	</table>

      <para>更多详情请参阅
	<link xlink:href="http://www.freebsd.org/cgi/cvsweb.cgi/ports/Mk/bsd.database.mk">
	bsd.database.mk</link>。</para>

    </sect1>

    <sect1 xml:id="rc-scripts">
      <title>启动和停止服务 (rc 脚本)</title>

      <para><filename>rc.d</filename> 脚本在系统启动时用于启动服务，
	并为管理员提供停止、 启动和重新启动某个服务的标准方法。 Ports
	安装的脚本会集成到系统的 <filename>rc.d</filename> 框架中。
	关于如何使用它的说明， 可以在
	<link xlink:href="&url.books.handbook;/configtuning-rcd.html">使用手册的 rc.d
	章节</link> 找到。 关于可用命令的详细解释， 则可以在
	&man.rc.8; 和 &man.rc.subr.8; 找到。 最后， 您可以参阅
	<link xlink:href="&url.articles.rc-scripting;">这篇文章</link>
	了解撰写 <filename>rc.d</filename> 脚本的最佳实践。</para>

      <para>可以安装一或多个 <filename>rc.d</filename> 脚本：</para>

      <programlisting>USE_RC_SUBR=	doormand</programlisting>

      <para>这些脚本必须放到 <filename>files</filename>
	目录， 并附加 <literal>.in</literal>。
	这个文件中可以使用标准的
	<varname>SUB_LIST</varname> 替换展开。 除此之外，
	我们还强烈推荐使用 <literal>%%PREFIX%%</literal> 和
	<literal>%%LOCALBASE%%</literal> 替换展开。 关于
	<varname>SUB_LIST</varname> 的介绍可以在 <link linkend="using-sub-files">本书的相关章节</link> 找到。</para>

      <para>在 &os;&nbsp;6.1-RELEASE 之前， 与 &man.rcorder.8; 的集成是通过
	<varname>USE_RCORDER</varname> 而不是
	<varname>USE_RC_SUBR</varname> 来完成的。 不过，
	除非 port 需要提供安装进基本系统这样的选项，
	或者服务需要在 <filename>rc.d</filename> 脚本
	<filename>FILESYSTEMS</filename> 之前运行这类特殊情况，
	一般来说是不需要使用这个功能的。</para>

      <para>从 &os;&nbsp;6.1-RELEASE 开始， 本地安装的 <filename>rc.d</filename>
	脚本 (包括由 port 安装的脚本) 会纳入基本系统的 &man.rcorder.8;。</para>

      <para>以下是一个简单的 <filename>rc.d</filename> 脚本：</para>

      <programlisting>#!/bin/sh

# &dollar;FreeBSD&dollar;
#
# PROVIDE: doormand
# REQUIRE: LOGIN
# KEYWORD: shutdown
#
# 在 /etc/rc.conf.local 或 /etc/rc.conf 中增加下述设置可以启用这一服务：
#
# doormand_enable (bool):	默认设为 NO。
#				设为 YES 可以启用 doormand。
# doormand_config (path):	默认设为 %%PREFIX%%/etc/doormand/doormand.cf。
#

. /etc/rc.subr

name="doormand"
rcvar=${name}_enable

command=%%PREFIX%%/sbin/${name}
pidfile=/var/run/${name}.pid

load_rc_config $name

: ${doormand_enable="NO"}
: ${doormand_config="%%PREFIX%%/etc/doormand/doormand.cf"}

command_args="-p $pidfile -f $doormand_config"

run_rc_command "$1"</programlisting>

      <para>除非有很站得住脚的理由提前启动服务，所有的 ports 脚本应使用
	<programlisting>REQUIRE: LOGIN</programlisting>。
	如果服务需要以特定用户 (除 root 之外) 身份启动， 则必须这样做。
	在前面的例子中， 我们还使用了
	<programlisting>KEYWORD: shutdown</programlisting>
	以便让 mythical port 在系统停机的过程中以正常的方式终止，
	因为它需要在系统引导过程中启动服务。 如果脚本没有启动任何服务，
	则并不需要这样做。</para>

      <para>这里， 对变量的默认赋值方法应采用 &quot;=&quot;，
	而非 &quot;:=&quot; 这样的形式。 这是因为，
	前一种赋值方法只有在变量未被设置时才设置默认值，
	而后一种方法则会在变量没有设置，
	<emphasis>或者</emphasis> 其值为空时都设置默认值。
	用户非常可能在其
	<filename>rc.conf.local</filename> 中使用类似
	<programlisting>doormand_flags=""</programlisting> 这样的设置，
	而采用 &quot;:=&quot; 来进行赋值，
	则会在不经意间覆盖用户所希望的设置。</para>

      <note>
	<para>新增的脚本均不应使用 <filename>.sh</filename>
	  后缀。 未来， 仍然包含这一后缀的脚本将被批量改名。</para>
      </note>

      <sect2>
	<title>卸载时停止服务</title>

	<para>可以在卸载的过程中自动地停止服务。 我们建议只有在绝对必要，
	  例如必须在删除文件之前停止服务这类的情况下才使用这一功能。
	  通常来说， 决定是否在卸载时停止服务是系统管理员需要考虑的事情。
	  另外要注意， 这个功能也会影响升级过程。</para>

	<para>需要时可以在 <filename>pkg-plist</filename> 中加入：</para>

	<programlisting>@stopdaemon doormand</programlisting>

	<para>这里的参数必须与
	  <varname>USE_RC_SUBR</varname> 变量的内容匹配。</para>
      </sect2>
    </sect1>

    <sect1 xml:id="users-and-groups">
      <title>添加用户和用户组</title>

      <para>一些 port 需要在安装的系统中创建特定的用户或用户组。
	如果有这种情况， 请从 50 到 999 之间选择一个尚未使用的 UID， 并在
	<filename>ports/UIDs</filename> (针对用户) 或
	<filename>ports/GIDs</filename> (针对组) 中予以记录。
	请务必确保您没有使用系统中已经在其他 ports 中使用的 UID。</para>

      <para>如果您的 port 需要创建新用户或用户组，
	请在提交补丁的时候一并提交这两个文件的补丁。</para>

      <para>接下来， 可以在您的 <filename>Makefile</filename> 中使用
	<varname>USERS</varname> 和 <varname>GROUPS</varname>
	这两个变量， 系统会在安装时自动创建用户或组。</para>

      <programlisting>USERS=	pulse
GROUPS=	pulse pulse-access pulse-rt</programlisting>

      <para>现有的保留 UID 和 GID 列表，
	可以在 <filename>ports/UIDs</filename> 和
	<filename>ports/GIDs</filename> 找到。</para>

    </sect1>

    <sect1>
      <title>依赖内核源代码的 Ports</title>

      <para>某些 ports (例如可加载式内核模块) 需要内核的源文件才能编译。
	下面是检测用户是否安装了源代码的例子：</para>

      <programlisting>.if !exists(${SRC_BASE}/sys/Makefile)
IGNORE=         requires kernel sources to be installed
.endif</programlisting>
    </sect1>

  </chapter>

    <chapter xml:id="plist">
      <title>高级 <filename>pkg-plist</filename> 用法</title>

      <sect1 xml:id="plist-sub">
	<title>根据 make 变量对 <filename>pkg-plist</filename> 进行修改</title>

	<para>某些 port， 特别是 <literal>p5-</literal> port，
	  会需要根据配置选项 (或对于 <literal>p5-</literal> port 而言，
	  <literal>perl</literal> 的版本) 来修改它们的 <filename>pkg-plist</filename>。
	  为简化这一工作， 在
	  <filename>pkg-plist</filename> 中的 <literal>%%OSREL%%</literal>、
	  <literal>%%PERL_VER%%</literal>， 以及
	  <literal>%%PERL_VERSION%%</literal> 将自动进行相应的替换。
	  其中， <literal>%%OSREL%%</literal> 的值是操作系统以数值表示的版本 (例如
	  <literal>4.9</literal>)。 <literal>%%PERL_VERSION%%</literal> 和
	  <literal>%%PERL_VER%%</literal> 是 <command>perl</command> 的完整版本号 (例如
	  <literal>5.8.9</literal>)。许多其它与 port 文档文件有关的
	  <literal>%%变量%%</literal> 在 <link linkend="install-documentation">相应章节</link> 中进行了介绍。</para>

	<para>如果您还需要进行其它的替换， 可以通过将
	  <varname>PLIST_SUB</varname> 变量设置为一组
	  <literal>变量=值</literal>
	  对来实现。 其中， <literal>%%VAR%%</literal>
	  表示在 <filename>pkg-plist</filename> 中将被
	  <replaceable>值</replaceable> 替换的那些文字。</para>

	<para>举例来说， 如果 port 需要把很多文件放到和版本有关的目录中，
	  可以在 <filename>Makefile</filename> 中按照类似下面的例子：</para>

	<programlisting>OCTAVE_VERSION= 2.0.13
PLIST_SUB=      OCTAVE_VERSION=${OCTAVE_VERSION}</programlisting>

	<para>并在 <filename>pkg-plist</filename> 中将具体的版本替换为
	  <literal>%%OCTAVE_VERSION%%</literal>。 这样， 在升级 port 时，
	  就不需要再到 <filename>pkg-plist</filename> 中修改那几十 (或者，
	  有时甚至是上百) 行的内容了。</para>

	<para>如果您的 port 需要根据一定的配置来有条件地安装一些文件，
	  通常的做法是在 <filename>pkg-plist</filename> 中列出这些文件时，
	  在对应行的开头加上 <literal>%%TAG%%</literal>，
	  并将 <literal>TAG</literal> 写到 <filename>Makefile</filename>
	  中的 <varname>PLIST_SUB</varname> 变量中， 根据需要替换掉， 或替换为
	  <literal>@comment</literal>， 后者表示让打包工具忽略这行：</para>

	<programlisting>.if defined(WITH_X11)
PLIST_SUB+=	X11=""
.else
PLIST_SUB+=	X11="@comment "
.endif</programlisting>

	<para>与之对应， 在 <filename>pkg-plist</filename> 中：</para>

	<programlisting>%%X11%%bin/foo-gui</programlisting>

	<para>这一替换过程 (以及加入 <link linkend="makefile-manpages">联机手册</link> 的过程)，
	  会在 <buildtarget>pre-install</buildtarget> 和
	  <buildtarget>do-install</buildtarget> 两个 target 之间， 通过读取
	  <filename>PLIST</filename> 并写入
	  <filename>TMPPLIST</filename>
	  (默认情况下， 是：
	  <filename>WRKDIR/.PLIST.mktmp</filename>) 来完成。
	  因此， 如果您的 port 动态生成 <filename>PLIST</filename>，
	  就需要在 <buildtarget>pre-install</buildtarget> 之前完成。
	  另外， 如果您的 port 需要编辑所生成的文件， 则需要在
	  <buildtarget>post-install</buildtarget> 中操作名为
	  <filename>TMPPLIST</filename> 的那个文件。</para>

	<para>另一种可行的修改装箱单的方法，
	  则是根据 <varname>PLIST_FILES</varname> 和
	  <varname>PLIST_DIRS</varname> 这两个变量的设置来进行。
	  它们的值会作为目录名连同 <filename>PLIST</filename>
	  的内容一起写入 <filename>TMPPLIST</filename>。
	  在 <varname>PLIST_FILES</varname>
	  和 <varname>PLIST_DIRS</varname> 中列出的名字， 会经历前面所介绍的
	  <literal>%%变量%%</literal>
	  替换过程。 除此之外， 在 <varname>PLIST_FILES</varname>
	  中列出的文件， 会不加任何修改第出现在最终的装箱单中，
	  而 <literal>@dirrm</literal> 将作为前缀加到 <varname>PLIST_DIRS</varname>
	  所列的名字之前。 为了达到目的， <varname>PLIST_FILES</varname> 和
	  <varname>PLIST_DIRS</varname> 必须在写
	  <filename>TMPPLIST</filename> 之前，
	  也就是在 <buildtarget>pre-install</buildtarget> 或更早的阶段进行设置。</para>
      </sect1>

      <sect1 xml:id="plist-cleaning">
	<title>空目录</title>

	<sect2 xml:id="plist-dir-cleaning">
	  <title>清理空目录</title>

	<para>一定要让 port 在卸载时进行清理空目录。
	  通常， 可以通过为所有由 port 创建的目录增加对应的
	  <literal>@dirrm</literal> 行来实现。 在删除父目录之前，
	  需要首先删除它的子目录。</para>

	<programlisting> :
lib/X11/oneko/pixmaps/cat.xpm
lib/X11/oneko/sounds/cat.au
 :
@dirrm lib/X11/oneko/pixmaps
@dirrm lib/X11/oneko/sounds
@dirrm lib/X11/oneko</programlisting>

	<para>然而， 有时 <literal>@dirrm</literal> 会由于其它 port
	  使用了同一个目录而发生错误。
	  利用 <literal>@dirrmtry</literal> 可以只删除那些空目录，
	  而避免给出警告。</para>

	<programlisting>@dirrmtry share/doc/gimp</programlisting>

	<para>按照上面的写法， 将不会显示任何错误信息， 而且，即使在
	  <filename>${PREFIX}/share/doc/gimp</filename>
	  由于其它 port 在其中安装了一些别的文件的时候， 也不会导致
	  &man.pkg.delete.1; 异常退出。</para>
	</sect2>

	<sect2 xml:id="plist-dir-empty">
	  <title>如何建立空目录</title>

	  <para>在 port 安装过程中创建的空目录需要特别留意。 安装 package
	    时并不会自动创建这些目录， 这是因为 package 只保存文件。
	    要确保安装 package 时会自动创建这些空目录， 需要在
	    <filename>pkg-plist</filename> 中加入与
	    <literal>@dirrm</literal> 对应的行：</para>

	  <programlisting>@exec mkdir -p %D/share/foo/templates</programlisting>
	</sect2>

      </sect1>

      <sect1 xml:id="plist-config">
	<title>配置文件</title>

	<para>如果 port 需要把一些文件放到
	  <filename>PREFIX/etc</filename>，
	  <emphasis>不要</emphasis> 简单地安装它们， 并将其列入
	  <filename>pkg-plist</filename>， 因为这样会导致
	  &man.pkg.delete.1; 删除用户精心编辑的文件，
	  而新安装时则又会把这些文件覆盖。</para>

	<para>因此， 您应把配置文件的例子按其它的后缀来安装
	  (例如 <filename>filename.sample</filename>
	  就是一个不错的选择) 并显示一条 <link linkend="porting-message">消息</link>
	    告诉用户如何复制并编辑这个配置文件， 以便让软件能够正确工作。</para>
	<para>因此， 应按其它的后缀来安装配置文件的例子
	  (<filename>filename.sample</filename>
	  就是一个不错的选择)。 如果实际的配置文件不存在，
	  则将其复制为实际文件的名字。 卸载时， 如果发现用户没有修改配置文件，
	  则将其删除。 您需要在 port 的 <filename>Makefile</filename>，
	  以及 <filename>pkg-plist</filename> (对于从 package
	  安装的情形) 进行处理。</para>

	<para>示例的 <filename>Makefile</filename> 部分：</para>

	<programlisting>post-install:
	@if [ ! -f ${PREFIX}/etc/orbit.conf ]; then \
		${CP} -p ${PREFIX}/etc/orbit.conf.sample ${PREFIX}/etc/orbit.conf ; \
	fi</programlisting>

	<para>示例的 <filename>pkg-plist</filename> 部分：</para>

	<programlisting>@unexec if cmp -s %D/etc/orbit.conf.sample %D/etc/orbit.conf; then rm -f %D/etc/orbit.conf; fi
etc/orbit.conf.sample
@exec if [ ! -f %D/etc/orbit.conf ] ; then cp -p %D/%F %B/orbit.conf; fi</programlisting>

	<para>另外， 还应显示一条 <link linkend="porting-message">消息</link> 指出用户应在何处复制并编辑这个文件，
	  以便让软件能开始正常工作。</para>
      </sect1>

      <sect1 xml:id="plist-dynamic">
	<title>动态装箱单与静态装箱单的对比</title>

	<para><emphasis>静态装箱单</emphasis> 是指在 Ports Collection 中以
	  <filename>pkg-plist</filename> 文件 (可能包含变量替换)，
	  或以 <varname>PLIST_FILES</varname> 和 <varname>PLIST_DIRS</varname>
	  的形式嵌入到 <filename>Makefile</filename> 出现的装箱单。
	  即使它是由工具或 Makefile 中的某个 target 在经由 committer 加入到
	  Ports Collection <emphasis>之前</emphasis> 自动生成的也是如此，
	  因为可以在不下载或编译源代码包的前提下对其进行检视。</para>

	<para><emphasis>动态装箱单</emphasis> 是指在 port
	  编译并安装时生成的装箱单。 在下载并编译您所移植的应用程序的源代码之前，
	  或在执行了 <literal>make
	  clean</literal> 之后， 就无法查看其内容了。</para>

	<para>尽管使用动态装箱单并不被禁止， 但监护人应尽可能使用静态装箱单，
	  因为它能够让用户使用 &man.grep.1;来发现所需的 ports，
	  例如， 它是否会安装某个特定文件。 动态列表主要应用于复杂的，
	  其装箱单随所选功能会发生巨变 (因而使得维护静态装箱单不再可行)，
	  或那些随版本而改变装箱单内容的 port (例如， 使用
	  <application>Javadoc</application> 来生成文档的那些 ports)。</para>

	<para>我们鼓励那些选择使用动态装箱单的监护人提供一个能够生成
	  <filename>pkg-plist</filename> 的 target， 以便于用户检视其内容。</para>

      </sect1>

    <sect1 xml:id="plist-autoplist">
      <title>装箱单 (package list) 的自动化制作</title>

      <para>首先， 请确认已经基本上完成了 port 的工作， 仅缺
	<filename>pkg-plist</filename>。</para>

      <para>接下来， 建立一个用于安装您的 port 的临时目录，
	并在其中安装它所依赖的所有其他软件包：</para>

      <screen>&prompt.root; <userinput>mkdir /var/tmp/`make -V PORTNAME`</userinput>
&prompt.root; <userinput>mtree -U -f `make -V MTREE_FILE` -d -e -p /var/tmp/`make -V PORTNAME`</userinput>
&prompt.root; <userinput>make depends PREFIX=/var/tmp/`make -V PORTNAME`</userinput></screen>

      <para>将目录结构保存到一新文件中。</para>

      <screen>&prompt.root; <userinput>(cd /var/tmp/`make -V PORTNAME` &amp;&amp; find -d * -type d) | sort &gt; OLD-DIRS</userinput></screen>

      <para>建立一空白 <filename>pkg-plist</filename> 文件：</para>

      <screen>&prompt.root; <userinput>:&gt;pkg-plist</userinput></screen>

      <para>如果您的 port 遵循 <varname>PREFIX</varname> (应该如此)
	则接下来应安装该 port 并创建装箱单。</para>

      <screen>&prompt.root; <userinput>make install PREFIX=/var/tmp/`make -V PORTNAME`</userinput>
&prompt.root; <userinput>(cd /var/tmp/`make -V PORTNAME` &amp;&amp; find -d * \! -type d) | sort &gt; pkg-plist</userinput></screen>

      <para>此外还应把新建立的目录加入装箱单。</para>

      <screen>&prompt.root; <userinput>(cd /var/tmp/`make -V PORTNAME` &amp;&amp; find -d * -type d) | sort | comm -13 OLD-DIRS - | sort -r | sed -e 's#^#@dirrm #' &gt;&gt; pkg-plist</userinput></screen>

      <para>最后需要手工整理 packing list； 这一过程不是
	<emphasis>完全</emphasis> 自动的。 联机手册应列入 port
	的 <filename>Makefile</filename> 中的
	<varname>MAN<replaceable>n</replaceable></varname>， 而不是装箱单。
	用户配置文件应被删除， 或以
	<filename>filename.sample</filename>
	这样的名字来安装。 <filename>info/dir</filename> 文件，
	也不应列入， 同时应按照 <link linkend="makefile-info">info
	文件</link> 的说明来增加一些 <filename>install-info</filename> 行。
	所有由 port 安装的库， 应按照
	<link linkend="porting-shlibs">动态连接库</link>
	小节中介绍的方法处理。</para>

      <para>另外， 也可以使用
	<filename>/usr/ports/Tools/scripts/</filename> 中的
	<command>plist</command> 脚本来自动创建
	package list。 <filename>plist</filename>
	脚本是一个 <application>Ruby</application> 脚本，
	它能够将前面介绍的手工操作自动化。</para>

      <para>开始的步骤和上面的前三行一样， 也就是
	<command>mkdir</command>， <command>mtree</command> 并
	<command>make depends</command>。 然后联编和安装
	port：</para>

      <screen>&prompt.root; <userinput>make install PREFIX=/var/tmp/`make -V PORTNAME`</userinput></screen>

      <para>然后让 <command>plist</command> 生成
	<filename>pkg-plist</filename> 文件：</para>

      <screen>&prompt.root; <userinput>/usr/ports/Tools/scripts/plist -Md -m `make -V MTREE_FILE` /var/tmp/`make -V PORTNAME` &gt; pkg-plist</userinput></screen>

      <para>与前面类似， 如此生成的装箱单也需要手工进行一些清理工作。</para>

      <para>另一个可以用来创建最初的
	<filename>pkg-plist</filename> 的工具是 <package>ports-mgmt/genplist</package>。
	和其他自动化工具类似， 您应对它生成的 <filename>pkg-plist</filename>
	应手工检查并根据需要进行修改。</para>
    </sect1>

    </chapter>

    <chapter xml:id="pkg-files">
      <title><filename>pkg-*</filename> 文件</title>

      <para>前面有一些没有提及的关于
	<filename>pkg-*</filename> 文件的技巧，
	它们可以方便地完成许多任务。</para>

      <sect1 xml:id="porting-message">
	<title><filename>pkg-message</filename> (安装预编译包时显示的消息文件)</title>

	<para>如果您需要在安装时显示一条消息给用户，
	  可以把这消息放在 <filename>pkg-message</filename> 中。
	  这一特性通常可以用于在 &man.pkg.add.1; 之后显示一些附加的安装步骤，
	  或显示关于授权的信息。</para>

	<para>当需要显示一些编译开关或警告时，
	  请使用 <varname>ECHO_MSG</varname>。
	  <filename>pkg-message</filename> 文件只是为显示安装后的执行操作指导使用的。
	  类似地， 还需要留意
	  <varname>ECHO_MSG</varname> 和 <varname>ECHO_CMD</varname>
	  之间的区别。 前一个是在屏幕上显示消息性的文字， 而后一个则用于在执行命令时使用管道。</para>

	<para>下面是用到了这两个宏的例子
	  <filename>shells/bash2/Makefile</filename>：</para>

	<programlisting>update-etc-shells:
	@${ECHO_MSG} "updating /etc/shells"
	@${CP} /etc/shells /etc/shells.bak
	@( ${GREP} -v ${PREFIX}/bin/bash /etc/shells.bak; \
		${ECHO_CMD} ${PREFIX}/bin/bash) &gt;/etc/shells
	@${RM} /etc/shells.bak</programlisting>

	<note>
	  <para><filename>pkg-message</filename> 文件，
	    并不需要明确地加到 <filename>pkg-plist</filename> 中。
	    此外， 在用户使用 port 而不是 package 来安装软件时，
	    它并不会被显示出来。 因此如果需要的话， 您应该在
	    <buildtarget>post-install</buildtarget> target 中指定显示它。</para>
	</note>
      </sect1>

      <sect1 xml:id="pkg-install">
	<title><filename>pkg-install</filename> (安装预编译包时执行的脚本文件)</title>

	<para>如果您的 port 需要在预编译的安装包通过 &man.pkg.add.1;
	  安装时执行一些命令， 则应通过
	  <filename>pkg-install</filename> 脚本来完成。
	  这个脚本会自动地加入 package， 并被
	  &man.pkg.add.1; 执行两次： 第一次是
	  <literal>&dollar;{SH} pkg-install &dollar;{PKGNAME}
	  PRE-INSTALL</literal> 而第二次是
	  <literal>&dollar;{SH} pkg-install &dollar;{PKGNAME} POST-INSTALL</literal>。
	  <literal>&dollar;2</literal> 可被用来检测脚本运行的模式。
	  环境变量 <envar>PKG_PREFIX</envar> 将设置为 package 的安装目录。
	  请参见 &man.pkg.add.1; 以了解更进一步的细节。</para>

	<note>
	  <para>在使用 <command>make install</command> 时这个脚本不会被自动运行。
	    如果需要运行它， 则必须在您的 port 中的
	    <filename>Makefile</filename> 里明确地予以调用， 其方法是加入类似
	    <literal>PKG_PREFIX=&dollar;{PREFIX} &dollar;{SH} &dollar;{PKGINSTALL}
	    &dollar;{PKGNAME} PRE-INSTALL</literal> 这样的命令。</para>
	</note>
      </sect1>

      <sect1 xml:id="pkg-deinstall">
	<title><filename>pkg-deinstall</filename> (卸载时执行的脚本文件)</title>

	<para>这一脚本将在 package 被卸载时执行。</para>

	<para>此脚本会被 &man.pkg.delete.1; 执行两次。
	  第一次是 <literal>&dollar;{SH} pkg-deinstall &dollar;{PKGNAME}
	  DEINSTALL</literal> 而第二次则是
	  <literal>&dollar;{SH} pkg-deinstall &dollar;{PKGNAME} POST-DEINSTALL</literal>。
	</para>
      </sect1>

      <sect1 xml:id="pkg-req">
	<title><filename>pkg-req</filename> (安装预编译包时检测是否应执行操作的脚本文件)</title>

	<para>如果您的 port 需要确定它是否应被安装，
	  可以创建 <filename>pkg-req</filename> <quote>requirements</quote>
	  脚本。 它会在安装/卸载时自动运行， 以决定操作是否应被实施。</para>

	<para>这个脚本会在使用 &man.pkg.add.1; 安装时以
	  <literal>pkg-req &dollar;{PKGNAME} INSTALL</literal> 的命令行执行。
	  卸载时， 它将由 &man.pkg.delete.1; 以
	  <literal>pkg-req &dollar;{PKGNAME} DEINSTALL</literal> 的命令行执行。</para>
      </sect1>

      <sect1 xml:id="pkg-names">
	<title xml:id="porting-pkgfiles">改变
	  <filename>pkg-*</filename> 文件的名字</title>

	<para>所有 <filename>pkg-*</filename> 文件的名字，
	  皆系采用变量予以定义， 因此在需要时可以在您的
	  <filename>Makefile</filename> 中加以改变。 当您需要在多个 port
	  之间共享某些 <filename>pkg-*</filename> 文件，
	  或需要写入某些文件时就非常有用了。 (参见 在
	  <link linkend="porting-wrkdir">
	  <varname>WRKDIR</varname></link> 以外的地方写文件，
	  以了解为什么直接将变更写入 <filename>pkg-*</filename>
	  子目录是个糟糕的主意)</para>

	<para>下面是一组变量以及它们的默认值 (<varname>PKGDIR</varname> 默认情况下是
	  <varname>${MASTERDIR}</varname>。)</para>

	<informaltable frame="none" pgwide="1">
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>变量</entry>
		<entry>默认值</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>DESCR</varname></entry>
		<entry><literal>${PKGDIR}/pkg-descr</literal></entry>
	      </row>

	      <row>
		<entry><varname>PLIST</varname></entry>
		<entry><literal>${PKGDIR}/pkg-plist</literal></entry>
	      </row>

	      <row>
		<entry><varname>PKGINSTALL</varname></entry>
		<entry><literal>${PKGDIR}/pkg-install</literal></entry>
	      </row>

	      <row>
		<entry><varname>PKGDEINSTALL</varname></entry>
		<entry><literal>${PKGDIR}/pkg-deinstall</literal></entry>
	      </row>

	      <row>
		<entry><varname>PKGREQ</varname></entry>
		<entry><literal>${PKGDIR}/pkg-req</literal></entry>
	      </row>

	      <row>
		<entry><varname>PKGMESSAGE</varname></entry>
		<entry><literal>${PKGDIR}/pkg-message</literal></entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>

	<para>请修改这些变量， 而不是直接覆盖
	  <varname>PKG_ARGS</varname> 的值。 如果您改变了
	  <varname>PKG_ARGS</varname>， 这些文件将无法在安装 port
	  时正确地复制到 <filename>/var/db/pkg</filename> 目录。</para>
      </sect1>

      <sect1 xml:id="using-sub-files">
	<title>使用 <varname>SUB_FILES</varname> 和
	  <varname>SUB_LIST</varname></title>

	<para><varname>SUB_FILES</varname> 和 <varname>SUB_LIST</varname>
	  这两个变量可以用来在 port 文件中使用某些动态的值， 例如
	  <filename>pkg-message</filename> 中的
	  installation <varname>PREFIX</varname>。</para>

	<para>用 <varname>SUB_FILES</varname> 变量，
	  可以指定需要自动进行修改的文件列表。 在
	  <varname>SUB_FILES</varname> 中的每一个
	  <replaceable>文件</replaceable>，
	  在 <varname>FILESDIR</varname> 目录中都必须有一个对应的
	  <filename>文件.in</filename>。
	  修改后的版本将保存在 <varname>WRKDIR</varname>。
	  在 <varname>USE_RC_SUBR</varname> (或已经过时的
	  <varname>USE_RCORDER</varname>) 中定义的文件会自动加入到
	  <varname>SUB_FILES</varname> 中。 对于
	  <filename>pkg-message</filename>、
	  <filename>pkg-install</filename>、 <filename>pkg-deinstall</filename>
	  and <filename>pkg-req</filename>， 对应的 Makefile 变量会被自动设置，
	  以指向处理过的版本。</para>

	<para><varname>SUB_LIST</varname> 这个变量的内容是一系列
	  <literal>VAR=VALUE</literal> 对。 <varname>SUB_FILES</varname>
	  所列出的文件中所有的
	  <literal>%%VAR%%</literal> 都将被替换为
	  <literal>VALUE</literal>。 系统自动定义了一些常用的替换对，
	  包括： <varname>PREFIX</varname>、
	  <varname>LOCALBASE</varname>、
	  <varname>DATADIR</varname>、 <varname>DOCSDIR</varname>， 以及
	  <varname>EXAMPLESDIR</varname>。 替换结果中所有以
	  <literal>@comment</literal> 开头的行，
	  都将在变量替换之后被删去。</para>

	<para>下面的例子中， 将把 <filename>pkg-message</filename>
	  中的 <literal>%%ARCH%%</literal> 替换为系统所运行的架构名称：</para>

	<programlisting>SUB_FILES=     pkg-message
SUB_LIST=      ARCH=${ARCH}</programlisting>

	<para>注意， 在上述例子中， <varname>FILESDIR</varname>
	  里必须有 <filename>pkg-message.in</filename> 这个文件。</para>

	<para>下面是一个正确的 <filename>pkg-message.in</filename> 例子：</para>

	<programlisting>Now it is time to configure this package.
Copy %%PREFIX%%/share/examples/putsy/%%ARCH%%.conf into your home directory
as .putsy.conf and edit it.</programlisting>

      </sect1>
    </chapter>

  <chapter xml:id="testing">
    <title>测试您的 port</title>

      <sect1 xml:id="make-describe">
	<title>运行 <command>make describe</command></title>

	<para>许多 &os; port 维护工具， 例如
	  &man.portupgrade.1;， 会依赖于一个名为
	  <filename>/usr/ports/INDEX</filename> 的数据库的正确性，
	  它提供了关于 port 的相关信息， 例如依赖关系等等。
	  <filename>INDEX</filename> 是由顶级的
	  <filename>ports/Makefile</filename> 通过
	  <command>make index</command> 来建立的， 这个命令会进入每一个 port
	  的子目录， 并在那里执行 <command>make describe</command>。
	  因此， 如果某个 port 的 <command>make describe</command> 失败，
	  就没有人能生成 <filename>INDEX</filename>，
	  人们很快会变得不高兴。</para>

	<note>
	  <para>无论在 <filename>make.conf</filename> 中设置了什么选项，
	  这个文件都应能够正确地生成。 因此，
	  应避免在 (例如) 某个依赖关系无法满足时使用 <literal>.error</literal>。
	  (参见 <xref linkend="dads-dot-error"/>。)</para>
	</note>

	<para>如果 <command>make describe</command> 只是产生一个字符串，
	  而不是错误信息， 可能就没什么问题。 请参见
	  <filename>bsd.port.mk</filename> 以了解所生成的串的意义。</para>

	<para>最后要说明的是， 新版本的
	  <command>portlint</command> (在下一节中将进行介绍)
	  将会自动地运行 <command>make describe</command>。</para>
      </sect1>

      <sect1 xml:id="testing-portlint">
	<title>Portlint</title>

	<para>在提交或 commit 之前， 应使用 <link linkend="porting-portlint"><command>portlint</command></link>
	  来进行检查。 <command>portlint</command> 会对常见的、
	  包括功能上的和格式上的错误给出警告。 对于新的 (或在 repocopy 代码库中复制的)
	  port， <command>portlint -A</command> 可以完成全面检查；
	  对于暨存的 port， <command>portlint -C</command> 一般就足够了。</para>

	<para>由于 <command>portlint</command> 采用启发式方法来检查错误，
	  有时它会产生误警。 另外， 有时由于 port
	  框架的限制可能没有办法修正它指出的问题。 如果您有疑虑，
	  请写信询问 &a.ports;。</para>
      </sect1>

      <sect1 xml:id="testing-porttools">
	<title>使用 Port Tools 来完成测试</title>

	<para>在 Ports 套件中， 提供了一个 <package>ports-mgmt/porttools</package>
          程序。</para>

	<para><command>port</command> 是一个能够帮助您简化测试工具的前端脚本。
	  如果希望对新增的 port 或更新 port 时进行测试， 可以用
	  <command>port test</command> 来完成这些测试工作， 这也包含了
	  <link linkend="testing-portlint"><command>portlint</command></link>
	  检查。 这个命令会检测并列出没有在 <filename>pkg-plist</filename> 中列出的文件。
	  具体用法请参见下面的例子：</para>

	<screen>&prompt.root; <userinput>port test /usr/ports/net/csup</userinput></screen>
      </sect1>

      <sect1 xml:id="porting-prefix">
	<title><varname>PREFIX</varname> (安装时的顶级目录名) 和 <varname>DESTDIR</varname></title>

	<para><varname>PREFIX</varname> 能够决定 port 安装时的目的位置。
	  一般情况下这个位置是 <filename>/usr/local</filename>
	  或 <filename>/opt</filename>， 但也可以设为其它的任意值。
	  您的 port 则必须遵循这个变量。</para>

	<para>除此之外， 如果用户配置了 <varname>DESTDIR</varname>，
	  则表示希望将 port 安装到另一个环境， 通常是 jail
	  或在 <filename>/</filename> 以外的其他位置挂接的系统中。
	  实际上， port 会安装到
	  <varname>DESTDIR</varname>/<varname>PREFIX</varname>，
	  并注册到位于 <varname>DESTDIR</varname>/var/db/pkg
	  的预编译包数据库中。 由于 <varname>DESTDIR</varname> 是由
	  ports 框架藉由 &man.chroot.8; 来实现的， 您在撰写符合
	  <varname>DESTDIR</varname> 规范的 ports 时并不需要什么额外的工作。</para>

	<para>一般而言 <varname>PREFIX</varname> 会设为
	  <varname>LOCALBASE_REL</varname> (默认是
	  <filename>/usr/local</filename>)。 如果设置了
	  <varname>USE_LINUX_PREFIX</varname>， 则 <varname>PREFIX</varname>
	  会设为 <varname>LINUXBASE_REL</varname> (默认是
	  <filename>/compat/linux</filename>)。</para>

	<para>避免将 <filename>/usr/local</filename> 或
	  <filename>/usr/X11R6</filename> 硬编码到源代码中，
	  能够大大提高 port 的灵活性， 并适应不同环境的需要。
	  对于使用 <command>imake</command> 的 X port，
	  这一工作是自动完成的； 其他情况下， 通常可以简单地将 port
	  所用到的 <filename>Makefile</filename> 脚本中出现的
	  <filename>/usr/local</filename> (或对于没有使用 imake 的 X port 而言，
	  <filename>/usr/X11R6</filename>) 替换为读取
	  <varname>${PREFIX}</varname> 变量就能达到目的了，
	  因为这个变量在联编和安装的过程中， 会自动向下传递。</para>

	<para>一定要避免让您的 port 在
	<filename>/usr/local</filename> 而不是正确的 <varname>PREFIX</varname>
	中安装文件。 简单的测试方法是：</para>

	<screen>&prompt.root; <userinput>make clean; make package PREFIX=/var/tmp/`make -V PORTNAME`</userinput></screen>

	<para>如果有文件安装到了 <varname>PREFIX</varname> 以外的地方，
	打包过程将抱怨找不到这些文件。</para>

	<!-- XXX This paragraph is confusing and poorly indented. -->
	<para>这一步骤并不能帮助发现内部引用， 或纠正在引用其它 port
	中的文件时使用的 <varname>LOCALBASE</varname>。 您需要在
	<filename>/var/tmp/`make -V PORTNAME`</filename>
	中测试安装好的软件， 才能够达到这样的目的。</para>

	<para>您可以在自己的 <filename>Makefile</filename> 中改变
	  <varname>PREFIX</varname> 变量的值， 也可以通过用户环境变量来影响它。
	  然而， 一般情况下决不应该在 <filename>Makefile</filename>
	  中明确设置它的值。</para>

	<para>此外， 引用其它 port 中的文件时， 应使用前面介绍的变量，
	  而不要直接指定它们的路径名。 例如， 如果您的 port
	  需要使用 <literal>PAGER</literal> 这个宏来指明
	  <command>less</command> 的完整路径， 应使用下面的编译选项：

	  <programlisting>-DPAGER=\"&dollar;{LOCALBASE}/bin/less\"</programlisting>

	  而非
	  <literal>-DPAGER=\"/usr/local/bin/less\"</literal>。
	  这种方法能够增加在系统管理员把整个 <filename>/usr/local</filename>
	  目录挪到其它位置时安装成功的机会。</para>
      </sect1>

      <sect1 xml:id="testing-tinderbox">
        <title>Tinderbox</title>

        <para>如果您是非常热心的 ports 参与者， 则可以看看 <application>Tinderbox</application>。
          这是一个强大的用于联编和测试 ports 的系统， 它基于
          <link linkend="build-cluster">Pointyhat</link> 的脚本。 您可以使用
          <package>ports-mgmt/tinderbox</package> port 来安装
          <application>Tinderbox</application>。 请一定仔细阅读随它安装的文档，
          因为配置并不简单。</para>

        <para>请访问 <link xlink:href="http://tinderbox.marcuscom.com/">Tinderbox 网站</link>
          以了解进一步的细节。</para>

      </sect1>
  </chapter>

    <chapter xml:id="port-upgrading">
      <title>升级一个 port</title>

      <para>如果您发现某个 port 相对原作者所发布的版本已经过时，
	则首先需要确认的是您的 port 是最新的。 您可以在 &os; FTP 镜像的
	<filename>ports/ports-current</filename> 目录中找到它们。
	但是， 如果您正在使用较多的 port， 则可能使用
	<application>CVSup</application> 来保持 Ports Collection 最新更为简单， 这在
	<link xlink:href="&url.books.handbook;/synching.html#CVSUP-CONFIG">使用手册</link>
	中进行了介绍。 此外， 这样做也有助于保持 port 依赖关系的正确性。</para>

      <para>下一步是检查是否已经有在等待的更新。 要完成这项工作，
	可以采用下列两种方法之一。 有一个用于搜索
	<link xlink:href="http://www.FreeBSD.org/cgi/query-pr-summary.cgi?query">
	FreeBSD 问题报告 (PR) 数据库</link> (也被称作
	<literal>GNATS</literal>)。 在下拉框中选择 <literal>ports</literal>，
	然后输入 port 的名字。</para>

      <para>但是， 有些时候人们会忘记将避免混淆的 port 的名字放到 Synopsis 字段中。
	这种时候， 您可以试试看 <link linkend="portsmon">
	FreeBSD Ports 监视系统</link> (也被叫做
	<literal>portsmon</literal>)。 这个系统会尝试按照 port 的名字来进行分类。
	要搜索和某个特定 port 有关的 PR， 可以使用 <link xlink:href="http://portsmon.FreeBSD.org/portoverview.py">
	port概览</link>。</para>

      <para>如果没有候审的 PR， 下一步是给 port 的维护者写信， 这可以通过执行
	<command>make maintainer</command> 看到。 这个人可能正在进行升级工作，
	或者由于某种理由暂时没有升级 (例如， 新版本有稳定性问题)；
	一般您不希望重复他们的工作。 注意没有维护者的 port 的维护者会显示为
	<literal>ports@FreeBSD.org</literal>， 这是一般性 port 问题的邮件列表，
	因此发邮件给它一般没什么意义。</para>

      <para>如果维护者要求您去完成升级， 或者没有维护者，
	您就有机会通过自行完成升级来帮助 &os; 了！ 请使用基本系统提供的
	&man.diff.1; 命令来完成相关的工作。</para>

      <para>如果只修改一个文件， 可以直接使用 <command>diff</command>
	来生成补丁， 将需要修改的文件复制成 <replaceable>something.orig</replaceable>，
	并将改动放进 <replaceable>something</replaceable>，
	接着生成补丁：</para>

      <informalexample>
	<screen>&prompt.user; <userinput>/usr/bin/diff something.orig something &gt; something.diff</userinput></screen>
      </informalexample>

      <para>如果不是这样的话， 则您应使用 <command>cvs diff</command>
	的方法 (<xref linkend="cvs-diff"/>)， 或将目录整个复制到另一个目录，
	并使用 &man.diff.1; 比较两个目录时在目录中递归产生的输出结果
	(例如， 如果您修改后的 port 目录的名字是
	<filename>superedit</filename> 而原始文件的目录是
	<filename>superedit.bak</filename>， 则应保存
	<command>diff -ruN superedit.bak superedit</command> 的结果)。
	一致式 (unified) 或 上下文式 (context) diff 都是可以的，
	但一般来说 port committer 会更喜欢一致式 diff。
	请注意这里使用的选项 <literal>-N</literal>， 它的目的是强制 diff
	正确地处理出现新文件， 或老文件被删除的情形。 在把 diff 发给我们之前，
	请再次检查输出， 以便确认每一个修改都是有意义的。 (特别注意，
	在对比目录之前要用 <command>make clean</command> 清理一下)。</para>

     <para>为了简化常用的补丁文件操作， 您可以使用
	<filename>/usr/ports/Tools/scripts/patchtool.py</filename>。
	使用之前， 请首先阅读
	<filename>/usr/ports/Tools/scripts/README.patchtool</filename>。</para>

      <para>如果 port 目前还无人维护， 而且您自己经常使用它，
	请考虑自荐为它的维护者。 &os; 有超过 4000 个没有维护者的 port，
	而这正是最需要志愿人员的领域。
	(要了解关于维护者的任务描述， 请参见
	<link xlink:href="&url.books.developers-handbook;/policies.html#POLICIES-MAINTAINER">
	开发手册中的相关部分</link>。)</para>

      <para>将 diff 发送给我们的最佳方式是通过 &man.send-pr.1; (category 一栏写
	<literal>ports</literal>)。 如果您正维护那个 port，
	请务必在 synopsis 的开头写上 <literal>[maintainer update]</literal>，
	并将您的 PR 的 <quote>Class</quote> 设置为 <literal>maintainer-update</literal>。
	反之， 您的 PR 的 <quote>Class</quote> 就应该是
	<literal>change-request</literal>。 请在信中逐个提及每一个删除或增加的文件，
	因为这些都必须明确地在使用 &man.cvs.1; 进行 commit 时明确地指定。
	如果 diff 超过了 20K， 请考虑压缩并对其进行 uuencode；
	否则， 简单地将其原样加入 PR 即可。</para>

      <para>在您 &man.send-pr.1; 之前， 请再次阅读 Problem
	Reports 一文中的
	<link xlink:href="&url.articles.problem-reports;/pr-writing.html">
	如何撰写问题报告</link> 小节；
	它给出了丰富的关于如何撰写更好的问题报告的介绍。</para>

      <important>
	<para>如果您的更新是由于安全考虑， 或修复已经 commit 的 port
	  中的严重问题， 请通知 &a.portmgr; 来申请立即重建和分发您的 port
	  的 package。 否则， 不愿怀疑的使用 &man.pkg.add.1; 的用户，
	  可能会在未来数周之内继续通过使用 <command>pkg_add -r</command>
	  安装旧版本。</para>
      </important>

      <note>
	<para>再次强调， 请使用 &man.diff.1; 而非 &man.shar.1; 来发送现有
	  port 的更新！ 这可以帮助 ports committer 理解需要修改的内容。</para>
      </note>

      <para>现在您已经了解了所需的所有操作， 您可能会像要阅读在
	<xref linkend="keeping-up"/> 中关于如何保持最新的描述。</para>

      <sect1 xml:id="cvs-diff">
	<title>使用 CVS 制作补丁</title>

	<para>如果可能的话， 请提交&man.cvs.1; diff；
	  这种情形要比直接比较 <quote>新、旧</quote> 目录要容易处理。
	  此外， 这种方法也让您更容易看出到底改了什么，
	  并在其他人更新了 Ports Collection 时容易合并这些改动，
	  在提交之前， 这可以减少维护补丁所需的工作。</para>

	<screen>&prompt.user; <userinput>cd ~/my_wrkdir</userinput> <co xml:id="my-wrkdir"/>
&prompt.user; <userinput>cvs -d R_CVSROOT co pdnsd</userinput> <co xml:id="R-CVSROOT"/> <co xml:id="module-name"/>
&prompt.user; <userinput>cd ~/my_wrkdir/pdnsd</userinput></screen>

	<calloutlist>
	  <callout arearefs="my-wrkdir">
	    <para>当然， 这可以是您指定的任意目录；
	      联编 port 并不局限于
	      <filename>/usr/ports/</filename>
	      的子目录。</para>
	  </callout>

	  <callout arearefs="R-CVSROOT">
	    <para>R_CVSROOT 是任何一个公共的 cvs 镜像服务器， 您可以在 <link xlink:href="&url.books.handbook;/cvsup.html">&os; 使用手册</link>
	      中挑选一个。</para>
	  </callout>

	  <callout arearefs="module-name">
	    <para>pdnsd 是 port 的模块名字； 通常说来它和 port 的名字一样，
	      不过也有些例外， 特别是那些本地化类别 (<package>german/selfhtml</package>
	      对应的模块名字是 de-selfhtml)； 您可以通过 <link xlink:href="&url.base;/cgi/cvsweb.cgi/ports">cvsweb 界面</link>
	      查询， 或者也可以指定完整路径， 例如在我们这个例子中是
	      <filename>ports/dns/pdnsd</filename>。</para>
	  </callout>
	</calloutlist>

	<para>在工作目录中， 您可以像往常一样进行任何更改。
	  如果您添加或删除了文件， 则需要告诉
	  <command>cvs</command> 来追踪这些改动：</para>

	<screen>&prompt.user; <userinput>cvs add new_file</userinput>
&prompt.user; <userinput>cvs remove deleted_file</userinput></screen>

	<para>请反复检查 <xref linkend="porting-testing"/> 列出的事项并使用
	  <xref linkend="porting-portlint"/> 进行检查。</para>

	<screen>&prompt.user; <userinput>cvs status</userinput>
&prompt.user; <userinput>cvs update</userinput> <co xml:id="cvs-update"/></screen>

	<calloutlist>
	  <callout arearefs="cvs-update">
	    <para>这会合并 CVS 中其他人做的改动和您的补丁；
	      在这个过程中， 您需要仔细观察输出。
	      文件名前面的那个字母会显示做了什么， 请参阅
	      <xref linkend="table-cvs-up"/> 中给出的说明。</para>
	  </callout>
	</calloutlist>

	<table pgwide="1" frame="none" xml:id="table-cvs-up">
	  <title>cvs update 文件名前字母前缀的含义</title>

	  <tgroup cols="2">
	    <tbody>
	      <row>
		<entry>U</entry>

		<entry>文件更新无误。</entry>
	      </row>

	      <row>
		<entry>P</entry>

		<entry>文件更新无误 (通常只有在使用远程代码库时才会看到)。</entry>
	      </row>

	      <row>
		<entry>M</entry>

		<entry>文件有本地修改， 并合并成功而未产生任何冲突。</entry>
	      </row>

	      <row>
		<entry>C</entry>

		<entry>文件有本地修改， 进行了合并并产生了冲突。</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>

	<para>如果您在执行
	  <literal>cvs update</literal> 时某些文件出现了 <literal>C</literal>，
	  则说明有其他人在 CVS 中做了修改， 而 &man.cvs.1; 无法将这些改动与您本地的改动进行合并。
	  不过， 无论如何， 最好都检查一下合并的结果，
	  因为 <command>cvs</command> 并不知道 port 应该是什么样子，
	  因此它所做的合并无论是否产生了冲突，
	  都有可能 (并且并不罕见) 产生没有意义的结果。</para>

	<para>最后一步是以 CVS 中的文件为基础生成 unified &man.diff.1;：</para>

	<screen>&prompt.user; <userinput>cvs diff -uN &gt; ../`basename ${PWD}`.diff</userinput></screen>

	<note>
	  <para>指定 <option>-N</option> 十分重要，
	    因为它确保了添加或删除的文件也出现在补丁中。
	    补丁将包含删除的文件， 在打上补丁时，
	    这些文件会被清空， 所以最好在 PR 中提醒 committer
	    删除它们。</para>
	</note>

	<para>根据 <xref linkend="port-upgrading"/> 的指导提交您的补丁。</para>
      </sect1>

      <sect1 xml:id="moved-and-updating-files">
	<title>UPDATING 和 MOVED 文件</title>

	<para>如果在升级 port 时需要类似修改配置文件或运行特定的程序这样的特别步骤，
	  则应在
	  <filename>/usr/ports/UPDATING</filename> 文件中予以说明。
	  这个文件中的项目格式如下：</para>

	<programlisting>YYYYMMDD:
  AFFECTS: users of port类别/port名字
  AUTHOR: 您的名字 &lt;您的电子邮件地址&gt;

  所需执行的特别步骤</programlisting>

	<para>如果您需要在内文中加入具体的 portmaster 或 portupgrade
	  的说明， 请确保所用的 shell 命令使用了正确的转义字符。</para>

	<para>如果 port 被删除或改名，则应在
	  <filename>/usr/ports/MOVED</filename> 中添加相应的说明项目。
	  这个文件中的项目格式如下：</para>

	<programlisting>原来的名字|新名字 (如果删除则应留空)|删除或改名的日期|原因</programlisting>
      </sect1>
    </chapter>

    <chapter xml:id="security">
      <title>Ports 的安全</title>

      <sect1 xml:id="security-intro">
	<title>安全为何如此重要</title>

	<para>软件中偶尔会引入 bug。 毋庸置疑， 安全漏洞是最为危险的。
	  从技术角度看， 这些漏洞可以通过消除导致它们的 bug 来修复。
	  然而， 处理一般的 bug 和安全漏洞的策略是截然不同的。</para>

	<para>典型的小 bug 通常只影响那些启用了某些能够触发它的选项组合的用户。
	  开发人员最终会在发布没有那个问题的新版之后给出一个补丁来修正它，
	  而用户中的主体并不会立即升级， 因为他们并没有因存在问题而感到苦恼。
	  严重的 bug 可能会导致数据丢失和其它问题， 无论如何，
	  谨慎的用户知道， 除了软件 bug 之外还有很多其它事故可能会导致数据丢失，
	  因此他们会备份重要数据； 此外， 严重的 bug 通常会被很快发现。</para>

	<para>安全漏洞则完全不同。 第一， 它们可能存在数年而不被发现，
	  因为它们可能并不导致软件无法正常工作。 第二， 通过利用漏洞，
	  恶意的一方可能会得到未获授权的访问权限，
	  并利用这些权限毁掉或修改敏感数据；
	  而更糟糕的情况则是用户可能根本注意不到损害已经发生。 第三，
	  暴露出安全漏洞的系统， 往往能够帮助攻击者闯入其它之前不可能进入的系统。
	  因此， 只是修正安全漏洞是不够的： 必须以清晰和全面的方式通知公众，
	  这样他们就能够评估风险， 并采取适当的措施。</para>
      </sect1>

      <sect1 xml:id="security-fix">
	<title>修复安全漏洞</title>

	<para>当说起 port 或 package 时， 安全漏洞往往是出现在原作者的发行包，
	  或移植过程中加入的文件里。 对于前一种情况，
	  软件的原作者通常会立刻发布一个补丁甚至新版，
	  您只需要按照原作者的修正去更新 port 就可以了。
	  如果由于某种原因修正被延误， 则要么 <link linkend="dads-noinstall">将
	  port 标记为 <varname>FORBIDDEN</varname></link>， 要么在 port
	  中加入一个自己的补丁。 如果有存在漏洞的 port， 尽可能尽快修复其漏洞就是。
	  无论是哪种情况， 您还是需要按照 <link linkend="port-upgrading">标准的提交流程</link> 提交，
	  除非您有直接在 ports tree 上 commit 的权限。</para>

	<important>
	  <para>作为 ports committer 并不能够随便 commit 所有 port。
	    请注意通常 port 都有维护者， 而他们应得到您的尊重。</para>
	</important>

	<para>在漏洞被修正之后， 一定要同时增加 port 的修订版本号。
	  这样， 规律性地升级安装的 package 的用户就能够看到他们需要进行升级。
	  另外， 还应联编预编译的安装包， 并通过 FTP 和 WWW 镜像发布，
	  以取代有漏洞的版本。 注意要增加
	  <varname>PORTREVISION</varname> 数字， 除非在修正问题时
	  <varname>PORTVERSION</varname> 发生了变化。 一般来说，
	  如果在 port 中增加了补丁文件， 就应该增加 <varname>PORTREVISION</varname>，
	  但例外的例子是您已经将软件升级到了最新版，
	  因为这时已经改掉 <varname>PORTVERSION</varname> 了。 请参见
	  <link linkend="makefile-naming-revepoch">相关小节</link>
	  以了解进一步的信息。</para>
      </sect1>

      <sect1 xml:id="security-notify">
	<title>通知整个用户群体</title>

	<sect2 xml:id="security-notify-vuxml-db">
	  <title>VuXML 数据库</title>

	  <para>当发现了安全漏洞时的一项重要而紧迫的步骤，
	    就是让使用 port 的用户群了解其危险。 这类通知有两重目的。
	    首先， 如果危害真的很严重， 可能理性的办法就是立即应用一项缓解措施，
	    例如， 停止受到影响的服务， 甚至完全删除 port， 直到问题被修正为止。
	    其次， 许多用户只是偶尔升级所安装的软件包， 通过通知，
	    他们能够知道已经到了 <emphasis>必须</emphasis> 更新软件的时候，
	    因为已经有了修正这些问题的版本了。</para>

	  <para>由于现有的 port 数量极其庞大， 为每一个问题都发布安全公告，
	    毫无疑问地会发表和狼来了一样多的安全公告，
	    并增大受众在真的发生严重的问题时忽略问题的可能。
	    因此， 在 port 中发现的安全漏洞， 会在 <link xlink:href="http://vuxml.freebsd.org/">FreeBSD VuXML
	    数据库</link> 中记录。 安全官团队成员会持续地追踪这个数据库的修改，
	    以了解需要他们注意的内容。</para>

	  <para>如果您是 committer， 则可以自行更新 VuXML 数据库。
	    这样， 您就能够同时帮助安全官团队，
	    并尽早将至关重要的信息传达给用户群体。 然而， 如果您不是 committer，
	    或者您相信自己发现了一个异常严重的漏洞，
	    请不要犹豫， 按照 <link xlink:href="http://www.freebsd.org/zh_CN/security/#how">FreeBSD
	    安全信息</link> 页面上的方法联系安全官团队。</para>

	  <para>正如其名称所暗示的那样， VuXML
	    数据库是一个 XML 文档。 其源文件 <filename>vuln.xml</filename>
	    被保存在 <package>security/vuxml</package> port 的目录中。
	    所以， 它的全名是
	    <filename>PORTSDIR/security/vuxml/vuln.xml</filename>。
	    每当您发现 port 中的安全漏洞时， 请把新的纪录加入到那个文件中。
	    在熟悉 VuXML 之前， 您最好先看看是否有类似的您发现的问题的其它记录，
	    并复制它作为模板。</para>
	</sect2>

	<sect2 xml:id="security-notify-vuxml-intro">
	  <title>VuXML 简介</title>

	  <para>XML 是一个复杂的语言， 它远远超越了这本书的范围。
	    不过， 只需了解标记的命名规则， 就能 VuXML 记录的结构有一个大体的了解了。
	    XML 标记的名字应出现在一对尖括号之间。 每一个
	    &lt;tag&gt; 必须有一个对应的 &lt;/tag&gt;。 标记可以嵌套，
	    如果嵌套的话， 内层的标记必须在外层标记之前结束。
	    这就形成了一个标记的层次结构， 也就是关于它们之间如何嵌套的规则。
	    听起来很像 HTML， 是不是？ 最主要的区别在于， XML
	    是可扩展的 (e<emphasis>X</emphasis>tensible)，
	    例如通过定义新的标记等等。 由于其结构的内在性质，
	    XML 能够赋予无组织的数据新的形态。 VuXML 是专门为描述安全漏洞设计的语言。</para>

	  <para>现在让我们来观察一个实际的 VuXML 记录：</para>

	  <programlisting>&lt;vuln vid="f4bc80f4-da62-11d8-90ea-0004ac98a7b9"&gt; <co xml:id="co-vx-vid"/>
  &lt;topic&gt;Several vulnerabilities found in Foo&lt;/topic&gt; <co xml:id="co-vx-top"/>
  &lt;affects&gt;
    &lt;package&gt;
      &lt;name&gt;foo&lt;/name&gt; <co xml:id="co-vx-nam"/>
      &lt;name&gt;foo-devel&lt;/name&gt;
      &lt;name&gt;ja-foo&lt;/name&gt;
      &lt;range&gt;&lt;ge&gt;1.6&lt;/ge&gt;&lt;lt&gt;1.9&lt;/lt&gt;&lt;/range&gt; <co xml:id="co-vx-rng"/>
      &lt;range&gt;&lt;ge&gt;2.*&lt;/ge&gt;&lt;lt&gt;2.4_1&lt;/lt&gt;&lt;/range&gt;
      &lt;range&gt;&lt;eq&gt;3.0b1&lt;/eq&gt;&lt;/range&gt;
    &lt;/package&gt;
    &lt;package&gt;
      &lt;name&gt;openfoo&lt;/name&gt; <co xml:id="co-vx-nm2"/>
      &lt;range&gt;&lt;lt&gt;1.10_7&lt;/lt&gt;&lt;/range&gt; <co xml:id="co-vx-epo"/>
      &lt;range&gt;&lt;ge&gt;1.2,1&lt;/ge&gt;&lt;lt&gt;1.3_1,1&lt;/lt&gt;&lt;/range&gt;
    &lt;/package&gt;
  &lt;/affects&gt;
  &lt;description&gt;
    &lt;body xmlns="http://www.w3.org/1999/xhtml"&gt;
      &lt;p&gt;J. Random Hacker reports:&lt;/p&gt; <co xml:id="co-vx-bdy"/>
      &lt;blockquote
        cite="http://j.r.hacker.com/advisories/1"&gt;
        &lt;p&gt;Several issues in the Foo software may be exploited
          via carefully crafted QUUX requests.  These requests will
          permit the injection of Bar code, mumble theft, and the
          readability of the Foo administrator account.&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/body&gt;
  &lt;/description&gt;
  &lt;references&gt; <co xml:id="co-vx-ref"/>
    &lt;freebsdsa&gt;SA-10:75.foo&lt;/freebsdsa&gt; <co xml:id="co-vx-fsa"/>
    &lt;freebsdpr&gt;ports/987654&lt;/freebsdpr&gt; <co xml:id="co-vx-fpr"/>
    &lt;cvename&gt;CAN-2010-0201&lt;/cvename&gt; <co xml:id="co-vx-cve"/>
    &lt;cvename&gt;CAN-2010-0466&lt;/cvename&gt;
    &lt;bid&gt;96298&lt;/bid&gt; <co xml:id="co-vx-bid"/>
    &lt;certsa&gt;CA-2010-99&lt;/certsa&gt; <co xml:id="co-vx-cts"/>
    &lt;certvu&gt;740169&lt;/certvu&gt; <co xml:id="co-vx-ctv"/>
    &lt;uscertsa&gt;SA10-99A&lt;/uscertsa&gt; <co xml:id="co-vx-ucs"/>
    &lt;uscertta&gt;SA10-99A&lt;/uscertta&gt; <co xml:id="co-vx-uct"/>
    &lt;mlist msgid="201075606@hacker.com"&gt;http://marc.theaimsgroup.com/?l=bugtraq&amp;amp;m=203886607825605&lt;/mlist&gt; <co xml:id="co-vx-mls"/>
    &lt;url&gt;http://j.r.hacker.com/advisories/1&lt;/url&gt; <co xml:id="co-vx-url"/>
  &lt;/references&gt;
  &lt;dates&gt;
    &lt;discovery&gt;2010-05-25&lt;/discovery&gt; <co xml:id="co-vx-dsc"/>
    &lt;entry&gt;2010-07-13&lt;/entry&gt; <co xml:id="co-vx-ent"/>
    &lt;modified&gt;2010-09-17&lt;/modified&gt; <co xml:id="co-vx-mod"/>
  &lt;/dates&gt;
&lt;/vuln&gt;</programlisting>

	  <para>标记的名字都是简单明了的， 下面我们来介绍一下需要由您填写的字段：</para>

	  <calloutlist>
	    <callout arearefs="co-vx-vid">
	      <para>这是 VuXML 记录的顶级 tag。
		它有一个强制性的字段， <literal>vid</literal>，
		用于为此记录 (它包含的部分) 指定一个全局唯一标识符 (UUID)。
		您应为每一个新的 vuXML 生成新的 UUID (而且别忘了要把模板中的
		UUID 换成新的， 如果您不是从头开始的话)。 您可以使用 &man.uuidgen.1;
		来生成 VuXML UUID。</para>
	    </callout>

	    <callout arearefs="co-vx-top">
	      <para>关于问题的一句话描述。</para>
	    </callout>

	    <callout arearefs="co-vx-nam">
	      <para>此处给出受到影响的 package 的名字。 可以给出多个名字，
		因为可能有多个软件包基于同一个 master port 或软件产品。
		这可能包括稳定和开发分支、 本地化版本，
		以及提供了不同的编译时选项的 slave port。</para>

	      <important>
		<para>撰写 VuXML 记录时， 您有责任找到所有相关的包。 很多时候
		  <literal>make search name=foo</literal> 是您的朋友。
		  需要留意的通常包括：</para>

		<itemizedlist>
		  <listitem>
		    <para><filename>foo</filename> port 的
		      <filename>foo-devel</filename> 变体；</para>
		  </listitem>

		  <listitem>
		    <para>包含不同后缀的其它变体， 例如
		      <literal>-a4</literal> (对于和打印有关的软件包)，
		      <literal>-without-gui</literal> (提供但禁用了 X
		      支持的软件包)， 以及类似的其它情况；</para>
		  </listitem>

		  <listitem>
		    <para><literal>jp-</literal>， <literal>ru-</literal>、
		      <literal>zh-</literal>， 以及其它可能的本地化变体，
		      它们通常可以在 Ports Collection 中相应的国家分类中找到。</para>
		  </listitem>
		</itemizedlist>
	      </important>
	    </callout>

	    <callout arearefs="co-vx-rng">
	      <para>受影响的 package 版本， 可以使用
		<literal>&lt;lt&gt;</literal>, <literal>&lt;le&gt;</literal>,
		<literal>&lt;eq&gt;</literal>, <literal>&lt;ge&gt;</literal>,
		和 <literal>&lt;gt&gt;</literal> 表达成一个或多个版本及其范围。
		注意给出的版本范围不应存在重叠。</para>

	      <para>在描述范围的时候， <literal>*</literal> (星号)
		表达最小的版本。 更具体地说，
		<literal>2.*</literal> 小于 <literal>2.a</literal>。
		因此， 星号可以用来匹配所有可能的
		<literal>alpha</literal>、 <literal>beta</literal>，
		以及 <literal>RC</literal> 版本。 例如，
		<literal>&lt;ge&gt;2.*&lt;/ge&gt;&lt;lt&gt;3.*&lt;/lt&gt;</literal>
		可以选择性地匹配每一个 <literal>2.x</literal> 的版本， 而
		<literal>&lt;ge&gt;2.0&lt;/ge&gt;&lt;lt&gt;3.0&lt;/lt&gt;</literal>
		显然不能， 因为它会漏掉
		<literal>2.r3</literal> 而匹配
		<literal>3.b</literal>。</para>

	      <para>上面的例子指定了受影响的版本， 是包括 <literal>1.6</literal>
		到 <literal>1.9</literal> 上下界的所有版本， 以及
		<literal>2.x</literal> 在 <literal>2.4_1</literal> 之前的版本，
		和 <literal>3.0b1</literal> 版。</para>
	    </callout>

	    <callout arearefs="co-vx-nm2">
	      <para>受到影响的一组 package (本质上是 ports)
		可以列在 <literal>&lt;affected&gt;</literal> 小节中。
		如果多个软件产品都采用了同样的基础代码，
		(比如说 FooBar、 FreeBar 和 OpenBar) 而且包含同样的 bug
		或漏洞。 请注意列出多个名字时， 应该在一个
		&lt;package&gt; 小节中完成。</para>
	    </callout>

	    <callout arearefs="co-vx-epo">
	      <para>如果可能， 版本的范围应包括
		<varname>PORTEPOCH</varname> 和
		<varname>PORTREVISION</varname>。
		务必注意， 根据加权规则， 带有非零 <varname>PORTEPOCH</varname>
		的版本， 系统会认为比没有
		<varname>PORTEPOCH</varname> 的版本高， 例如 <literal>3.0,1</literal>
		高于 <literal>3.1</literal> 甚至
		<literal>8.9</literal>。</para>
	    </callout>

	    <callout arearefs="co-vx-bdy">
	      <para>关于问题的摘要性信息。 此处使用
		XHTML。 务必要成对使用
		<literal>&lt;p&gt;</literal> 和 <literal>&lt;/p&gt;</literal>。
		可以使用较为复杂的标记， 但仅限于有助于让信息更准确和明了的修饰：
		请不要过分地美化。</para>
	    </callout>

	    <callout arearefs="co-vx-ref">
	      <para>这部分包含了相关的可供参考的文档。
		请尽可能多提供参考文献。</para>
	    </callout>

	    <callout arearefs="co-vx-fsa">
	      <para>指定
		<link xlink:href="http://www.freebsd.org/security/#adv">FreeBSD
		安全公告</link>。</para>
	    </callout>

	    <callout arearefs="co-vx-fpr">
	      <para>指定
		<link xlink:href="http://www.freebsd.org/support.html#gnats">FreeBSD
		问题报告</link>。</para>
	    </callout>

	    <callout arearefs="co-vx-cve">
	      <para>指定 <link xlink:href="http://www.cve.mitre.org/">Mitre
		CVE</link> ID。</para>
	    </callout>

	    <callout arearefs="co-vx-bid">
	      <para>指定
		<link xlink:href="http://www.securityfocus.com/bid">SecurityFocus
		Bug ID</link>。</para>
	    </callout>

	    <callout arearefs="co-vx-cts">
	      <para>指定
		<link xlink:href="http://www.cert.org/">US-CERT</link>
		安全公告。</para>
	    </callout>

	    <callout arearefs="co-vx-ctv">
	      <para>指定
		<link xlink:href="http://www.cert.org/">US-CERT</link>
		漏洞说明。</para>
	    </callout>

	    <callout arearefs="co-vx-ucs">
	      <para>指定
		<link xlink:href="http://www.cert.org/">US-CERT</link>
		计算机安全警报。</para>
	    </callout>

	    <callout arearefs="co-vx-uct">
	      <para>指定
		<link xlink:href="http://www.cert.org/">US-CERT</link>
		技术性计算机安全警报。</para>
	    </callout>

	    <callout arearefs="co-vx-mls">
	      <para>指向邮件列表存档的 URL。
		属性 <literal>msgid</literal> 是可选项，
		用以指定某一封信的 message ID。</para>
	    </callout>

	    <callout arearefs="co-vx-url">
	      <para>一般的 URL。 只有在没有其它更适合的参考文献时，
		才应使用它。</para>
	    </callout>

	    <callout arearefs="co-vx-dsc">
	      <para>问题被全面披露的日期
		(<replaceable>YYYY-MM-DD</replaceable>)。</para>
	    </callout>

	    <callout arearefs="co-vx-ent">
	      <para>记录加入到数据库中的日期
		(<replaceable>YYYY-MM-DD</replaceable>)。</para>
	    </callout>

	    <callout arearefs="co-vx-mod">
	      <para>记录最后一次被修改的日期
		(<replaceable>YYYY-MM-DD</replaceable>)。 新记录不应包括这个字段。
		只有在修改记录时才应加入它。</para>
	    </callout>
	  </calloutlist>
	</sect2>

	<sect2 xml:id="security-notify-vuxml-testing">
	  <title>测试您对 VuXML 数据库所作的修改</title>

	  <para>假定您打算撰写， 或已经写好了一个关于
	    package <literal>clamav</literal> 的问题描述， 并且，
	    已经知道 <literal>0.65_7</literal> 版本修正了这个问题。</para>

	  <para>您需要做的准备工作， 是 <emphasis>安装</emphasis> 一个新版本的
	    ports <package>ports-mgmt/portaudit</package> 程序、
	    <package>ports-mgmt/portaudit-db</package>， 以及
	    <package>security/vuxml</package>。</para>

	  <note>
	    <para>要运行 <command>packaudit</command>，
	      您必须拥有其
	      <filename>DATABASEDIR</filename>，
	      通常是 <filename>/var/db/portaudit</filename>
	      的写入权限。</para>

	    <para>您可以通过
	      <filename>DATABASEDIR</filename>
	      环境变量来指定一个不同的位置。</para>

	    <para>如果您的工作目录是
	      <filename>${PORTSDIR}/security/vuxml</filename>
	      以外的其它地方， 则应使用环境变量
	      <filename>VUXMLDIR</filename>
	      来指明
	      <filename>vuln.xml</filename> 的位置。</para>
	  </note>

	  <para>首先， 检查一下是否已经有了关于这个漏洞的描述。
	    如果已经有过这样的记录， 那么它将匹配较早版本的 package，
	    <literal>0.65_6</literal>：</para>

	  <screen>&prompt.user; <userinput>packaudit</userinput>
&prompt.user; <userinput>portaudit clamav-0.65_6</userinput></screen>

	  <para>如果什么都没有发现， 您就可以考虑写一个新的记录来描述这个漏洞了。
	    现在可以生成一个新的 UUID (假设它是
	    <literal>74a9541d-5d6c-11d8-80e3-0020ed76ef5a</literal>)，
	    然后将您的新记录加入到 VuXML 数据库中。 接下来，
	    用下面的命令来检查它是否符合语法：</para>

	  <screen>&prompt.user; <userinput>cd ${PORTSDIR}/security/vuxml &amp;&amp; make validate</userinput></screen>

	  <note>
	    <para>您需要安装下列 package 中的至少一个：
	      <package>textproc/libxml2</package>、
	      <package>textproc/jade</package>。</para>
	  </note>

	  <para>接下来从 VuXML 文件重构 <command>portaudit</command> 数据库：</para>

	  <screen>&prompt.user; <userinput>packaudit</userinput></screen>

	  <para>要验证您新加入的项的 <literal>&lt;affected&gt;</literal>
	    小节能够正确地匹配希望的 package， 可以使用下面的命令：</para>

	  <screen>&prompt.user; <userinput>portaudit -f /usr/ports/INDEX -r 74a9541d-5d6c-11d8-80e3-0020ed76ef5a</userinput></screen>

	  <note>
	    <para>请参见 &man.portaudit.1; 以了解关于这个命令语法的更多细节。</para>
	  </note>

	  <para>请确信新添加的记录不会在输出中匹配不应匹配的项。</para>

	  <para>现在检查您添加的记录所匹配的版本是否正确：</para>

	  <screen>&prompt.user; <userinput>portaudit clamav-0.65_6 clamav-0.65_7</userinput>
Affected package: clamav-0.65_6 (matched by clamav&lt;0.65_7)
Type of problem: clamav remote denial-of-service.
Reference: &lt;http://www.freebsd.org/ports/portaudit/74a9541d-5d6c-11d8-80e3-0020ed76ef5a.html&gt;

1 problem(s) found.</screen>

	  <para>显然， 前一个版本会匹配， 而后一个不会。</para>

	  <para>最后， 验证您从
	    VuXML 数据库中能够正确地得到预期的网页效果：</para>

	  <screen>&prompt.user; <userinput>mkdir -p ~/public_html/portaudit</userinput>
&prompt.user; <userinput>packaudit</userinput>
&prompt.user; <userinput>lynx ~/public_html/portaudit/74a9541d-5d6c-11d8-80e3-0020ed76ef5a.html</userinput></screen>
	</sect2>
      </sect1>
    </chapter>

    <chapter xml:id="porting-dads">
      <title>该做什么和不该做什么</title>

      <sect1 xml:id="dads-intro">
	<title>介绍</title>

      <para>这里是一些在移植软件时可能会遇到的常见问题。
	您应按照这个列表检查自己的 port， 同样地，
	您也可以帮助检查 <link xlink:href="http://www.FreeBSD.org/cgi/query-pr-summary.cgi?query">PR 数据库</link>
	中由其它人提交的 port。 请按照在
	<link xlink:href="&url.articles.contributing;/contrib-how.html#CONTRIB-GENERAL">问题报告和一般性注释</link> 中介绍的方法提交您的看法。
	帮助检查 PR 数据库中的 ports 即能够帮助我们更快地 commit 它们，
	也能证明您清楚地了解如何完成这些工作。</para>
      </sect1>

      <sect1 xml:id="porting-wrkdir">
	<title><varname>WRKDIR</varname> (联编时使用的临时目录)</title>

	<para>任何时候都不要在
	  <varname>WRKDIR</varname> 以外的位置写文件。 <varname>WRKDIR</varname>
	  是在 port 联编过程中唯一的一处一定可写的地方 (参见
	  <link xlink:href="&url.books.handbook;/ports-using.html#PORTS-CD">如何从
	  CDROM 安装 port</link> 以了解从只读的目录中联编和安装 port 的例子)。
	  如果您需要改变 <filename>pkg-*</filename>
	  文件， 请按照 <link linkend="porting-pkgfiles">重新定义某个变量</link> 介绍的方法，
	  而不是覆盖它们来实现。</para>
      </sect1>

      <sect1 xml:id="porting-wrkdirprefix">
	<title><varname>WRKDIRPREFIX</varname> (用于联编的临时目录的父目录名)</title>

	<para>一定要确保您的 port 尊重 <varname>WRKDIRPREFIX</varname> 的设置。
	  绝大多数 port 并不需要担心这个。 具体说来，
	  当引用其它 port 的 <varname>WRKDIR</varname> 时，
	  需要注意正确的位置应该是
	  <filename>WRKDIRPREFIXPORTSDIR/subdir/name/work</filename>
	  而不是 <filename>PORTSDIR/subdir/name/work</filename> 或 <filename>.CURDIR/../../subdir/name/work</filename>，
	  或别的什么。</para>

	<para>另外， 如果您自行定义了 <varname>WRKDIR</varname>， 也要把
	  <literal>&dollar;{WRKDIRPREFIX}&dollar;{.CURDIR}</literal> 放到前面。</para>
      </sect1>

      <sect1 xml:id="porting-versions">
	<title>区分不同的操作系统， 以及 OS 的版本</title>

	<para>在不同版本的 Unix 下可能需要对代码进行一些修改或增加少许编译选项，
	  才能够正确地编译和运行。 如果您需要根据一些条件来对代码进行修改，
	  请尽可能让这些修改通用， 这样， 我们就能够将这些代码移植回更早的 FreeBSD
	  系统， 并交叉移植到其它 BSD 系统， 例如来自 CSRG 的 4.4BSD，
	  BSD/386， 386BSD， NetBSD 和 OpenBSD。</para>

	<para>推荐的获得 4.3BSD/Reno (1990) 以及更新版本 BSD 代码版本号的方式， 是使用
	  <link xlink:href="http://cvsweb.freebsd.org/src/sys/sys/param.h">sys/param.h</link>
	  中所定义的 <literal>BSD</literal> 宏的值。 一般来说这个文件已经被引用了；
	  如果没有的话， 增加下述代码：</para>

	<programlisting>#if (defined(__unix__) || defined(unix)) &amp;&amp; !defined(USG)
#include &lt;sys/param.h&gt;
#endif</programlisting>

	<para>到 <filename>.c</filename> 文件中合适的地方。
	  我们相信所有定义了这两个符号的系统中， 都提供了
	  <filename>sys/param.h</filename>。 如果您发现有不这样做的系统，
	  请通过致信 &a.ports; 让我们了解这一情况。</para>

	<para>另一种方法是使用 GNU Autoconf 风格的方式：</para>

	<programlisting>#ifdef HAVE_SYS_PARAM_H
#include &lt;sys/param.h&gt;
#endif</programlisting>

	<para>采用这种方法时， 不要忘了把 <literal>-DHAVE_SYS_PARAM_H</literal> 加到
	  <filename>Makefile</filename> 中的 <varname>CFLAGS</varname> 里。</para>

	<para>一旦引用了 <filename>sys/param.h</filename>， 您就可以使用：</para>

	<programlisting>#if (defined(BSD) &amp;&amp; (BSD &gt;= 199103))</programlisting>

	<para>来检测代码是否正在 4.3 Net2 代码基础，
	  或更新的系统上编译 (例如 FreeBSD 1.x， 4.3/Reno， NetBSD 0.9， 386BSD，
	  BSD/386 1.1 以及更高版本)。</para>

	<para>使用：</para>

	<programlisting>#if (defined(BSD) &amp;&amp; (BSD &gt;= 199306))</programlisting>

	<para>来检测代码是否正在 4.4 或更新的系统 (例如 FreeBSD 2.x， 4.4，
	  NetBSD 1.0、 BSD/386 2.0 或更高版本)。</para>

	<para>对于 4.4BSD-Lite2 代码系来说， <literal>BSD</literal> 宏的值应该是
	  <literal>199506</literal>。 这里只是作为信息提供，
	  您不应使用它来区分基于 4.4-Lite 的 FreeBSD 和基于 4.4-Lite2 的版本。
	  这些情况下， 您应使用
	  <literal>__FreeBSD__</literal> 宏。</para>

	<para>保守地使用：</para>

	<itemizedlist>
	  <listitem>
	    <para><literal>__FreeBSD__</literal> 在所有版本的
	      FreeBSD 中皆有定义。 如果您正进行的修改
	      <emphasis>只</emphasis> 影响 FreeBSD， 则应使用这个宏。
	      类似 <literal>sys_errlist[]</literal> 之于
	      <function>strerror()</function> 这样的移植问题是伯克利代码系公用的，
	      而并非 FreeBSD 所专有。</para>
	  </listitem>

	  <listitem>
	    <para>在 FreeBSD 2.x 中， <literal>__FreeBSD__</literal>
	      定义为 <literal>2</literal>。 更早版本中， 它曾经是
	      <literal>1</literal>。 新的版本都会在主要的版本号变化时变更它。</para>
	  </listitem>

	  <listitem>
	    <para>如果您需要区分 FreeBSD 1.x 系统和 FreeBSD 2.x 及更高版本的区别，
	      通常应使用前述的 <literal>BSD</literal> 宏来进行。
	      如果事实上需要一个 FreeBSD 专有的修改 (例如，
	      在使用 <command>ld</command> 时需要特殊的共享库选项)，
	      则可以用 <literal>__FreeBSD__</literal> 和 <literal>#if
		__FreeBSD__ &gt; 1</literal> 来检测 FreeBSD 2.x 和新系统上的变化。
	      如果需要更细粒度地检测 FreeBSD 2.0-RELEASE 之后版本的变化，
	      则可以使用：</para>

	    <programlisting>#if __FreeBSD__ &gt;= 2
#include &lt;osreldate.h&gt;
#    if __FreeBSD_version &gt;= 199504
	 /* 适用于 2.0.5+ 版本的代码 */
#    endif
#endif</programlisting>
	  </listitem>
	</itemizedlist>

	<para>在已有的数百个 port 中， 只有一两个应该使用 <literal>__FreeBSD__</literal>。
	  早期的 port 在不适当的地方使用了它并引发问题，
	  并不意味着您也必定如此。</para>
      </sect1>

      <sect1 xml:id="freebsd-versions">
	<title>__FreeBSD_version 值</title>

	  <para>下面是在 <link xlink:href="http://cvsweb.freebsd.org/src/sys/sys/param.h">sys/param.h</link>
	    <literal>__FreeBSD_version</literal> 中定义的值及其意义的列表，
	    这里给出以方便您查阅：</para>

		<table frame="none">
		  <title>__FreeBSD_version 值</title>
		<tgroup cols="3">
		<thead>
		  <row>
                    <entry>值</entry>
                    <entry>日期</entry>
		    <entry>版本</entry>
		  </row>
		</thead>

		<tbody>
		  <row>
		    <entry>119411</entry>
		    <entry/>
		    <entry>2.0-RELEASE</entry>
		  </row>

		  <row>
		    <entry>199501, 199503</entry>
		    <entry>March 19, 1995</entry>
		    <entry>2.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>199504</entry>
		    <entry>April 9, 1995</entry>
		    <entry>2.0.5-RELEASE</entry>
		  </row>

		  <row>
		    <entry>199508</entry>
		    <entry>August 26, 1995</entry>
		    <entry>2.1 之前的 2.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>199511</entry>
		    <entry>November 10, 1995</entry>
		    <entry>2.1.0-RELEASE</entry>
		  </row>

		  <row>
		    <entry>199512</entry>
		    <entry>November 10, 1995</entry>
		    <entry>2.1.5 之前的 2.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>199607</entry>
		    <entry>July 10, 1996</entry>
		    <entry>2.1.5-RELEASE</entry>
		  </row>

		  <row>
		    <entry>199608</entry>
		    <entry>July 12, 1996</entry>
		    <entry>2.1.6 之前的 2.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>199612</entry>
		    <entry>November 15, 1996</entry>
		    <entry>2.1.6-RELEASE</entry>
		  </row>

		  <row>
		    <entry>199612</entry>
		    <entry/>
		    <entry>2.1.7-RELEASE</entry>
		  </row>

		  <row>
		    <entry>220000</entry>
		    <entry>February 19, 1997</entry>
		    <entry>2.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>(not changed)</entry>
		    <entry/>
		    <entry>2.2.1-RELEASE</entry>
		  </row>

		  <row>
		    <entry>(无变化)</entry>
		    <entry/>
		    <entry>在 2.2.1-RELEASE 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>221001</entry>
		    <entry>April 15, 1997</entry>
		    <entry>texinfo-3.9 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>221002</entry>
		    <entry>April 30, 1997</entry>
		    <entry>top 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>222000</entry>
		    <entry>May 16, 1997</entry>
		    <entry>2.2.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>222001</entry>
		    <entry>May 19, 1997</entry>
		    <entry>2.2.2-RELEASE 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>225000</entry>
		    <entry>October 2, 1997</entry>
		    <entry>2.2.5-RELEASE</entry>
		  </row>

		  <row>
		    <entry>225001</entry>
		    <entry>November 20, 1997</entry>
		    <entry>2.2.5-RELEASE 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>225002</entry>
		    <entry>December 27, 1997</entry>
		    <entry>合并 ldconfig -R 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>226000</entry>
		    <entry>March 24, 1998</entry>
		    <entry>2.2.6-RELEASE</entry>
		  </row>

		  <row>
		    <entry>227000</entry>
		    <entry>July 21, 1998</entry>
		    <entry>2.2.7-RELEASE</entry>
		  </row>

		  <row>
		    <entry>227001</entry>
		    <entry>July 21, 1998</entry>
		    <entry>2.2.7-RELEASE 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>227002</entry>
		    <entry>September 19, 1998</entry>
		    <entry>&man.semctl.2; 修改之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>228000</entry>
		    <entry>November 29, 1998</entry>
		    <entry>2.2.8-RELEASE</entry>
		  </row>

		  <row>
		    <entry>228001</entry>
		    <entry>November 29, 1998</entry>
		    <entry>2.2.8-RELEASE 之后的 2.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>300000</entry>
		    <entry>February 19, 1996</entry>
		    <entry>&man.mount.2; 修改之前的 3.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>300001</entry>
		    <entry>September 24, 1997</entry>
		    <entry>&man.mount.2; 修改之后的 3.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>300002</entry>
		    <entry>June 2, 1998</entry>
		    <entry>&man.semctl.2; 修改之后的 3.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>300003</entry>
		    <entry>June 7, 1998</entry>
		    <entry>ioctl 参数变化之后的 3.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>300004</entry>
		    <entry>September 3, 1998</entry>
		    <entry>ELF 变换之后的 3.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>300005</entry>
		    <entry>October 16, 1998</entry>
		    <entry>3.0-RELEASE</entry>
		  </row>

		  <row>
		    <entry>300006</entry>
		    <entry>October 16, 1998</entry>
		    <entry>3.0-RELEASE 之后的 3.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>300007</entry>
		    <entry>January 22, 1999</entry>
		    <entry>3/4切分之后的 3.0-STABLE</entry>
		  </row>

		  <row>
		    <entry>310000</entry>
		    <entry>February 9, 1999</entry>
		    <entry>3.1-RELEASE</entry>
		  </row>

		  <row>
		    <entry>310001</entry>
		    <entry>March 27, 1999</entry>
		    <entry>3.1-RELEASE 之后的 3.1-STABLE</entry>
		  </row>

		  <row>
		    <entry>310002</entry>
		    <entry>April 14, 1999</entry>
		    <entry>C++ 构建/析构函数顺序变化之后的 3.1-STABLE</entry>
		  </row>

		  <row>
		    <entry>320000</entry>
		    <entry/>
		    <entry>3.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>320001</entry>
		    <entry>May 8, 1999</entry>
		    <entry>3.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>320002</entry>
		    <entry>August 29, 1999</entry>
		    <entry>二进制不兼容的 IPFW 和 socket 变化之后的 3.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>330000</entry>
		    <entry>September 2, 1999</entry>
		    <entry>3.3-RELEASE</entry>
		  </row>

		  <row>
		    <entry>330001</entry>
		    <entry>September 16, 1999</entry>
		    <entry>3.3-STABLE</entry>
		  </row>

		  <row>
		    <entry>330002</entry>
		    <entry>November 24, 1999</entry>
		    <entry>libc 中加入 &man.mkstemp.3; 之后的 3.3-STABLE</entry>
		  </row>

		  <row>
		    <entry>340000</entry>
		    <entry>December 5, 1999</entry>
		    <entry>3.4-RELEASE</entry>
		  </row>

		  <row>
		    <entry>340001</entry>
		    <entry>December 17, 1999</entry>
		    <entry>3.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>350000</entry>
		    <entry>June 20, 2000</entry>
		    <entry>3.5-RELEASE</entry>
		  </row>

		  <row>
		    <entry>350001</entry>
		    <entry>July 12, 2000</entry>
		    <entry>3.5-STABLE</entry>
		  </row>

		  <row>
		    <entry>400000</entry>
		    <entry>January 22, 1999</entry>
		    <entry>3/4切分之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400001</entry>
		    <entry>February 20, 1999</entry>
		    <entry>修改动态连接器处理方式之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400002</entry>
		    <entry>March 13, 1999</entry>
		    <entry>C++ 构建/析构函数顺序变化之后的</entry>
		  </row>

		  <row>
		    <entry>400003</entry>
		    <entry>March 27, 1999</entry>
		    <entry>提供 &man.dladdr.3; 之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400004</entry>
		    <entry>April 5, 1999</entry>
		    <entry>修正了 __deregister_frame_info 的 4.0-CURRENT
		      (也表示在 EGCS 1.1.2
		      集成之后的 4.0-CURRENT)
		    </entry>
		  </row>

		  <row>
		    <entry>400005</entry>
		    <entry>April 27, 1999</entry>
		    <entry>&man.suser.9; API 变化之后的 4.0-CURRENT
		      (也表示 newbus 之后的 4.0-CURRENT)</entry>
		  </row>

		  <row>
		    <entry>400006</entry>
		    <entry>May 31, 1999</entry>
		    <entry>cdevsw 注册机制改变之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400007</entry>
		    <entry>June 17, 1999</entry>
		    <entry>加入了 socket 级凭据的 so_cred 之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400008</entry>
		    <entry>June 20, 1999</entry>
		    <entry>在 libc_r 中加入 poll 系统调用接口之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400009</entry>
		    <entry>July 20, 1999</entry>
		    <entry>将内核中
		      <literal>dev_t</literal> 类型改为 <literal>struct
		      specinfo</literal> 指针之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400010</entry>
		    <entry>September 25, 1999</entry>
		    <entry>修正了一处 &man.jail.2; 漏洞之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400011</entry>
		    <entry>September 29, 1999</entry>
		    <entry><literal>sigset_t</literal> 数据类型改变之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400012</entry>
		    <entry>November 15, 1999</entry>
		    <entry>切换到 GCC 2.95.2 编译器之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400013</entry>
		    <entry>December 4, 1999</entry>
		    <entry>加入了可插的 linux模式 ioctl 处理程序后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400014</entry>
		    <entry>January 18, 2000</entry>
		    <entry>引入 OpenSSL 之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400015</entry>
		    <entry>January 27, 2000</entry>
		    <entry>GCC 2.95.2 中 ABI 默认值从 -fvtable-thunks 改为
		      -fno-vtable-thunks 之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400016</entry>
		    <entry>February 27, 2000</entry>
		    <entry>引入 OpenSSH 之后的 4.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>400017</entry>
		    <entry>March 13, 2000</entry>
		    <entry>4.0-RELEASE</entry>
		  </row>

		  <row>
		    <entry>400018</entry>
		    <entry>March 17, 2000</entry>
		    <entry>4.0-RELEASE 之后的 4.0-STABLE</entry>
		  </row>

		  <row>
		    <entry>400019</entry>
		    <entry>May 5, 2000</entry>
		    <entry>引入延迟校验和之后的 4.0-STABLE</entry>
		  </row>

		  <row>
		    <entry>400020</entry>
		    <entry>June 4, 2000</entry>
		    <entry>将 libxpg4 的代码并入 libc 之后的 4.0-STABLE</entry>
		  </row>

		  <row>
		    <entry>400021</entry>
		    <entry>July 8, 2000</entry>
		    <entry>Binutils 升级到 2.10.0 之后的 4.0-STABLE， ELF
		      标志变化， 以及将 tcsh 引入基本系统</entry>
		  </row>

		  <row>
		    <entry>410000</entry>
		    <entry>July 14, 2000</entry>
		    <entry>4.1-RELEASE</entry>
		  </row>

		  <row>
		    <entry>410001</entry>
		    <entry>July 29, 2000</entry>
		    <entry>4.1-RELEASE 之后的 4.1-STABLE</entry>
		  </row>

		  <row>
		    <entry>410002</entry>
		    <entry>September 16, 2000</entry>
		    <entry>&man.setproctitle.3; 从 libutil 移入 libc
		      之后的 4.1-STABLE</entry>
		  </row>

		  <row>
		    <entry>411000</entry>
		    <entry>September 25, 2000</entry>
		    <entry>4.1.1-RELEASE</entry>
		  </row>

		  <row>
		    <entry>411001</entry>
		    <entry/>
		    <entry>4.1.1-RELEASE 之后的 4.1.1-STABLE</entry>
		  </row>

		  <row>
		    <entry>420000</entry>
		    <entry>October 31, 2000</entry>
		    <entry>4.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>420001</entry>
		    <entry>January 10, 2001</entry>
		    <entry>合并 libgcc.a 和 libgcc_r.a，
		      并修改了相关的 GCC 连接方式之后的 4.2-STABLE</entry>
		  </row>

		  <row>
		    <entry>430000</entry>
		    <entry>March 6, 2001</entry>
		    <entry>4.3-RELEASE</entry>
		  </row>

		  <row>
		    <entry>430001</entry>
		    <entry>May 18, 2001</entry>
		    <entry>引入 wint_t 之后的 4.3-STABLE</entry>
		  </row>

		  <row>
		    <entry>430002</entry>
		    <entry>July 22, 2001</entry>
		    <entry>PCI 电源状态 API 合并之后的 4.3-STABLE</entry>
		  </row>

		  <row>
		    <entry>440000</entry>
		    <entry>August 1, 2001</entry>
		    <entry>4.4-RELEASE</entry>
		  </row>

		  <row>
		    <entry>440001</entry>
		    <entry>October 23, 2001</entry>
		    <entry>引入 d_thread_t 之后的 4.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>440002</entry>
		    <entry>November 4, 2001</entry>
		    <entry>mount 结构改变之后的 4.4-STABLE (影响文件系统 kld)</entry>
		  </row>

		  <row>
		    <entry>440003</entry>
		    <entry>December 18, 2001</entry>
		    <entry>用户态部分的 smbfs 被引入之后的 4.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>450000</entry>
		    <entry>December 20, 2001</entry>
		    <entry>4.5-RELEASE</entry>
		  </row>

		  <row>
		    <entry>450001</entry>
		    <entry>February 24, 2002</entry>
		    <entry>usb 结构元素改名之后的 4.5-STABLE</entry>
		  </row>

		  <row>
		    <entry>450004</entry>
		    <entry>April 16, 2002</entry>
		    <entry>在 &man.rc.conf.5; 变量
		      <literal>sendmail_enable</literal> 默认值改为
		      <literal>NONE</literal> 之后的 4.5-STABLE</entry>
		  </row>

		  <row>
		    <entry>450005</entry>
		    <entry>April 27, 2002</entry>
		    <entry>默认将 XFree86 4 用于预编译包联编之后的 4.5-STABLE</entry>
		  </row>

		  <row>
		    <entry>450006</entry>
		    <entry>May 1, 2002</entry>
		    <entry>accept 过滤器修正了安全问题并且不再会轻易被 DoS
		      之后的 4.5-STABLE</entry>
		  </row>

		  <row>
		    <entry>460000</entry>
		    <entry>June 21, 2002</entry>
		    <entry>4.6-RELEASE</entry>
		  </row>

		  <row>
		    <entry>460001</entry>
		    <entry>June 21, 2002</entry>
		    <entry>修正了 &man.sendfile.2; 以吻合文档，
		      而不再根据发出的头计算发出数据量之后的 4.6-STABLE</entry>
		  </row>

		  <row>
		    <entry>460002</entry>
		    <entry>July 19, 2002</entry>
		    <entry>4.6.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>460100</entry>
		    <entry>June 26, 2002</entry>
		    <entry>4.6-STABLE</entry>
		  </row>

		  <row>
		    <entry>460101</entry>
		    <entry>June 26, 2002</entry>
		    <entry>MFC `sed -i' 之后的 4.6-STABLE</entry>
		  </row>

		  <row>
		    <entry>460102</entry>
		    <entry>September 1, 2002</entry>
		    <entry>MFC 许多 pkg_install 新特性之后的 4.6-STABLE</entry>
		  </row>

		  <row>
		    <entry>470000</entry>
		    <entry>October 8, 2002</entry>
		    <entry>4.7-RELEASE</entry>
		  </row>

		  <row>
		    <entry>470100</entry>
		    <entry>October 9, 2002</entry>
		    <entry>4.7-STABLE</entry>
		  </row>

		  <row>
		    <entry>470101</entry>
		    <entry>November 10, 2002</entry>
		    <entry>开始生成 __std{in,out,err}p 引用， 而不是 __sF。
		      这将 std{in,out,err} 从编译时表达式变成了运行时值。</entry>
		  </row>

		  <row>
		    <entry>470102</entry>
		    <entry>January 23, 2003</entry>
		    <entry>MFC mbuf 相关的将 m_aux mbuf 改为 m_tag
		       的修改之后的 4.7-STABLE</entry>
		  </row>

		  <row>
		    <entry>470103</entry>
		    <entry>February 14, 2003</entry>
		    <entry>OpenSSL 升级到 0.9.7 之后的 4.7-STABLE</entry>
		  </row>

		  <row>
		    <entry>480000</entry>
		    <entry>March 30, 2003</entry>
		    <entry>4.8-RELEASE</entry>
		  </row>

		  <row>
		    <entry>480100</entry>
		    <entry>April 5, 2003</entry>
		    <entry>4.8-STABLE</entry>
		  </row>

		  <row>
		    <entry>480101</entry>
		    <entry>May 22, 2003</entry>
		    <entry>&man.realpath.3; 变为线程安全的之后的 4.8-STABLE</entry>
		  </row>

		  <row>
		    <entry>480102</entry>
		    <entry>August 10, 2003</entry>
		    <entry>对 twe 的 3ware API 修改之后的 4.8-STABLE</entry>
		  </row>

		  <row>
		    <entry>490000</entry>
		    <entry>October 27, 2003</entry>
		    <entry>4.9-RELEASE</entry>
		  </row>

		  <row>
		    <entry>490100</entry>
		    <entry>October 27, 2003</entry>
		    <entry>4.9-STABLE</entry>
		  </row>

		  <row>
		    <entry>490101</entry>
		    <entry>January 8, 2004</entry>
		    <entry>kinfo_eproc 中加入 e_sid 之后的 4.9-STABLE</entry>
		  </row>

		  <row>
		    <entry>490102</entry>
		    <entry>February 4, 2004</entry>
		    <entry>MFC rtld 的 libmap 功能之后的 4.9-STABLE</entry>
		  </row>

		  <row>
		    <entry>491000</entry>
		    <entry>May 25, 2004</entry>
		    <entry>4.10-RELEASE</entry>
		  </row>

		  <row>
		    <entry>491100</entry>
		    <entry>June 1, 2004</entry>
		    <entry>4.10-STABLE</entry>
		  </row>

		  <row>
		    <entry>491101</entry>
		    <entry>August 11, 2004</entry>
		    <entry>MFC 20040629 版本的包维护工具之后的 4.10-STABLE</entry>
		  </row>

		  <row>
		    <entry>491102</entry>
		    <entry>November 16, 2004</entry>
		    <entry>修正了 VM 当解除 wire 不存在页面时的问题之后的
		      4.10-STABLE</entry>
		  </row>

		  <row>
		    <entry>492000</entry>
		    <entry>December 17, 2004</entry>
		    <entry>4.11-RELEASE</entry>
		  </row>

		  <row>
		    <entry>492100</entry>
		    <entry>December 17, 2004</entry>
		    <entry>4.11-STABLE</entry>
		  </row>

		  <row>
		    <entry>492101</entry>
		    <entry>April 18, 2006</entry>
		    <entry>将 libdata/ldconfig 目录加入 mtree 文件之后的
		      4.11-STABLE。</entry>
		  </row>

		  <row>
		    <entry>500000</entry>
		    <entry>March 13, 2000</entry>
		    <entry>5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500001</entry>
		    <entry>April 18, 2000</entry>
		    <entry>加入 ELF 头字段， 并改变我们的 ELF 执行文件标记方式之后的
		      5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500002</entry>
		    <entry>May 2, 2000</entry>
		    <entry>kld 元数据修改之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500003</entry>
		    <entry>May 18, 2000</entry>
		    <entry>buf/bio 修改之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500004</entry>
		    <entry>May 26, 2000</entry>
		    <entry>binutils 升级后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500005</entry>
		    <entry>June 3, 2000</entry>
		    <entry>将 libxpg4 并入 libc，
		      以及引入 TASKQ 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500006</entry>
		    <entry>June 10, 2000</entry>
		    <entry>加入 AGP 接口之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500007</entry>
		    <entry>June 29, 2000</entry>
		    <entry>Perl 升级到 5.6.0 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500008</entry>
		    <entry>July 7, 2000</entry>
		    <entry>KAME 代码升级到 2000/07 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500009</entry>
		    <entry>July 14, 2000</entry>
		    <entry>ether_ifattach() 和 ether_detach()
		      修改之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500010</entry>
		    <entry>July 16, 2000</entry>
		    <entry>将 mtree 改为原先的默认值，
		      并使用 -L 来跟随符号连接之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500011</entry>
		    <entry>July 18, 2000</entry>
		    <entry>kqueue API 修改之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500012</entry>
		    <entry>September 2, 2000</entry>
		    <entry>&man.setproctitle.3; 从 libutil 挪到 libc 之后的
		      5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500013</entry>
		    <entry>September 10, 2000</entry>
		    <entry>首个 SMPng commit 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500014</entry>
		    <entry>January 4, 2001</entry>
		    <entry>&lt;sys/select.h&gt; 改为 &lt;sys/selinfo.h&gt;
		      之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500015</entry>
		    <entry>January 10, 2001</entry>
		    <entry>libgcc.a 和 libgcc_r.a 以及 GCC
		      连接方式变动之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500016</entry>
		    <entry>January 24, 2001</entry>
		    <entry>修改以允许 libc 和 libc_r 连接到一起，
		      不再鼓励使用 -pthread 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500017</entry>
		    <entry>February 18, 2001</entry>
		    <entry>从 struct ucred 切换到 struct xucred
		      以便使内核为 mountd 等程序导出的 API 稳定下来之后的
		      5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500018</entry>
		    <entry>February 24, 2001</entry>
		    <entry>加入 CPUTYPE 用于 CPU 专用的优化的
		      make 变量之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500019</entry>
		    <entry>June 9, 2001</entry>
		    <entry>machine/ioctl_fd.h 改为 sys/fdcio.h 之后的
		      5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500020</entry>
		    <entry>June 15, 2001</entry>
		    <entry>locale 名称改变之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500021</entry>
		    <entry>June 22, 2001</entry>
		    <entry>引入 bzip2 之后的 5.0-CURRENT，
		    同时也代表删去了 S/Key</entry>
		  </row>

		  <row>
		    <entry>500022</entry>
		    <entry>July 12, 2001</entry>
		    <entry>加入 SSE 支持之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500023</entry>
		    <entry>September 14, 2001</entry>
		    <entry>KSE 第2个里程碑之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500024</entry>
		    <entry>October 1, 2001</entry>
		    <entry>d_thread_t 之后的 5.0-CURRENT，
		      同时 UUCP 被移入 ports</entry>
		  </row>

		  <row>
		    <entry>500025</entry>
		    <entry>October 4, 2001</entry>
		    <entry>64-位平台上的描述符和 creds API 变化之后的
		      5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500026</entry>
		    <entry>October 9, 2001</entry>
		    <entry>采用 XFree86 4 作为默认的预编译包，
		      以及加入 strnstr() libc 函数之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500027</entry>
		    <entry>October 10, 2001</entry>
		    <entry>加入 strcasestr() libc 函数之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500028</entry>
		    <entry>December 14, 2001</entry>
		    <entry>引入了用户态的 smbfs 组件之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>(未予增加)</entry>
		    <entry/>
		    <entry>加入了新的 C99 指定位宽整形变量之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500029</entry>
		    <entry>January 29, 2002</entry>
		    <entry>修改了 &man.sendfile.2; 的返回值之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500030</entry>
		    <entry>February 15, 2002</entry>
		    <entry>引入适合表达文件标志的 <literal>fflags_t</literal>
		      类型之后的 5.0-</entry>
		  </row>

		  <row>
		    <entry>500031</entry>
		    <entry>February 24, 2002</entry>
		    <entry>usb 结构元素改名之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500032</entry>
		    <entry>March 16, 2002</entry>
		    <entry>引入 Perl 5.6.1 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500033</entry>
		    <entry>April 3, 2002</entry>
		    <entry>&man.rc.conf.5; 变量
		      <literal>sendmail_enable</literal> 默认值改为
		      <literal>NONE</literal> 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500034</entry>
		    <entry>April 30, 2002</entry>
		    <entry>mtx_init() 增加了第三个参数之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500035</entry>
		    <entry>May 13, 2002</entry>
		    <entry>包含 Gcc 3.1 的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500036</entry>
		    <entry>May 17, 2002</entry>
		    <entry>在 /usr/src 中删去了 Perl 的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500037</entry>
		    <entry>May 29, 2002</entry>
		    <entry>加入 &man.dlfunc.3; 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500038</entry>
		    <entry>July 24, 2002</entry>
		    <entry>一些 struct sockbuf 的成员变为结构，
		      并重新排列顺序之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500039</entry>
		    <entry>September 1, 2002</entry>
		    <entry>引入 GCC 3.2.1 之后的 5.0-CURRENT。 头文件也不再使用
		      _BSD_FOO_T_ 而开始使用 _FOO_T_DECLARED。
		      这个值还可以用于作为一个包含使用 &man.bzip2.1;
		      的预编译包支持的预期点。</entry>
		  </row>

		  <row>
		    <entry>500040</entry>
		    <entry>September 20, 2002</entry>
		    <entry>以去掉对 disklabel 结构内容的依赖的名义，
		      对磁盘相关的函数进行了许多修改之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500041</entry>
		    <entry>October 1, 2002</entry>
		    <entry>libc 中加入 &man.getopt.long.3; 之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500042</entry>
		    <entry>October 15, 2002</entry>
		    <entry>Binutils 2.13 升级， 包含了新的 FreeBSD 模拟，
		      vec 以及输出格式之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500043</entry>
		    <entry>November 1, 2002</entry>
		    <entry>libc 中加入了弱 pthread_XXX 符号之后的 5.0-CURRENT，
		      从而淘汰了 libXThrStub.so。 5.0-RELEASE。</entry>
		  </row>

		  <row>
		    <entry>500100</entry>
		    <entry>January 17, 2003</entry>
		    <entry>创建 RELENG_5_0 分支之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500101</entry>
		    <entry>February 19, 2003</entry>
		    <entry>&lt;sys/dkstat.h&gt; 变成了一个空文件， 不应再被引用</entry>
		  </row>

		  <row>
		    <entry>500102</entry>
		    <entry>February 25, 2003</entry>
		    <entry>修改 d_mmap_t 接口之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500103</entry>
		    <entry>February 26, 2003</entry>
		    <entry>taskqueue_swi 以无全局锁的方式运行之后的 5.0-CURRENT，
		      同时还加入了使用全局锁的 taskqueue_swi_giant</entry>
		  </row>

		  <row>
		    <entry>500104</entry>
		    <entry>February 27, 2003</entry>
		    <entry>去掉了 cdevsw_add() 和 cdevsw_remove()
		      出现 MAJOR_AUTO 分配机制</entry>
		  </row>

		  <row>
		    <entry>500105</entry>
		    <entry>March 4, 2003</entry>
		    <entry>采用新的 cdevsw 初始化方法之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500106</entry>
		    <entry>March 8, 2003</entry>
		    <entry>devstat_add_entry() 被
		      devstat_new_entry() 取代</entry>
		  </row>

		  <row>
		    <entry>500107</entry>
		    <entry>March 15, 2003</entry>
		    <entry>修改 devstat 接口； 请参见 sys/sys/param.h 1.149</entry>
		  </row>

		  <row>
		    <entry>500108</entry>
		    <entry>March 15, 2003</entry>
		    <entry>改变了 Token-Ring 接口</entry>
		  </row>

		  <row>
		    <entry>500109</entry>
		    <entry>March 25, 2003</entry>
		    <entry>加入 vm_paddr_t</entry>
		  </row>

		  <row>
		    <entry>500110</entry>
		    <entry>March 28, 2003</entry>
		    <entry>将 &man.realpath.3; 改为线程安全之后的
		      5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500111</entry>
		    <entry>April 9, 2003</entry>
		    <entry>&man.usbhid.3; 与 NetBSD 同步之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500112</entry>
		    <entry>April 17, 2003</entry>
		    <entry>加入新的 NSS 实现， 以及 POSIX.1 getpw*_r, getgr*_r
		      函数之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>500113</entry>
		    <entry>May 2, 2003</entry>
		    <entry>删去旧式 rc 系统之后的 5.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501000</entry>
		    <entry>June 4, 2003</entry>
		    <entry>5.1-RELEASE.</entry>
		  </row>

		  <row>
		    <entry>501100</entry>
		    <entry>June 2, 2003</entry>
		    <entry>创建 RELENG_5_1 分支之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501101</entry>
		    <entry>June 29, 2003</entry>
		    <entry>改正 sigtimedwait(2) 和 sigwaitinfo(2)
		      语义之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501102</entry>
		    <entry>July 3, 2003</entry>
		    <entry>在 &man.bus.dma.tag.create.9; 中加入了 lockfunc
		      和 lockfuncarg 字段之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501103</entry>
		    <entry>July 31, 2003</entry>
		    <entry>集成了 GCC 3.3.1-pre 20030711 之后的
		      5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501104</entry>
		    <entry>August 5, 2003</entry>
		    <entry>twe 中 3ware API 变化之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501105</entry>
		    <entry>August 17, 2003</entry>
		    <entry>允许动态连接 /bin 和 /sbin，
		      以及将某些库移动到 /lib 之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501106</entry>
		    <entry>September 8, 2003</entry>
		    <entry>增加内核级 Coda 6.x 支持之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501107</entry>
		    <entry>September 17, 2003</entry>
		    <entry>将 16550 UART 常量从
		      <filename>&lt;dev/sio/sioreg.h&gt;</filename> 挪到
		      <filename>&lt;dev/ic/ns16550.h&gt;</filename> 之后的
		      5.1-CURRENT。 此外， rtld 也从此无条件支持 libmap 功能</entry>
		  </row>

		  <row>
		    <entry>501108</entry>
		    <entry>September 23, 2003</entry>
		    <entry>更新 PFIL_HOOKS API 之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501109</entry>
		    <entry>September 27, 2003</entry>
		    <entry>增加 kiconv(3) 之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501110</entry>
		    <entry>September 28, 2003</entry>
		    <entry>默认的 cdevsw open 和 close 操作变化之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501111</entry>
		    <entry>October 16, 2003</entry>
		    <entry>cdevsw 的布局变化之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501112</entry>
		    <entry>October 16, 2003</entry>
		    <entry>增加 kobj 多继承之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501113</entry>
		    <entry>October 31, 2003</entry>
		    <entry>修改 struct ifnet 中的 if_xname 之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>501114</entry>
		    <entry>November 16, 2003</entry>
		    <entry>将 /bin 和 /sbin 改为动态连接之后的 5.1-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502000</entry>
		    <entry>December 7, 2003</entry>
		    <entry>5.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>502010</entry>
		    <entry>February 23, 2004</entry>
		    <entry>5.2.1-RELEASE</entry>
		  </row>

		  <row>
		    <entry>502100</entry>
		    <entry>December 7, 2003</entry>
		    <entry>创建 RELENG_5_2 分支之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502101</entry>
		    <entry>December 19, 2003</entry>
		    <entry>libc 中加入了 __cxa_atexit/__cxa_finalize
			两个函数之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502102</entry>
		    <entry>January 30, 2004</entry>
		    <entry>默认线程库从 libc_r 改为 libpthread 之后的
			5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502103</entry>
		    <entry>February 21, 2004</entry>
		    <entry>设备驱动 API 大规模翻修之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502104</entry>
		    <entry>February 25, 2004</entry>
		    <entry>增加 getopt_long_only() 之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502105</entry>
		    <entry>March 5, 2004</entry>
		    <entry>C 的 NULL 定义改为 ((void *)0) 之后的 5.2-CURRENT，
			这会产生更多的编译警告</entry>
		  </row>

		  <row>
		    <entry>502106</entry>
		    <entry>March 8, 2004</entry>
		    <entry>pf 连入联编和安装过程之后的 5.2-CURRENT
		    </entry>
		  </row>

		  <row>
		    <entry>502107</entry>
		    <entry>March 10, 2004</entry>
		    <entry>在 sparc64 上将 time_t 改为 64-位 值之后的 5.2-CURRENT
		    </entry>
		  </row>

		  <row>
		    <entry>502108</entry>
		    <entry>March 12, 2004</entry>
		    <entry>在一些头文件修改以支持 Intel C/C++ 编译器，
			以及让 execve(2) 更严格地符合 POSIX 之后的
			5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502109</entry>
		    <entry>March 22, 2004</entry>
		    <entry>引入 bus_alloc_resource_any API 之后的 5.2-CURRENT
		    </entry>
		  </row>

		  <row>
		    <entry>502110</entry>
		    <entry>March 27, 2004</entry>
		    <entry>加入 UTF-8 locale 之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502111</entry>
		    <entry>April 11, 2004</entry>
		    <entry>删去 getvfsent(3) API 之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502112</entry>
		    <entry>April 13, 2004</entry>
		    <entry>为 make(1) 增加 .warning 语句之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502113</entry>
		    <entry>June 4, 2004</entry>
		    <entry>所有串口设备都强制使用 ttyioctl() 之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502114</entry>
		    <entry>June 13, 2004</entry>
		    <entry>引入 ALTQ 框架之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502115</entry>
		    <entry>June 14, 2004</entry>
		    <entry>修改 sema_timedwait(9) 使其成功时返回 0，
		      失败时返回非 0 的错误代码之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502116</entry>
		    <entry>June 16, 2004</entry>
		    <entry>将内核 dev_t 改为指向 struct cdev * 的指针之后的
		      5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502117</entry>
		    <entry>June 17, 2004</entry>
		    <entry>将内核 udev_t 改为 dev_t 之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502118</entry>
		    <entry>June 17, 2004</entry>
		    <entry>为 clock_gettime(2) 和 clock_getres(2) 增加
		      CLOCK_VIRTUAL 和 CLOCK_PROF 支持之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502119</entry>
		    <entry>June 22, 2004</entry>
		    <entry>对网络接口复制进行全面修改之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502120</entry>
		    <entry>July 2, 2004</entry>
		    <entry>package 工具升级为 20040629 之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502121</entry>
		    <entry>July 9, 2004</entry>
		    <entry>不再将蓝牙代码标记为 i386 专用之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502122</entry>
		    <entry>July 11, 2004</entry>
		    <entry>引入 KDB 调试器框架之后的 5.2-CURRENT。
		      同时还引入了 DDB 作为后台， 以及 GDB 后台。</entry>
		  </row>

		  <row>
		    <entry>502123</entry>
		    <entry>July 12, 2004</entry>
		    <entry>修改 VFS_ROOT 和 vflush 使其使用一个 struct
		      thread 参数之后的 5.2-CURRENT。 struct kinfo_proc
		      增加了一个用户数据指针。 同时， 默认的 X 实现切换为
		      <literal>xorg</literal></entry>
		  </row>

		  <row>
		    <entry>502124</entry>
		    <entry>July 24, 2004</entry>
		    <entry>将使用 rc.d 和传统脚本的 port 分别启动之后的
		      5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502125</entry>
		    <entry>July 28, 2004</entry>
		    <entry>取消前一修改之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502126</entry>
		    <entry>July 31, 2004</entry>
		    <entry>删除 kmem_alloc_pageable() 并引入 gcc 3.4.2 的
		      5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502127</entry>
		    <entry>August 2, 2004</entry>
		    <entry>修改 UMA 内核 API 允许构建函数和初始化失败之后的
		      5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>502128</entry>
		    <entry>August 8, 2004</entry>
		    <entry>vfs_mount 签名和全局替换 suser(9) API 的
		      PRISON_ROOT 为 SUSER_ALLOWJAIL 之后的 5.2-CURRENT</entry>
		  </row>

		  <row>
		    <entry>503000</entry>
		    <entry>August 23, 2004</entry>
		    <entry>pfil API 修改之前的 5.3-BETA/RC</entry>
		  </row>

		  <row>
		    <entry>503001</entry>
		    <entry>September 22, 2004</entry>
		    <entry>5.3-RELEASE</entry>
		  </row>

		  <row>
		    <entry>503100</entry>
		    <entry>October 16, 2004</entry>
		    <entry>创建 RELENG_5_3 分支之后的 5.3-STABLE</entry>
		  </row>

		  <row>
		    <entry>503101</entry>
		    <entry>December 3, 2004</entry>
		    <entry>加入了 glibc 风格的
		      &man.strftime.3; 填充选项的 5.3-STABLE</entry>
		  </row>

		  <row>
		    <entry>503102</entry>
		    <entry>February 13, 2005</entry>
		    <entry>MFC OpenBSD 的 nc(1) 之后的 5.3-STABLE</entry>
		  </row>

		  <row>
		    <entry>503103</entry>
		    <entry>February 27, 2005</entry>
		    <entry>在 MFC 了
			<filename>&lt;src/include/stdbool.h&gt;</filename> 和
			<filename>&lt;src/sys/i386/include/_types.h&gt;</filename>
			用于兼容 GCC 和 Intel C/C++ 编译器的修正之后的 5.4-PRERELEASE</entry>
 		  </row>

		  <row>
		    <entry>503104</entry>
		    <entry>February 28, 2005</entry>
		    <entry>MFC 了将 ifi_epoch 由 wall 时钟时间改为 uptime
		       之后的 5.4-PRERELEASE</entry>
 		  </row>

		  <row>
		    <entry>503105</entry>
		    <entry>March 2, 2005</entry>
		    <entry>MFC 了 vswprintf(3) 中的 EOVERFLOW 检查的 5.4-PRERELEASE</entry>
		  </row>

		  <row>
		    <entry>504000</entry>
		    <entry>April 3, 2005</entry>
		    <entry>5.4-RELEASE.</entry>
		  </row>

		  <row>
		    <entry>504100</entry>
		    <entry>April 3, 2005</entry>
		    <entry>创建 RELENG_5_4 分支之后的 5.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>504101</entry>
		    <entry>May 11, 2005</entry>
		    <entry>加大默认线程堆栈尺寸之后的 5.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>504102</entry>
		    <entry>June 24, 2005</entry>
		    <entry>加入 sha256 之后的 5.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>504103</entry>
		    <entry>October 3, 2005</entry>
		    <entry>MFC if_bridge 之后的 5.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>504104</entry>
		    <entry>November 13, 2005</entry>
		    <entry>bsdiff 和 portsnap MFC 之后的 5.4-STABLE</entry>
		  </row>

		  <row>
		    <entry>504105</entry>
		    <entry>January 17, 2006</entry>
		    <entry>在 MFC 了 ldconfig_local_dirs
		      修改之后的 5.4-STABLE。</entry>
		  </row>

		  <row>
		    <entry>505000</entry>
		    <entry>May 12, 2006</entry>
		    <entry>5.5-RELEASE.</entry>
		  </row>

		  <row>
		    <entry>505100</entry>
		    <entry>May 12, 2006</entry>
		    <entry>在创建 RELENG_5_5 分支之后的 5.5-STABLE</entry>
		  </row>

		  <row>
		    <entry>600000</entry>
		    <entry>August 18, 2004</entry>
		    <entry>6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600001</entry>
		    <entry>August 27, 2004</entry>
		    <entry>内核中永久性启用 PFIL_HOOKS 之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600002</entry>
		    <entry>August 30, 2004</entry>
		    <entry>最初将 ifi_epoch 加入 if_data 结构之后的 6.0-CURRENT。
		      此后不久即被撤销。 请不要使用这个值。</entry>
		  </row>

		  <row>
		    <entry>600003</entry>
		    <entry>September 8, 2004</entry>
		    <entry>if_data 中再次加入 ifi_epoch 成员之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600004</entry>
		    <entry>September 29, 2004</entry>
		    <entry>将 struct inpcb 参数加入 pfil API 之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600005</entry>
		    <entry>October 5, 2004</entry>
		    <entry>newsyslog 加入了 "-d
		      DESTDIR" 参数之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600006</entry>
		    <entry>November 4, 2004</entry>
		    <entry>加入了 glibc 风格的
		      &man.strftime.3; 填充选项之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600007</entry>
		    <entry>December 12, 2004</entry>
		    <entry>加入了 802.11 框架更新之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600008</entry>
		    <entry>January 25, 2005</entry>
		    <entry>修改 VOP_*VOBJECT() 并为无全局锁的文件系统引入
		      MNTK_MPSAFE 标志之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600009</entry>
		    <entry>February 4, 2005</entry>
		    <entry>加入 cpufreq 框架和驱动之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600010</entry>
		    <entry>February 6, 2005</entry>
		    <entry>引入 OpenBSD 的 nc(1) 之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600011</entry>
		    <entry>February 12, 2005</entry>
		    <entry>删去并不存在的 SVID2
			<literal>matherr()</literal> 支持之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600012</entry>
		    <entry>February 15, 2005</entry>
		    <entry>增大默认线程堆栈尺寸之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600013</entry>
		    <entry>February 19, 2005</entry>
		    <entry>增加了针对
			<filename>&lt;src/include/stdbool.h&gt;</filename> 和
			<filename>&lt;src/sys/i386/include/_types.h&gt;</filename>
			的用于 Intel C/C++ 编译器的 GCC-兼容性修正。</entry>
		  </row>

		  <row>
		    <entry>600014</entry>
		    <entry>February 21, 2005</entry>
		    <entry>修正了 vswprintf(3) 的 EOVERFLOW 检查之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600015</entry>
		    <entry>February 25, 2005</entry>
		    <entry>将 struct if_data 成员 ifi_epoch 从 wall 时钟时间改为 uptime
		       之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600016</entry>
		    <entry>February 26, 2005</entry>
		    <entry>修改 LC_CTYPE 磁盘格式之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600017</entry>
		    <entry>February 27, 2005</entry>
		    <entry>修改 NLS 编录磁盘格式之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600018</entry>
		    <entry>February 27, 2005</entry>
		    <entry>修改 LC_COLLATE 磁盘格式之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600019</entry>
		    <entry>February 28, 2005</entry>
		    <entry>将 acpica 头文件安装到 /usr/include</entry>
		  </row>

		  <row>
		    <entry>600020</entry>
		    <entry>March 9, 2005</entry>
		    <entry>为 send(2) API 加入了 MSG_NOSIGNAL</entry>
		  </row>

		  <row>
		    <entry>600021</entry>
		    <entry>March 17, 2005</entry>
		    <entry>在 cdevsw 上增加了一些字段</entry>
		  </row>

		  <row>
		    <entry>600022</entry>
		    <entry>March 21, 2005</entry>
		    <entry>基本系统中删去了 gtar</entry>
		  </row>

		  <row>
		    <entry>600023</entry>
		    <entry>April 13, 2005</entry>
		    <entry>unix(4) 中加入了 LOCAL_CREDS, LOCAL_CONNWAIT 两个 socket 选项</entry>
		  </row>

		  <row>
		    <entry>600024</entry>
		    <entry>April 19, 2005</entry>
		    <entry>加入了 &man.hwpmc.4; 及其相关工具之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600025</entry>
		    <entry>April 26, 2005</entry>
		    <entry>加入 struct icmphdr 之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600026</entry>
		    <entry>May 3, 2005</entry>
		    <entry>pf 更新到了 3.7</entry>
		  </row>

		  <row>
		    <entry>600027</entry>
		    <entry>May 6, 2005</entry>
		    <entry>引入了内核 libalias 和 ng_nat</entry>
		  </row>

		  <row>
		    <entry>600028</entry>
		    <entry>May 13, 2005</entry>
		    <entry>将 ttyname_r(3) 接口改为符合 POSIX 标准，
			并通过 unistd.h 和 libc</entry>
		  </row>

		  <row>
		    <entry>600029</entry>
		    <entry>May 29, 2005</entry>
		    <entry>将 libpcap 升级为 v0.9.1 alpha 096 之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600030</entry>
		    <entry>June 5, 2005</entry>
		    <entry>引入 NetBSD 的 if_bridge(4) 之后的 6.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>600031</entry>
		    <entry>June 10, 2005</entry>
		    <entry>将 struct ifnet 从驱动的 softc 中拆出之后的 6.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>600032</entry>
		    <entry>July 11, 2005</entry>
		    <entry>引入了 libpcap v0.9.1 之后的 6.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>600033</entry>
		    <entry>July 25, 2005</entry>
		    <entry>所有自 RELENG_5 以来没有修改过的共享库的版本递增之后的
		      6.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>600034</entry>
		    <entry>August 13, 2005</entry>
		    <entry>为 dev_clone 事件处理函数增加身份信息参数之后的
		      6.0-STABLE。 6.0-RELEASE。</entry>
		  </row>

		  <row>
		    <entry>600100</entry>
		    <entry>November 1, 2005</entry>
		    <entry>6.0-RELEASE 之后的 6.0-STABLE</entry>
		  </row>

		  <row>
		    <entry>600101</entry>
		    <entry>December 21, 2005</entry>
		    <entry>将 local_startup 目录中的脚本集成到基本系统的 &man.rcorder.8;
		      之后的 6.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>600102</entry>
		    <entry>December 30, 2005</entry>
		    <entry>更新 ELF 类型和常量之后的 6.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>600103</entry>
		    <entry>January 15, 2006</entry>
		    <entry>MFC 了 pidfile(3) API 之后的 6.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>600104</entry>
		    <entry>January 17, 2006</entry>
		    <entry>在 MFC 了 ldconfig_local_dirs
		      修改之后的 6.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>600105</entry>
		    <entry>February 26, 2006</entry>
		    <entry>在 csh(1) 中加入了 NLS 目录支持之后的 6.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>601000</entry>
		    <entry>May 6, 2006</entry>
		    <entry>6.1-RELEASE</entry>
		  </row>

		  <row>
		    <entry>601100</entry>
		    <entry>May 6, 2006</entry>
		    <entry>6.1-RELEASE 之后的 6.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>601101</entry>
		    <entry>June 22, 2006</entry>
		    <entry>引入 csup 之后的 6.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>601102</entry>
		    <entry>July 11, 2006</entry>
		    <entry>更新了 iwi(4) 之后的 6.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>601103</entry>
		    <entry>July 17, 2006</entry>
		    <entry>将域名解析函数更新至
		      BIND9， 并导出了可重入版本的
		      netdb 函数之后的 6.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>601104</entry>
		    <entry>August 8, 2006</entry>
		    <entry>在 OpenSSL 中启用了 DSO (动态共享库)
		      支持之后的 6.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>601105</entry>
		    <entry>September 2, 2006</entry>
		    <entry>由于 802.11 修正变动了 IEEE80211_IOC_STA_INFO ioctl API
		      之后的 6.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602000</entry>
		    <entry>November 15, 2006</entry>
		    <entry>6.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>602100</entry>
		    <entry>September 15, 2006</entry>
		    <entry>6.2-RELEASE 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602101</entry>
		    <entry>December 12, 2006</entry>
		    <entry>加入 Wi-Spy
		      quirk 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602102</entry>
		    <entry>December 28, 2006</entry>
		    <entry>增加 pci_find_extcap() 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602103</entry>
		    <entry>January 16, 2007</entry>
		    <entry>MFC 了对 dlsym 进行修改， 使其在指定 dso 及其暗指的依赖中查找符号之后的
		      6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602104</entry>
		    <entry>January 28, 2007</entry>
		    <entry>MFC 了 netgraph 节点 ng_deflate(4) 和
		      ng_pred1(4) 以及用于 ng_ppp(4)
		      节点的新压缩及加密模式之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602105</entry>
		    <entry>February 20, 2007</entry>
		    <entry>MFC 了从 NetBSD 移植的 BSD 授权的 &man.gzip.1; 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602106</entry>
		    <entry>March 31, 2007</entry>
		    <entry>MFC 了 PCI MSI 和 MSI-X 支持之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602107</entry>
		    <entry>April 6, 2007</entry>
		    <entry>MFC 了包含宽字符支持的 ncurses 5.6 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602108</entry>
		    <entry>April 11, 2007</entry>
		    <entry>MFC 了实现 Linux SCSI SG 直通设备 API 子集的 CAM 'SG'
			设备之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602109</entry>
		    <entry>April 17, 2007</entry>
		    <entry>MFC 了 readline 5.2 patchset 002 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602110</entry>
		    <entry>May 2, 2007</entry>
		    <entry>MFC 了用于 amd64 和 i386 的 pmap_invalidate_cache()、
		      pmap_change_attr()、 pmap_mapbios()、 pmap_mapdev_attr()、
		      and pmap_unmapbios() 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602111</entry>
		    <entry>June 11, 2007</entry>
		    <entry>由于 MFC 了 BOP_BDFLUSH 导致文件系统模块 KBI
		      变化之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602112</entry>
		    <entry>September 21, 2007</entry>
		    <entry>一系列 libutil(3) MFC 之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602113</entry>
		    <entry>October 25, 2007</entry>
		    <entry>MFC 了宽字符和单字节 ctype 函数分拆之后的 6.2-STABLE。
		      新编译的引用了 ctype.h 的可执行文件，
		      可能会需要一个在旧系统上不存在的新增符号 __mb_sb_limit。</entry>
		  </row>

		  <row>
		    <entry>602114</entry>
		    <entry>October 30, 2007</entry>
		    <entry>恢复了 ctype ABI 向前兼容性之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>602115</entry>
		    <entry>November 21, 2007</entry>
		    <entry>回退了宽字符和单字节 ctype 分拆之后的 6.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>603000</entry>
		    <entry>November 25, 2007</entry>
		    <entry>6.3-RELEASE</entry>
		  </row>

		  <row>
		    <entry>603100</entry>
		    <entry>November 25, 2007</entry>
		    <entry>在 6.3-RELEASE 之后的 6.3-STABLE。</entry>
		  </row>

		  <row>
		    <entry>603101</entry>
		    <entry>December 7, 2007</entry>
		    <entry>修正了 bit macro 的多字节支持之后的 6.3-STABLE。</entry>
		  </row>

		  <row>
		    <entry>603102</entry>
		    <entry>April 24, 2008</entry>
		    <entry>为 flock 结构加入 l_sysid 之后的
		      6.3-STABLE。</entry>
		  </row>

		  <row>
		    <entry>603103</entry>
		    <entry>May 27, 2008</entry>
		    <entry>MFC 了
		      <function>memrchr</function> 函数之后的 6.3-STABLE。</entry>
		  </row>

		  <row>
		    <entry>603104</entry>
		    <entry>June 15, 2008</entry>
                    <entry>为 make(1) MFC <literal>:u</literal>
                      变量修饰符之后的 6.3-STABLE。</entry>
		  </row>

		  <row>
		    <entry>604000</entry>
		    <entry>October 4, 2008</entry>
		    <entry>6.4-RELEASE</entry>
		  </row>

		  <row>
		    <entry>604100</entry>
		    <entry>October 4, 2008</entry>
		    <entry>6.4-RELEASE 之后的 6.4-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700000</entry>
		    <entry>July 11, 2005</entry>
		    <entry>7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700001</entry>
		    <entry>July 23, 2005</entry>
		    <entry>所有自 RELENG_5 以来没有修改过的共享库的版本递增之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700002</entry>
		    <entry>August 13, 2005</entry>
		    <entry>为 dev_clone 事件处理函数中增加身份信息参数之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700003</entry>
		    <entry>August 25, 2005</entry>
		    <entry>将 memmem(3) 加入 libc 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700004</entry>
		    <entry>October 30, 2005</entry>
		    <entry>将 solisten(9) 改为接受一 backlog 参数之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700005</entry>
		    <entry>November 11, 2005</entry>
		    <entry>将 IFP2ENADDR() 改为返回一 IF_LLADDR() 指针之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700006</entry>
		    <entry>November 11, 2005</entry>
		    <entry>在 <literal>struct ifnet</literal> 中增加 <literal>if_addr</literal>
		      成员， 并删除 IFP2ENADDR() 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700007</entry>
		    <entry>December 2, 2005</entry>
		    <entry>将 local_startup 目录中的脚本集成到基本系统的 &man.rcorder.8;
		      之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700008</entry>
		    <entry>December 5, 2005</entry>
		    <entry>去掉 MNT_NODEV 挂接选项之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700009</entry>
		    <entry>December 19, 2005</entry>
		    <entry>对 ELF-64 类型和符号版本进行变更之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700010</entry>
		    <entry>December 20, 2005</entry>
		    <entry>增加 hostb 和 vgapci 驱动、 pci_find_extcap()，
		      并将 AGP 驱动改为不再影射 aperature
		      之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700011</entry>
		    <entry>December 31, 2005</entry>
		    <entry>除 Alpha 之外的所有平台上 tv_sec 改为 time_t
		      之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700012</entry>
		    <entry>January 8, 2006</entry>
		    <entry>修改 ldconfig_local_dirs 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700013</entry>
		    <entry>January 12, 2006</entry>
		    <entry>在修改了
		      <filename>/etc/rc.d/abi</filename> 以支持
		      <filename>/compat/linux/etc/ld.so.cache</filename>
		      以某只读文件系统上的符号连接形式存在之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700014</entry>
		    <entry>January 26, 2006</entry>
		    <entry>引入 pts 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700015</entry>
		    <entry>March 26, 2006</entry>
		    <entry>在引入 &man.hwpmc.4; 的第 2 版 ABI
		      之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700016</entry>
		    <entry>April 22, 2006</entry>
		    <entry>在 libc 中加入了 &man.fcloseall.3; 之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700017</entry>
		    <entry>May 13, 2006</entry>
		    <entry>删去 ip6fw 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700018</entry>
		    <entry>July 15, 2006</entry>
		    <entry>引入了 snd_emu10kx 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700019</entry>
		    <entry>July 29, 2006</entry>
		    <entry>引入了 OpenSSL 0.9.8b 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700020</entry>
		    <entry>September 3, 2006</entry>
		    <entry>增加了 bus_dma_get_tag 函数之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
                    <entry>700021</entry>
		    <entry>September 4, 2006</entry>
		    <entry>在引入了 libpcap 0.9.4 和
                      tcpdump 3.9.4 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
                    <entry>700022</entry>
		    <entry>September 9, 2006</entry>
		    <entry>在对 dlsym 进行修改， 使其在指定 dso 及其暗指的依赖中查找符号之后的
                      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700023</entry>
		    <entry>September 23, 2006</entry>
		    <entry>为 OSSv4 混音器 API 加入新的声音
                      IOCTL 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700024</entry>
		    <entry>September 28, 2006</entry>
		    <entry>汇入 OpenSSL 0.9.8d 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700025</entry>
		    <entry>November 11, 2006</entry>
		    <entry>加入了 libelf 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700026</entry>
		    <entry>November 26, 2006</entry>
		    <entry>对音效相关的 sysctl 进行大幅调整之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700027</entry>
		    <entry>November 30, 2006</entry>
		    <entry>加入 Wi-Spy
		      quirk 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700028</entry>
		    <entry>December 15, 2006</entry>
		    <entry>在 libc 中加入 sctp 调用之后的 7.0-CURRENT。
		    </entry>
		  </row>

		  <row>
		    <entry>700029</entry>
		    <entry>January 26, 2007</entry>
		    <entry>将 GNU &man.gzip.1; 实现替换为从 NetBSD 移植的采用 BSD 授权版本之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700030</entry>
		    <entry>February 7, 2007</entry>
		    <entry>在 IPv4 多播转发代码中删去了 IPIP 隧道封装 (VIFF_TUNNEL) 之后的
		      7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700031</entry>
		    <entry>February 23, 2007</entry>
		    <entry>修改了 bus_setup_intr() (newbus) 之后的 7.0-CURRENT。
		    </entry>
		  </row>

		  <row>
		    <entry>700032</entry>
		    <entry>March 2, 2007</entry>
		    <entry>引入了 ipw(4) 和 iwi(4) 固件之后的 7.0-CURRENT。
		    </entry>
		  </row>

		  <row>
		    <entry>700033</entry>
		    <entry>March 9, 2007</entry>
		    <entry>在 ncurses 中引入了宽字符支持之后的 7.0-CURRENT。
		    </entry>
		  </row>

		  <row>
		    <entry>700034</entry>
		    <entry>March 19, 2007</entry>
		    <entry>修改了 insmntque()、
		      getnewvnode() 以及 vfs_hash_insert() 工作方式之后的 7.0-CURRENT。
		    </entry>
		  </row>

		  <row>
		    <entry>700035</entry>
		    <entry>March 26, 2007</entry>
		    <entry>增加 CPU 频率变动通知机制之后的 7.0-CURRENT。
		    </entry>
		  </row>

		  <row>
		    <entry>700036</entry>
		    <entry>April 6, 2007</entry>
		    <entry>引入了 ZFS 文件系统之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700037</entry>
		    <entry>April 8, 2007</entry>
		    <entry>新增了实现 Linux SCSI SG 直通设备 API 子集的 CAM 'SG'
		      设备之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700038</entry>
		    <entry>April 30, 2007</entry>
		    <entry>将 &man.getenv.3;、 &man.putenv.3;、
		      &man.setenv.3; 和 &man.unsetenv.3; 改为符合 POSIX
		      之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700039</entry>
		    <entry>May 1, 2007</entry>
		    <entry>回退了 700038 中的变动之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700040</entry>
		    <entry>May 10, 2007</entry>
		    <entry>在 libutil 中增加了 &man.flopen.3; 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700041</entry>
		    <entry>May 13, 2007</entry>
		    <entry>启用了符号版本， 并将 libthr 改为默认线程库之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700042</entry>
		    <entry>May 19, 2007</entry>
		    <entry>引入了 gcc 4.2.0 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700043</entry>
		    <entry>May 21, 2007</entry>
		    <entry>将 RELENG_6 之后未修改过版本的共享库版本增加之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700044</entry>
		    <entry>June 7, 2007</entry>
		    <entry>将 vn_open()/VOP_OPEN() 的参数由文件描述符数组下标改为
		      struct file * 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700045</entry>
		    <entry>June 10, 2007</entry>
		    <entry>修改 &man.pam.nologin.8; 使其向 PAM
		      框架提供帐号管理功能而非身份验证功能之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700046</entry>
		    <entry>June 11, 2007</entry>
		    <entry>更新 802.11 无线支持之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700047</entry>
		    <entry>June 11, 2007</entry>
		    <entry>增加 TCP LRO 网络接口能力之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700048</entry>
		    <entry>June 12, 2007</entry>
		    <entry>在 IPv4 协议栈中加入了 RFC 3678 API 支持之后的 7.0-CURRENT。
		      先前 IP_MULTICAST_IF ioctl 的 RFC 1724 行为被删去；
		      0.0.0.0/8 不再能够用于指定接口索引下标， 而应使用
		      struct ipmreqn 代替。</entry>
		  </row>

		  <row>
		    <entry>700049</entry>
		    <entry>July 3, 2007</entry>
		    <entry>引入 OpenBSD
		      4.1 的 pf 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>(not changed)</entry>
		    <entry/>
		    <entry>为
		      FAST_IPSEC 增加 IPv6 支持， 删去 KAME IPSEC， 并将
		      FAST_IPSEC 更名为 IPSEC 之后的 7.0-CURRENT。
		      (未变动)</entry>
		  </row>

		  <row>
		    <entry>700050</entry>
		    <entry>July 4, 2007</entry>
		    <entry>将 setenv/putenv/等等调用，
		      从传统 BSD 改为 POSIX 标准之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700051</entry>
		    <entry>July 4, 2007</entry>
		    <entry>增加新的 mmap/lseek/等等这些系统调用之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700052</entry>
		    <entry>July 6, 2007</entry>
		    <entry>将 I4B 头文件移动到
		      include/i4b 之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700053</entry>
		    <entry>September 30, 2007</entry>
		    <entry>增加了 PCI domain 支持之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700054</entry>
		    <entry>October 25, 2007</entry>
		    <entry>MFC 了宽字符和单字节字符 ctype 分拆之后的 7.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>700055</entry>
		    <entry>October 28, 2007</entry>
		    <entry>7.0-RELEASE， 以及 MFC 了恢复对 FreeBSD 4/5/6 版本的 PCIOCGETCONF、
		      PCIOCREAD 和 PCIOCWRITE IOCTL ABI 向下兼容之后的 7.0-CURRENT，
		      这一变动导致 PCIOCGETCONF IOCTL 的 ABI 再次发生变化。</entry>
		  </row>

		  <row>
		    <entry>700100</entry>
		    <entry>December 22, 2007</entry>
		    <entry>7.0-RELEASE 之后的 7.0-STABLE</entry>
		  </row>

		  <row>
		    <entry>700101</entry>
		    <entry>February 8, 2008</entry>
                    <entry>MFC m_collapse() 之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700102</entry>
		    <entry>March 30, 2008</entry>
		    <entry>MFC kdb_enter_why() 之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700103</entry>
		    <entry>April 10, 2008</entry>
		    <entry>为 flock 结构加入 l_sysid 之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700104</entry>
		    <entry>April 11, 2008</entry>
		    <entry>在 procstat(1) MFC 之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700105</entry>
		    <entry>April 11, 2008</entry>
		    <entry>在 MFC umtx 特性之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700106</entry>
		    <entry>April 15, 2008</entry>
		    <entry>为 &man.psm.4; MFC &man.write.2; 支持之后的
		      7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700107</entry>
		    <entry>April 20, 2008</entry>
		    <entry>为 &man.fcntl.2; MFC F_DUP2FD 之后的
		      7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700108</entry>
		    <entry>May 5, 2008</entry>
                    <entry>对 &man.lockmgr.9; 做了一些修改之后的 7.0-STABLE，
                      在使用 &man.lockmgr.9; 时必需包含
                      <filename>sys/lock.h</filename>。</entry>
		  </row>

		  <row>
		    <entry>700109</entry>
		    <entry>May 27, 2008</entry>
		    <entry>MFC 了
		      <function>memrchr</function> 函数之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700110</entry>
		    <entry>August 5, 2008</entry>
                    <entry>MFC 了内核 NFS locked 客户端之后的
                      7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700111</entry>
		    <entry>August 20, 2008</entry>
                    <entry>加入了对物理连续巨帧支持之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>700112</entry>
		    <entry>August 27, 2008</entry>
                    <entry>在 MFC 内核 DTrace 支持之后的 7.0-STABLE。</entry>
		  </row>

		  <row>
		    <entry>701000</entry>
		    <entry>November 25, 2008</entry>
		    <entry>7.1-RELEASE</entry>
		  </row>

		  <row>
		    <entry>701100</entry>
		    <entry>November 25, 2008</entry>
		    <entry>7.1-RELEASE 之后的 7.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>701101</entry>
		    <entry>January 10, 2009</entry>
		    <entry>合并了 <function>strndup</function>
			之后的 7.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>701102</entry>
		    <entry>January 17, 2009</entry>
		    <entry>加入了 cpuctl(4) 支持之后的 7.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>701103</entry>
		    <entry>February 7, 2009</entry>
		    <entry>合并了 多/无-IPv4/v6 jail 之后的 7.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>701104</entry>
		    <entry>February 14, 2009</entry>
		    <entry>在 struct mount 中保存了挂起属主， 以及在 struct vfsops
		      中引入了 vfs_susp_clean
		      方法之后的 7.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>701105</entry>
		    <entry>March 12, 2009</entry>
                    <entry>对 kern.ipc.shmsegs sysctl 变量不兼容的修改，
                      以允许在 64bit 构架上分配更多的 SysV 共享内存段之后的
                      7.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>701106</entry>
		    <entry>March 14, 2009</entry>
                    <entry>合并了一个对 POSIX semaphore 等待操作修正之后的
                      7.1-STABLE。</entry>
		  </row>

		  <row>
		    <entry>702000</entry>
		    <entry>April 15, 2009</entry>
		    <entry>7.2-RELEASE</entry>
		  </row>

		  <row>
		    <entry>702100</entry>
		    <entry>April 15, 2009</entry>
		    <entry>7.2-RELEASE 之后的 7.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>702101</entry>
		    <entry>May 15, 2009</entry>
		    <entry>ichsmb(4) 改为使用左邻接辅编址来保持与其它
		      SMBus 控制器驱动一致性之后的 7.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>702102</entry>
		    <entry>May 28, 2009</entry>
		    <entry>MFC 了
		      <function>fdopendir</function> 函数之后的 7.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>702103</entry>
		    <entry>June 06, 2009</entry>
		    <entry>MFC 了 PmcTools 之后的 7.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>702104</entry>
		    <entry>July 14, 2009</entry>
		    <entry>MFC 了
		      <function>closefrom</function> 系统调用之后的 7.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>702105</entry>
		    <entry>July 31, 2009</entry>
		    <entry>MFC 了 SYSVIPC ABI
		      改动之后的 7.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>702106</entry>
		    <entry>September 14, 2009</entry>
		    <entry>MFC 了 x86 PAT
		      增强， 并新增了 d_mmap_single() 以及
		      scatter/gather 型 VM 对象类型之后的 7.2-STABLE。</entry>
		  </row>

		  <row>
		    <entry>703000</entry>
		    <entry>February 9, 2010</entry>
		    <entry>7.3-RELEASE</entry>
		  </row>

		  <row>
		    <entry>703100</entry>
		    <entry>February 9, 2010</entry>
		    <entry>7.3-RELEASE 之后的 7.3-STABLE。</entry>
		  </row>

		  <row>
		    <entry>704000</entry>
		    <entry>December 22, 2010</entry>
		    <entry>7.4-RELEASE</entry>
		  </row>

		  <row>
		    <entry>704100</entry>
		    <entry>December 22, 2010</entry>
		    <entry>7.4-RELEASE 之后的 7.4-STABLE。</entry>
		  </row>

		  <row>
		    <entry>800000</entry>
		    <entry>October 11, 2007</entry>
		    <entry>8.0-CURRENT。 分拆了宽字符和单字节字符
		      ctype。</entry>
		  </row>

		  <row>
		    <entry>800001</entry>
		    <entry>October 16, 2007</entry>
		    <entry>引入了 libpcap 0.9.8 和 tcpdump 3.9.8 之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800002</entry>
		    <entry>October 21, 2007</entry>
		    <entry>将 kthread_create() 系列函数改名为 kproc_create() 之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800003</entry>
		    <entry>October 24, 2007</entry>
		    <entry>恢复了对 FreeBSD 4/5/6 版本的 PCIOCGETCONF、
		      PCIOCREAD 和 PCIOCWRITE IOCTL ABI 向下兼容之后的 8.0-CURRENT，
		      这一变动导致 PCIOCGETCONF IOCTL 的 ABI 再次发生变化。</entry>
		  </row>

		  <row>
		    <entry>800004</entry>
		    <entry>November 12, 2007</entry>
		    <entry>将 agp(4) 驱动从
		      src/sys/pci 挪到 src/sys/dev/agp 之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800005</entry>
		    <entry>December 4, 2007</entry>
		    <entry><link xlink:href="http://www.freebsd.org/cgi/cvsweb.cgi/src/sys/kern/kern_mbuf.c#rev1.35">修改了
		      jumbo frame 分配器之后的</link> 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800006</entry>
		    <entry>December 7, 2007</entry>
		    <entry>在给 &man.hwpmc.4; 加入了 callgraph 捕捉功能后的
		      8.0-CURRENT</entry>
		  </row>

		  <row>
		    <entry>800007</entry>
		    <entry>December 25, 2007</entry>
		    <entry>kdb_enter() 增加 "why" 参数之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800008</entry>
		    <entry>December 28, 2007</entry>
		    <entry>在去除 LK_EXCLUPGRADE 选项后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800009</entry>
		    <entry>January 9, 2008</entry>
		    <entry>引入
		      &man.lockmgr.disown.9; 之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800010</entry>
		    <entry>January 10, 2008</entry>
		    <entry>修改 &man.vn.lock.9; 原型之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800011</entry>
		    <entry>January 13, 2008</entry>
		    <entry>修改 &man.VOP.LOCK.9; 和
		      &man.VOP.UNLOCK.9; 原型之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800012</entry>
		    <entry>January 19, 2008</entry>
		    <entry>引入
		      &man.lockmgr.recursed.9;、 &man.BUF.RECURSED.9; 和
		      &man.BUF.ISLOCKED.9; 并删除了
		      <function>BUF_REFCNT()</function> 之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800013</entry>
		    <entry>January 23, 2008</entry>
		    <entry>引入
		      <quote>ASCII</quote> 编码之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800014</entry>
		    <entry>January 24, 2008</entry>
		    <entry>修改 &man.lockmgr.9; 并删除了
		      <function>lockcount()</function> 和
		      <function>LOCKMGR_ASSERT()</function> 之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800015</entry>
		    <entry>January 26, 2008</entry>
		    <entry>扩展了 &man.fts.3; 数据结构之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800016</entry>
		    <entry>February 1, 2008</entry>
		    <entry>为 MEXTADD(9) 增加了一个参数之后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800017</entry>
		    <entry>February 6, 2008</entry>
		    <entry>为 &man.lockmgr.9; 引入 LK_NODUP 和
		      LK_NOWITNESS 选项后的 8.0-CURRENT。</entry>
		  </row>

		  <row>
		    <entry>800018</entry>
		    <entry>February 8, 2008</entry>
		    <entry>引入 m_collapse 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800019</entry>
		    <entry>February 9, 2008</entry>
		    <entry>为 sysctl 变量 kern.proc.filedesc 加入
		      当前工作目录，root 目录和 jail 目录支持之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800020</entry>
		    <entry>February 13, 2008</entry>
		    <entry>引入 &man.lockmgr.assert.9; 之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800021</entry>
		    <entry>February 15, 2008</entry>
		    <entry>引入 &man.lockmgr.args.9; 和移除
		      LK_INTERNAL 标志之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800022</entry>
		    <entry>(backed out)</entry>
		    <entry>把 BSD &man.ar.1; 作为系统默认的 ar 之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800023</entry>
		    <entry>February 25, 2008</entry>
		    <entry>修改了 &man.lockstatus.9; 和 &man.VOP.ISLOCKED.9;
		      原型，特别时去掉 <literal>struct thread</literal>
		      参数之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800024</entry>
		    <entry>March 1, 2008</entry>
		    <entry>砍掉了 <function>lockwaiters</function> 和
		      <function>BUF_LOCKWAITERS</function> 函数，
		      <function>brelvp</function> 的返回值从 void
		      修改成 int，并引入 &man.lockinit.9; 新标志之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800025</entry>
		    <entry>March 8, 2008</entry>
		    <entry>为 &man.fcntl.2; 引入 F_DUP2FD 之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800026</entry>
		    <entry>March 12, 2008</entry>
		    <entry>修改了 cv_broadcastpri 优先权参数之后的
		      8.0-CURRENT，比如 0 表示无优先权。</entry>
		  </row>
		  <row>
		    <entry>800027</entry>
		    <entry>March 24, 2008</entry>
		    <entry>修改了 bpf 监测 ABI, 加入了 zerocopy bpf buffer
		      之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800028</entry>
		    <entry>March 26, 2008</entry>
		    <entry>为 flock 结构增加了 l_sysid 之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800029</entry>
		    <entry>March 28, 2008</entry>
		    <entry>重新整合了 <function>BUF_LOCKWAITERS</function>
		      函数并加入 &man.lockmgr.waiters.9; 之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800030</entry>
		    <entry>April 1, 2008</entry>
		    <entry>引入 &man.rw.try.rlock.9; 和 &man.rw.try.wlock.9;
		      之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800031</entry>
		    <entry>April 6, 2008</entry>
		    <entry>引入 <function>lockmgr_rw</function> 和
		      <function>lockmgr_args_rw</function>
		      函数之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800032</entry>
		    <entry>April 8, 2008</entry>
		    <entry>实现了 openat 和相关的系统调用，为 &man.open.2;
		      引入了 O_EXEC 标志，和提供了相应的 linux
		      兼容的系统调用之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800033</entry>
		    <entry>April 8, 2008</entry>
		    <entry>为 &man.psm.4; 增加了原生的 &man.write.2;
		      支持之后的 8.0-CURRENT。 现在任意命令可写入
		      <filename>/dev/psm%d</filename>
		      并读出状态。</entry>
		  </row>
		  <row>
		    <entry>800034</entry>
		    <entry>April 10, 2008</entry>
		    <entry>引入 <function>memrchr</function>
		      函数之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800035</entry>
		    <entry>April 16, 2008</entry>
		    <entry>引入 <function>fdopendir</function>
		      函数之后的 8.0-CURRENT</entry>
		  </row>
		  <row>
		    <entry>800036</entry>
		    <entry>April 20, 2008</entry>
                    <entry>无线部分转向 multi-bss (也叫做 vaps)
                      支持之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800037</entry>
		    <entry>May 9, 2008</entry>
		    <entry>加入多路由表支持 (也就是 setfib(1)、 stfib(2)） 后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800038</entry>
		    <entry>May 26, 2008</entry>
		    <entry>删去了 netatm 和
		      ISDN4BSD 后的 8.0-CURRENT。 这个版本也表示增加了
		      Compact C Type (CTF) 工具。</entry>
		  </row>
		  <row>
		    <entry>800039</entry>
		    <entry>June 14, 2008</entry>
                    <entry>移除 sgtty 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800040</entry>
		    <entry>June 26, 2008</entry>
		    <entry>增加了内核级 NFS lockd 客户端的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800041</entry>
		    <entry>July 22, 2008</entry>
                    <entry>增加了 arc4random_buf(3) 和 arc4random_uniform(3)
                      之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800042</entry>
		    <entry>August 8, 2008</entry>
                    <entry>增加了 cpuctl(4) 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800043</entry>
		    <entry>August 13, 2008</entry>
                    <entry>修改 bpf(4) 使用单一的设备节点而不是克隆之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800044</entry>
		    <entry>August 17, 2008</entry>
                    <entry>在提交了 vimage 项目第一步之后的
                      8.0-CURRENT。把全局变量重命名为虚拟化带
                      V_ 前缀并用宏映射到原来的全局名称。</entry>
		  </row>
		  <row>
		    <entry>800045</entry>
		    <entry>August 20, 2008</entry>
                    <entry>引入 MPSAFE TTY 层之后的 8.0-CURRENT，
                      包括对相关驱动和工具的修改。</entry>
		  </row>
		  <row>
		    <entry>800046</entry>
		    <entry>September 8, 2008</entry>
		    <entry>将 amd64 架构上 GDT 拆分到不同 CPU 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800047</entry>
		    <entry>September 10, 2008</entry>
		    <entry>删去了 VSVTX、 VSGID 和 VSUID 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800048</entry>
		    <entry>September 16, 2008</entry>
		    <entry>将内核中 NFS 挂接部分的代码改为能够通过
	                   nmount() iovec， 而不再是大的
	                   nfs_args 结构体作为参数之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800049</entry>
		    <entry>September 17, 2008</entry>
                    <entry>删去了 &man.suser.9; 和 &man.suser.cred.9;
                      之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800050</entry>
		    <entry>October 20, 2008</entry>
                    <entry>修改了缓冲存储器 API 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800051</entry>
		    <entry>October 23, 2008</entry>
                    <entry>删去了 &man.MALLOC.9; 和 &man.FREE.9;
                      宏之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800052</entry>
		    <entry>October 28, 2008</entry>
                    <entry>引入了 accmode_t 和重新命名
                      VOP_ACCES 'a_mode' 为 a_accmode
                      之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800053</entry>
		    <entry>November 2, 2008</entry>
                    <entry>修改了 &man.vfs.busy.9; 原型并引入了
                      MBF_NOWAIT 和 MBF_MNTLSTLOCK 标志之后的
                      8.0-CURRENT。</entry>
	          </row>
		  <row>
		    <entry>800054</entry>
		    <entry>November 22, 2008</entry>
		    <entry>增加了 buf_ring、
		      内存栅以及 ifnet 函数， 以方便撰写支持多硬件传输队列的驱动，
		      以及无锁环形缓冲实现的驱动程序， 并更高效地管理包队列功能之后的
		      8.0-CURRENT。</entry>
	          </row>
		  <row>
		    <entry>800055</entry>
		    <entry>November 27, 2008</entry>
                    <entry>引入了 &man.hwpmc.4; 对于 Intel&trade;
                      Core，Core2 和 Atom 的支持之后的 8.0-CURRENT。</entry>
	          </row>
		  <row>
		    <entry>800056</entry>
		    <entry>November 29, 2008</entry>
                    <entry>引入了 multi-/no-IPv4/v6 jail
                      之后的 8.0-CURRENT。</entry>
	          </row>
		  <row>
		    <entry>800057</entry>
		    <entry>December 1, 2008</entry>
		    <entry>将 ath hal 改为使用源代码之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800058</entry>
		    <entry>December 12, 2008</entry>
		    <entry>引入了 VOP_VPTOCNP 操作之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800059</entry>
		    <entry>December 15, 2008</entry>
		    <entry>引入了新的 arp-v2 重写之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800060</entry>
		    <entry>December 19, 2008</entry>
		    <entry>引入了 makefs 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800061</entry>
		    <entry>January 15, 2009</entry>
		    <entry>引入了 TCP Appropriate Byte Counting 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800062</entry>
		    <entry>January 28, 2009</entry>
		    <entry>删去了 minor()、 minor2unit()、 unit2minor() 等之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800063</entry>
		    <entry>February 18, 2009</entry>
		    <entry>在 GENERIC 配置中改为使用 USB2 栈之后的 8.0-CURRENT； 这个数值同时也标志新增了 fdevname(3)。</entry>
		  </row>
		  <row>
		    <entry>800064</entry>
		    <entry>February 23, 2009</entry>
		    <entry>将 USB2 栈移动并替换 dev/usb 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800065</entry>
		    <entry>February 26, 2009</entry>
                    <entry>在对 libmp(3) 中所有函数更名之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800066</entry>
		    <entry>February 27, 2009</entry>
                    <entry>更改了 USB devfs 管理和布局之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800067</entry>
		    <entry>February 28, 2009</entry>
                    <entry>加入了 getdelim()， getline()， stpncpy()， strnlen()，
                      wcsnlen()， wcscasecmp()， 和 wcsncasecmp() 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800068</entry>
		    <entry>March 2, 2009</entry>
                    <entry>在 usbhub devclass 更名为 uhub 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800069</entry>
		    <entry>March 9, 2009</entry>
                    <entry>重命名 libusb20.so.1 为 libusb.so.1 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800070</entry>
		    <entry>March 9, 2009</entry>
                    <entry>合并 IGMPv3 和 Source-Specific Multicast (SSM) 入 IPv4 栈之后的
                      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800071</entry>
		    <entry>March 14, 2009</entry>
                    <entry>为 gcc 打上了在 c99 和 gnu99 模式中使用 C99 inline 语义补丁之后的
                      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800072</entry>
		    <entry>March 15, 2009</entry>
                    <entry>移除了 IFF_NEEDSGIANT 标志; 不再支持非线程安全的网络设备驱动之后的
                      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800073</entry>
		    <entry>March 18, 2009</entry>
                    <entry>实现了 rpath 动态字符替换之后的 8.0-CURRENT.</entry>
		  </row>
		  <row>
		    <entry>800074</entry>
		    <entry>March 24, 2009</entry>
		    <entry>引入了 tcpdump 4.0.0 和
		      libpcap 1.0.0 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800075</entry>
		    <entry>April 6, 2009</entry>
		    <entry>修改了 structs vnet_net、
		      vnet_inet 和 vnet_ipfw 结构布局之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800076</entry>
		    <entry>April 9, 2009</entry>
		    <entry>为 dummynet 新增了延迟评估工具之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800077</entry>
		    <entry>April 14, 2009</entry>
		    <entry>删去了 VOP_LEASE() 和
		      vop_vector.vop_lease 之后的 8.0-CURRENT</entry>
		  </row>
		  <row>
		    <entry>800078</entry>
		    <entry>April 15, 2009</entry>
		    <entry>在 struct rt_metrics 和 struct
		      rt_metrics_lite 中添加了 rt_weight 字段，
		      导致其结构发生变化之后的 8.0-CURRENT。
		      此后 RTM_VERSION 增加， 但又回退了。</entry>
		  </row>
		  <row>
		    <entry>800079</entry>
		    <entry>April 15, 2009</entry>
		     <entry>在 struct route 和 struct_in6 中添加了
		       struct llentry 指针之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800080</entry>
		    <entry>April 15, 2009</entry>
		    <entry>改变了 struct inpcb 布局之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800081</entry>
		    <entry>April 19, 2009</entry>
		    <entry>改变了 malloc_type 布局之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800082</entry>
		    <entry>April 21, 2009</entry>
		    <entry>改变了 struct ifnet 布局， 并增加了 if_ref()
		      和 if_rele() 引用计数维护功能之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800083</entry>
		    <entry>April 22, 2009</entry>
		    <entry>实现了底层蓝牙 HCI API 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800084</entry>
		    <entry>April 29, 2009</entry>
		    <entry>修改了 IPv6 SSM 和 MLDv2
		      之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800085</entry>
		    <entry>April 30, 2009</entry>
		    <entry>启用了包括一个活跃映像的 VIMAGE 内核支持之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800086</entry>
		    <entry>May 8, 2009</entry>
		    <entry>为 patch(1) 增加任意长输入行支持之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800087</entry>
		    <entry>May 11, 2009</entry>
		    <entry>修改了一些 VFS KPI 之后的 8.0-CURRENT。
		      VFS 的 FSD 部分中删去了线程参数。
		      <function>VFS_*</function> 函数并不需要这些上下文信息，
		      因为它总是与
		      <varname>curthread</varname> 相关。
		      在某些特殊情况中， 则保留了原先的行为。</entry>
		  </row>
		  <row>
		    <entry>800088</entry>
		    <entry>May 20, 2009</entry>
		    <entry>对 net80211 监视模式进行调整之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800089</entry>
		    <entry>May 23, 2009</entry>
		    <entry>增加了 UDP 控制块支持之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800090</entry>
		    <entry>May 23, 2009</entry>
		    <entry>将网络接口克隆虚拟化之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800091</entry>
		    <entry>May 27, 2009</entry>
		    <entry>增加了层次式 jail 并取消全局 securelevel
		      之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800092</entry>
		    <entry>May 29, 2009</entry>
		    <entry>修改了
		      <function>sx_init_flags()</function> KPI 之后的 8.0-CURRENT。
		      <constant>SX_ADAPTIVESPIN</constant> 退役，
		      而新增的 <constant>SX_NOADAPTIVE</constant> 标志则表达相反语义。</entry>
		  </row>
		  <row>
		    <entry>800093</entry>
		    <entry>May 29, 2009</entry>
		    <entry>为 struct mount 增加 mnt_xflag 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800094</entry>
		    <entry>May 30, 2009</entry>
		    <entry>新增了
		      &man.VOP.ACCESSX.9; 之后的 8.0-CURRENT。</entry>
		  </row>
                  <row>
		    <entry>800095</entry>
		    <entry>May 30, 2009</entry>
		    <entry>调整轮询 KPI (polling KPI) 之后的 8.0-CURRENT。
		      轮询处理程序会返回处理过的包的数量。 新增的
		      <constant>IFCAP_POLLING_NOCOUNT</constant>
		      则表示返回值不重要， 并跳过计数。</entry>
		  </row>
		  <row>
		    <entry>800096</entry>
		    <entry>June 1, 2009</entry>
		    <entry>对新的 netisr 进行了改进， 并调整了保存和存取 FIB
		      方式之后的 8.0-CURRENT。</entry>
		    <!--
			Had been 96 and 97 but were folded because we are
			running out of numbers.
		    -->
		  </row>
		  <row>
		    <entry>800097</entry>
		    <entry>June 8, 2009</entry>
		    <entry>引入了 vnet 析构挂钩和相关基础设施之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800097</entry>
		    <entry>June 11, 2009</entry>
		    <entry>引入了 netgraph 输出到输入路径调用检测和排队机制，
		      并调整了 struct thread 布局之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800098</entry>
		    <entry>June 14, 2009</entry>
		    <entry>引入了 OpenSSL 0.9.8k 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800099</entry>
		    <entry>June 22, 2009</entry>
		    <entry>更新了 NGROUPS 并将路由虚拟化挪到它自己的
		      VImage 模块之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800100</entry>
		    <entry>June 24, 2009</entry>
		    <entry>修改了 SYSVIPC ABI 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800101</entry>
		    <entry>June 29, 2009</entry>
		    <entry>删去了与网络接口一一对应的
		      /dev/net/* 字符设备之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800102</entry>
		    <entry>July 12, 2009</entry>
		    <entry>在 struct sackhint、 struct tcpcb 以及 struct
		      tcpstat 上增加占位元素之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800103</entry>
		    <entry>July 13, 2009</entry>
		    <entry>将 TOE 驱动接口中的 struct tcpopt
		      替换为 TCP syncache 中的 struct toeopt 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800104</entry>
		    <entry>July 14, 2009</entry>
		    <entry>新增了基于 linker-set 的 per-vnet
		      分配器之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800105</entry>
		    <entry>July 19, 2009</entry>
		    <entry>递增了所有未使用符号版本的动态连接库版本之后的
		      8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800106</entry>
		    <entry>July 24, 2009</entry>
		    <entry>引入 VM 对象类型 OBJT_SG 之后的 8.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>800107</entry>
		    <entry>August 2, 2009</entry>
		    <entry>通过加入 newbus sxlock 使 newbus 子系统不再使用
		      Giant， 以及 8.0-RELEASE。</entry>
		  </row>
		  <row>
		    <entry>800108</entry>
		    <entry>November 21, 2009</entry>
		    <entry>实现了 EVFILT_USER kevent 过滤器之后的 8.0-STABLE。</entry>
		  </row>
		  <row>
		    <entry>800500</entry>
		    <entry>January 7, 2010</entry>
		    <entry>令 <command>pkg_add -r</command>
			使用 packages-8-stable 的 <literal>__FreeBSD_version</literal>
			版本变化的 8.0-STABLE。</entry>
                  </row>
		  <row>
		    <entry>800501</entry>
		    <entry>January 24, 2010</entry>
		    <entry>调整了
		      <function>scandir(3)</function> 和
			<function>alphasort(3)</function> 函数原型，
			使其符合 SUSv4 之后的 8.0-STABLE。</entry>
                  </row>
		  <row>
		    <entry>800502</entry>
		    <entry>January 31, 2010</entry>
		    <entry>新增了
		      <function>sigpause(3)</function> 之后的 8.0-STABLE。</entry>
                  </row>
		  <row>
		    <entry>800503</entry>
		    <entry>February 25, 2010</entry>
		    <entry>新增了用于管理网络接口说明的 SIOCGIFDESCR
		      和 SIOCSIFDESCR ioctl 之后的 8.0-STABLE。
		      这组接口受到了 OpenBSD 的启发。</entry>
		  </row>
		  <row>
		    <entry>800504</entry>
		    <entry>March 1, 2010</entry>
		    <entry>MFC 了 x86emu， 来自 OpenBSD 的 x86 CPU
		      实模式模拟器之后的 8.0-STABLE。</entry>
		  </row>
		  <row>
		    <entry>800505</entry>
		    <entry>May 18, 2010</entry>
		    <entry>MFC 了添加 liblzma, xz, xzdec
		      以及 lzmainfo 之后的 8.0-STABLE。</entry>
		  </row>
		  <row>
		    <entry>801000</entry>
		    <entry>June 14, 2010</entry>
		    <entry>8.1-RELEASE</entry>
		  </row>
		  <row>
		    <entry>801500</entry>
		    <entry>June 14, 2010</entry>
		    <entry>8.1-RELEASE 之后的 8.1-STABLE。</entry>
		  </row>
		  <row>
		    <entry>801501</entry>
		    <entry>November 3, 2010</entry>
		    <entry>用于 PL_FLAG_SCE/SCX/EXEC/SI 的 struct sysentvec 的 KBI 以及
		      用于 ptrace(PT_LWPINFO) 的 pl_siginfo 的 KBI
		      改变之后的 8.1-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802000</entry>
		    <entry>December 22, 2010</entry>
		    <entry>8.2-RELEASE</entry>
		  </row>
		  <row>
		    <entry>802500</entry>
		    <entry>December 22, 2010</entry>
		    <entry>8.2-RELEASE 之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802501</entry>
		    <entry>February 28, 2011</entry>
		    <entry>合并了 DTrace 变动， 包含用户态跟踪支持之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802502</entry>
		    <entry>March 6, 2011</entry>
		    <entry>在 libm 中合并了 log2 和 log2f 之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802503</entry>
		    <entry>May 1, 2011</entry>
		    <entry>将 gcc 升级至 FSF gcc-4_2-branch 最后一个
		      GPLv2 版本之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802504</entry>
		    <entry>May 28, 2011</entry>
		    <entry>引入模块化拥塞控制支持基础设施和 KPI 之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802505</entry>
		    <entry>May 28, 2011</entry>
		    <entry>引入了 Hhook 和 Khelp KPI 之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802506</entry>
		    <entry>May 28, 2011</entry>
		    <entry>在 tcpcb 结构中增加 OSD 之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802507</entry>
		    <entry>June 6, 2011</entry>
		    <entry>引入 ZFS v28 之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802508</entry>
		    <entry>June 8, 2011</entry>
		    <entry>删去了 sv_schedtail struct sysvec 方法之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802509</entry>
		    <entry>July 14, 2011</entry>
		    <entry>在 binutils 中合并了 SSE3 支持之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>802510</entry>
		    <entry>July 19, 2011</entry>
		    <entry>为 <function>rfork(2)</function> 添加了 RFTSIGZMB 标志之后的 8.2-STABLE。</entry>
		  </row>
		  <row>
		    <entry>900000</entry>
		    <entry>August 22, 2009</entry>
		    <entry>9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900001</entry>
		    <entry>September 8, 2009</entry>
		    <entry>引入了 x86emu， 来自 OpenBSD 的 x86 CPU
		      实模式模拟器之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900002</entry>
		    <entry>September 23, 2009</entry>
		    <entry>实现了 EVFILT_USER kevent 过滤器之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900003</entry>
		    <entry>December 2, 2009</entry>
		    <entry>新增了
		      <function>sigpause(3)</function> 以及 csu 的 PIE
		      支持之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900004</entry>
		    <entry>December 6, 2009</entry>
		    <entry>新增了 libulog 及其 libutempter 兼容接口之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900005</entry>
		    <entry>December 12, 2009</entry>
		    <entry>新增了用于查询指定休眠队列上等待者数量的
		      <function>sleepq_sleepcnt()</function> 函数之后的 9.0-CURRENT。</entry>
                  </row>
		  <row>
		    <entry>900006</entry>
		    <entry>January 4, 2010</entry>
		    <entry>调整了
		      <function>scandir(3)</function> 和
			<function>alphasort(3)</function> 函数原型，
			使其符合 SUSv4 之后的 9.0-CURRENT。</entry>
                  </row>
		  <row>
		    <entry>900007</entry>
		    <entry>January 13, 2010</entry>
		    <entry>删去了 utmp(5) 并增加了 utmpx (参阅
		      <function>getutxent(3)</function>)
		      以改善用户登录日志和系统事件支持之后的 9.0-CURRENT。</entry>
                  </row>
		  <row>
		    <entry>900008</entry>
		    <entry>January 20, 2010</entry>
		    <entry>9.0-CURRENT 引入了 BSD 授权的 bc/dc
		      并将 GNU bc/dc 标注为过时之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900009</entry>
		    <entry>January 26, 2010</entry>
		    <entry>新增了用于管理网络接口说明的 SIOCGIFDESCR
		      和 SIOCSIFDESCR ioctl 之后的 9.0-CURRENT。
		      这组接口受到了 OpenBSD 的启发。</entry>
		  </row>
		  <row>
		    <entry>900010</entry>
		    <entry>March 22, 2010</entry>
		    <entry>引入了 zlib 1.2.4 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900011</entry>
		    <entry>April 24, 2010</entry>
		    <entry>添加了 soft-updates 日志功能之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900012</entry>
		    <entry>May 10, 2010</entry>
		    <entry>添加了 liblzma, xz, xzdec 以及 lzmainfo 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900013</entry>
		    <entry>May 24, 2010</entry>
		    <entry>添加了针对 linux(4) 的 USB 修正之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900014</entry>
		    <entry>Jun 10, 2010</entry>
		    <entry>添加了 Clang 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900015</entry>
		    <entry>July 22, 2010</entry>
		    <entry>引入了 BSD grep 之后的 9.0-CURRENT。</entry>
		  </row>
 		  <row>
		    <entry>900016</entry>
		    <entry>July 28, 2010</entry>
		    <entry>在 struct malloc_type_internal 中加入了 mti_zone
		       之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900017</entry>
		    <entry>August 23, 2010</entry>
		    <entry>默认 grep 改回使用
		      GNU grep 并增加 WITH_BSD_GREP 开关之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900018</entry>
		    <entry>August 24, 2010</entry>
		    <entry>将 <function>pthread_kill(3)</function>
		      产生的信号在 si_code 中改为使用 SI_LWP 标记之后的
		      9.0-CURRENT。 之前， si_code 对应的标志为 SI_USER。</entry>
		  </row>
		  <row>
		    <entry>900019</entry>
		    <entry>August 28, 2010</entry>
		    <entry>为 <function>mmap(2)</function> 新增了
		      MAP_PREFAULT_READ 标志之后的 9.0-CURRENT。</entry>
		  </row>
 		  <row>
		    <entry>900020</entry>
		    <entry>September 9, 2010</entry>
		    <entry>为 sbuf 增加了 drain 功能并改变了
		      struct sbuf 布局之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900021</entry>
		    <entry>September 13, 2010</entry>
		    <entry>DTrace 增加用户态跟踪支持之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900022</entry>
		    <entry>October 2, 2010</entry>
		    <entry>新增了 BSDL man 工具， 并淘汰 GNU/GPL man 工具之后的
		      9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900023</entry>
		    <entry>October 11, 2010</entry>
		    <entry>引入 20101010 git 快照版本 xz 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900024</entry>
		    <entry>November 11, 2010</entry>
		    <entry>将 libgcc.a 替换为 libcompiler_rt.a 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900025</entry>
		    <entry>November 12, 2010</entry>
		    <entry>引入了模块化拥塞控制之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900026</entry>
		    <entry>November 30, 2010</entry>
		    <entry>引入串行管理协议 (SMP) 直通， 以及与之对应的 CAM CCB
		      XPT_SMP_IO 和 XPT_GDEV_ADVINFO 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900027</entry>
		    <entry>December 5, 2010</entry>
		    <entry>在 libm 中增加 log2 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900028</entry>
		    <entry>December 21, 2010</entry>
		    <entry>添加了 Hhook (Helper
		      Hook)、 Khelp (Kernel Helpers) 和 Object Specific Data
		      (OSD) KPI 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900029</entry>
		    <entry>December 28, 2010</entry>
		    <entry>修改 TCP 协议栈使其允许 Khelp 模块通过 helper hook 指针，
		      与 TCP 控制块交互并保存连接数据之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900030</entry>
		    <entry>January 12, 2011</entry>
		    <entry>将 libdialog 更新至版本 20100428 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900031</entry>
		    <entry>February 7, 2011</entry>
		    <entry>添加了 <function>pthread_getthreadid_np(3)</function> 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900032</entry>
		    <entry>February 8, 2011</entry>
		    <entry>删除了 uio_yield 函数原型和符号之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900033</entry>
		    <entry>February 18, 2011</entry>
		    <entry>将 binutils 更新至 2.17.50 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900034</entry>
		    <entry>March 8, 2011</entry>
		    <entry>修改了 struct sysvec (sv_schedtail) 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900035</entry>
		    <entry>March 29, 2011</entry>
		    <entry>将基本系统中 gcc 和
		      libstdc++ 升级至最后的 GPLv2 授权版本之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900036</entry>
		    <entry>April 18, 2011</entry>
		    <entry>在基本系统中删去了 libobjc 和 Objective-C 支持之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900037</entry>
		    <entry>May 13, 2011</entry>
		    <entry>在基本系统中引入了 libprocstat(3)
		      函数库以及 fuser(1) 工具之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900038</entry>
		    <entry>May 22, 2011</entry>
		    <entry>为 VFS_FHTOVP(9) 添加锁标志参数之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900039</entry>
		    <entry>June 28, 2011</entry>
		    <entry>引入了来自 OpenBSD 4.5 的 pf 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900040</entry>
		    <entry>July 19, 2011</entry>
		    <entry>将 amd64 和 ia64 平台上的 MAXCPU 提高到 64，
		      并把 XLP (mips) 上的值提高到 128 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900041</entry>
		    <entry>August 13, 2011</entry>
		    <entry>实现了 Capsicum
		      capabilities 之后的 9.0-CURRENT。 fget(9) 新增了权限参数。</entry>
		  </row>
		  <row>
		    <entry>900042</entry>
		    <entry>August 28, 2011</entry>
		    <entry>提高修改过 ABI 的动态连接库版本号之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900043</entry>
		    <entry>September 2, 2011</entry>
		    <entry>增加了对不支持 SCSI 快取缓存同步功能的 USB
		      大容量存储设备自动检测功能之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900044</entry>
		    <entry>September 10, 2011</entry>
		    <entry>重构了 auto-quirk 之后的 9.0-CURRENT。</entry>
		  </row>
		  <row>
		    <entry>900045</entry>
		    <entry>Oct 13, 2011</entry>
		    <entry>将非兼容性系统调用入口点全部增加 sys_ 前缀之后的 9.0-CURRENT。</entry>
		  </row>
		</tbody>
	      </tgroup>
	    </table>

	<note>
	  <para>请注意， 2.2.5-RELEASE 之后有一段时间的 2.2-STABLE 会声称自己是
	    <quote>2.2.5-STABLE</quote>。 这种模式的版本号表示的是年月。
	    但随后， 我们决定， 从 2.2 开始， 将它改为更为简洁的 主/次
	    版本号的形式来命名版本。 这是因为并行地在多个分支上进行开发，
	    使得通过实际的发布日期来区分不同的版本变得不再现实。
	    如果您正在做新的 port， 应该不需要担心较早的 -CURRENT；
	    在此列出仅供参考。</para>
	</note>
      </sect1>

      <sect1 xml:id="dads-after-port-mk">
	<title>在 <filename>bsd.port.mk</filename> 之后写一些内容</title>

	<para>不要在 <literal>.include
	    &lt;bsd.port.mk&gt;</literal> 这行之后增加任何内容。
	  这通常可以通过在您的 <filename>Makefile</filename>
	  中间的某处引用 <filename>bsd.port.pre.mk</filename>，
	  并在结尾的地方引用
	  <filename>bsd.port.post.mk</filename> 来避免。</para>

	<note>
	  <para>只能够采用
	    <filename>bsd.port.pre.mk</filename>/<filename>bsd.port.post.mk</filename> 或
	    <filename>bsd.port.mk</filename> 两种写法之一；
	    任何时候都不要同时使用两种写法。</para>
	</note>

	<para><filename>bsd.port.pre.mk</filename> 只定义了很少的变量，
	  它们可以在 <filename>Makefile</filename>
	  中用于进行一些测试， 而 <filename>bsd.port.post.mk</filename>
	  则定义了所有其它的变量。</para>

	<para>下面是一些由 <filename>bsd.port.pre.mk</filename>
	  定义的比较重要的变量 (这并不是一份完整的列表，
	  您可以阅读 <filename>bsd.port.mk</filename> 以获得全部变量的名字)。</para>

	<informaltable frame="none" pgwide="1">
	  <tgroup cols="2">
	    <thead>
	      <row>
		<entry>变量</entry>
		<entry>描述</entry>
	      </row>
	    </thead>

	    <tbody>
	      <row>
		<entry><varname>ARCH</varname></entry>
		<entry>由 <command>uname
		    -m</command> 输出得到的硬件架构的名字
		  (例如， <literal>i386</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>OPSYS</varname></entry>
		<entry>由 <command>uname -s</command> 返回的操作系统类型 (例如，
		  <literal>FreeBSD</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>OSREL</varname></entry>
		<entry>操作系统的版本号 (例如
		  <literal>2.1.5</literal> 或
		  <literal>2.2.7</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>OSVERSION</varname></entry>
		<entry>操作系统的版本号的数值形式； 它等于
		  <link linkend="freebsd-versions"><literal>__FreeBSD_version</literal></link>。</entry>
	      </row>

	      <row>
		<entry><varname>PORTOBJFORMAT</varname></entry>
		<entry>系统默认的执行文件格式
		  (<literal>elf</literal> 或 <literal>aout</literal>；
		  请注意， <quote>现代的</quote> FreeBSD 版本中，
		  <literal>aout</literal> 已在淘汰之列。)</entry>
	      </row>

	      <row>
		<entry><varname>LOCALBASE</varname></entry>
		<entry><quote>local</quote> 目录的根 (例如，
		  <literal>/usr/local/</literal>)</entry>
	      </row>

	      <row>
		<entry><varname>PREFIX</varname></entry>
		<entry>port 应被安装到哪里 (参见 <link linkend="porting-prefix">关于
		    <varname>PREFIX</varname> 的更多说明</link>)。</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</informaltable>

	<note>
	  <para>如果您需要定义
	    <varname>USE_IMAKE</varname>， <varname>USE_X_PREFIX</varname>， 或
	    <varname>MASTERDIR</varname> 这些变量， 则应在引用
	    <filename>bsd.port.pre.mk</filename> 之前完成。</para>
	</note>

	<para>下面是一些在引用
	  <filename>bsd.port.pre.mk</filename> 之后可以进行的判断：</para>

	<programlisting># 如果 perl5 已经在系统中提供， 则不必编译 lang/perl5
.if ${OSVERSION} &gt; 300003
BROKEN= perl is in system
.endif

# ELF 只使用一个 shlib 版本
.if ${PORTOBJFORMAT} == "elf"
TCL_LIB_FILE=  ${TCL_LIB}.${SHLIB_MAJOR}
.else
TCL_LIB_FILE=  ${TCL_LIB}.${SHLIB_MAJOR}.${SHLIB_MINOR}
.endif

# 软件会自动为 ELF 创建符号链接， 但 a.out 则需要另行创建
post-install:
.if ${PORTOBJFORMAT} == "aout"
       ${LN} -sf liblinpack.so.1.0 ${PREFIX}/lib/liblinpack.so
.endif</programlisting>

	<para>您还记得应该在
	  <literal>BROKEN=</literal> 和
	  <literal>TCL_LIB_FILE=</literal> 后面使用制表符，
	  而不是空格， 对吧？ <!-- smiley -->:-)</para>
      </sect1>

      <sect1 xml:id="dads-sh-exec">
	<title>在 wrapper 脚本中使用 <function>exec</function> 语句</title>

	<para>如果 port 安装了用以启动其他程序的脚本，
	  并且运行其他程序是这些脚本的最后一项操作，
	  请务必使用 <function>exec</function> 语句来运行这些程序， 例如：</para>

	<programlisting>#!/bin/sh
exec %%LOCALBASE%%/bin/java -jar %%DATADIR%%/foo.jar "$@"</programlisting>

	<para>使用 <function>exec</function> 语句表示执行指定的程序来取代 shell
	  进程。 如果省略了 <function>exec</function>，
	  则 shell 进程会一直在内存中， 从而不必要地消耗了额外的系统资源。</para>

      </sect1>

      <sect1 xml:id="dads-rational">
	<title>理性行事</title>

	<para>任何 <filename>Makefile</filename> 都应该简单并理性地行事。
	  如果您能让其中的条目更为简单和易读， 一定要这样做。
	  例如， 使用 make 提供的
	  <literal>.if</literal> 结构， 而不要使用 shell 的
	  <literal>if</literal>， 只要能重定义
	  <varname>EXTRACT*</varname> 就不要重载
	  <buildtarget>do-extract</buildtarget>， 尽量使用
	  <varname>GNU_CONFIGURE</varname> 而不是 <literal>CONFIGURE_ARGS
	    += --prefix=&dollar;{PREFIX}</literal>。</para>

	<para>如果您在尝试做什么事情的时候发现不得不写大量的代码，
	  请回过头来复审一下
	  <filename>bsd.port.mk</filename>， 看看是否有您正打算做的事情的现成实现。
	  尽管读起来可能很费劲， 但有很多貌似很难的问题，
	  在 <filename>bsd.port.mk</filename> 中都给出了十分简便的解决方案。</para>
      </sect1>

      <sect1 xml:id="dads-cc">
	<title>遵循 <varname>CC</varname> 和
	  <varname>CXX</varname> 设置</title>

	<para>port 应遵循 <varname>CC</varname>
	  和 <varname>CXX</varname> 变量的设置。
	  这也就是说， port 不应使用绝对的方式来设置这个变量的值，
	  而罔顾已经存在的设置； 与此相反， 它应该在其值后加入需要的其它值。
	  这样， 就可以设置全局的联编选项， 令其影响所有的 port 联编过程了。</para>

	<para>如果实在无法这样做， 请在 <filename>Makefile</filename>
	  中加入 <literal>NO_PACKAGE=ignores
	    cflags</literal>。</para>

	<para>下面的 <filename>Makefile</filename>
	  实例给出了如何遵循 <varname>CC</varname> 和 <varname>CXX</varname>
	  变量的设置。 注意这里用到的 <varname>?=</varname>：</para>

	<programlisting>CC?= gcc</programlisting>
	<programlisting>CXX?= g++</programlisting>

	<para>下面则是没有遵循
	  <varname>CC</varname> 和 <varname>CXX</varname>
	  的例子：</para>

	<programlisting>CC= gcc</programlisting>
	<programlisting>CXX= g++</programlisting>

	<para>在 FreeBSD 系统中，
	  <varname>CC</varname> 和 <varname>CXX</varname>
	  这两个变量都可以在
	  <filename>/etc/make.conf</filename> 中自行定义。
	  第一个例子只有在
	  <filename>/etc/make.conf</filename> 中没有定义时才对这两个变量进行定义，
	  从而保持了系统范围的配置。 而第二个例子则会覆盖任何现有的配置。</para>
      </sect1>

      <sect1 xml:id="dads-cflags">
	<title>遵循 <varname>CFLAGS</varname></title>

	<para>您的 port 应遵循 <varname>CFLAGS</varname> 变量的设置。
	  这也就是说， port 不应使用绝对的方式来设置这个变量的值，
	  而罔顾已经存在的设置； 与此相反， 它应该在其值后加入需要的其它值，
	  这样， 就可以设置全局的联编选项， 令其影响所有的 port 联编过程了。</para>

	<para>如果实在无法这样做， 请在 <filename>Makefile</filename>
	  中加入 <literal>NO_PACKAGE=ignores
	    cflags</literal>。</para>

	<para>下面的 <filename>Makefile</filename> 例子，
	  可以帮助我们理解如何遵循 <varname>CFLAGS</varname> 的设置。 注意所用的
	  <varname>+=</varname>：</para>

	<programlisting>CFLAGS+= -Wall -Werror</programlisting>

	<para>下面是一个未能遵循
	  <varname>CFLAGS</varname> 设置的例子：</para>

	<programlisting>CFLAGS= -Wall -Werror</programlisting>

	<para>一般来说， <varname>CFLAGS</varname> 在
	  FreeBSD 系统中是在 <filename>/etc/make.conf</filename> 里配置的。
	  第一个例子在
	  <varname>CFLAGS</varname> 变量中增加了一些参数，
	  并保持了所有系统预定义的标志。 而第二个例子，
	  则会覆盖掉任何先前定义的参数。</para>

	<para>您应从第三方软件的
	  <filename>Makefile</filename> 中去掉特殊的优化设置。
	  系统的 <varname>CFLAGS</varname> 给出了全系统范围内的优化设置参数。
	  下面是一个未经修改的 <filename>Makefile</filename>
	  实例：</para>

	<programlisting>CFLAGS= -O3 -funroll-loops -DHAVE_SOUND</programlisting>

	<para>如果使用系统的优化参数， 则
	  <filename>Makefile</filename> 中的设置应该类似下面这样：</para>

	<programlisting>CFLAGS+= -DHAVE_SOUND</programlisting>

      </sect1>

      <sect1 xml:id="dads-pthread">
	<title>线程库</title>

	<para>在 &os; 上， 线程库必须通过特殊的连接器参数
	  <literal>-pthread</literal> 连接到可执行文件。 如果 port 一定要直接连接
	  <literal>-lpthread</literal> 或 <literal>-lc_r</literal>，
	  则应将其改为使用由 ports 框架提供的 <varname>PTHREAD_LIBS</varname>。
	  这个变量的值通常是 <literal>-pthread</literal>，
	  但在某些特定平台上的 &os; 版本中， 它可能是其它值， 因此， 不要将
	  <literal>-pthread</literal> 硬编码到您的补丁中， 而应使用
	  <varname>PTHREAD_LIBS</varname> 变量。</para>

	<note>
	  <para>如果设置了 <varname>PTHREAD_LIBS</varname>，
	    而在联编时出现 <literal>unrecognized
	    option '-pthread'</literal> 这样的错误， 可能需要通过将
	    <varname>CONFIGURE_ENV</varname> 设为 <literal>LD=${CC}</literal>
	    来使用
	    <command>gcc</command> 作为连接器。
	    <literal>-pthread</literal> 这一选项并不为
	    <command>ld</command> 所直接支持。</para>
	  </note>

      </sect1>

      <sect1 xml:id="dads-freedback">
	<title>反馈</title>

	<para>如果进行了一些很好的修改和补丁， 一定要把它们发回给原作者，
	  或维护者， 以便在下一版本的代码中包含它们。
	  这会让您在软件发布新版本的时候变得轻松一些。</para>
      </sect1>

      <sect1 xml:id="dads-readme">
	<title><filename>README.html</filename></title>

	<para>不要包含 <filename>README.html</filename> 文件。
	  这个文件并非 CVS 代码库中的一部分， 它是由
	  <command>make readme</command> 命令生成的。
	</para>
      </sect1>

      <sect1 xml:id="dads-noinstall">
	<title>使用 <varname>BROKEN</varname>、
	  <varname>FORBIDDEN</varname> 或 <varname>IGNORE</varname>
	  阻止用户安装 port</title>

	<para>某些时候会需要阻止用户安装某个 port。
	  想要告诉用户某个 port 不应被安装， 有许多可以在 port 的
	  <filename>Makefile</filename> 中使用的
	  <command>make</command> 变量。 下列
	  <command>make</command> 的值， 将是在用户试图安装时得到的提示信息。
	  务请使用正确的 <command>make</command> 变量，
	  因为每一个都表达了截然不同的意义， 而且许多自动化系统， 例如
	<link linkend="build-cluster">port 联编集群</link>、
	<link linkend="freshports">FreshPorts</link>， 以及
	<link linkend="portsmon">portsmon</link>， 都依赖于
	  <filename>Makefile</filename> 的正确性。</para>

	<sect2 xml:id="dads-noinstall-variables">
	  <title>变量</title>

	<itemizedlist>
	  <listitem>
	    <para><varname>BROKEN</varname> 专门用于表达目前无法正确编译、
	      安装或卸载这类问题。 如果是临时性的问题， 则可以使用它。</para>

	    <para>如果进行了相关的配置， 则联编集群仍将尝试联编它，
	      以确认导致问题的深层问题是否已被解决。 (不过， 一般情况下，
	      联编集群并不会这样做。)</para>

	    <para>举例来说， 当 port 发生下述情况时， 应使用
	      <varname>BROKEN</varname>：</para>

	    <itemizedlist>
	      <listitem>
		<para>无法编译 (does not compile)</para>
	      </listitem>

	      <listitem>
		<para>无法正确进行配置或安装操作</para>
	      </listitem>

	      <listitem>
		<para>在
		  <filename>${LOCALBASE}</filename> 以外的地方安装文件</para>
	      </listitem>

	      <listitem>
		<para>卸载时无法删除所安装的全部文件 (不过，
		  留下用户改过的文件可接受的， 因为可能希望这样作)</para>
	      </listitem>
	    </itemizedlist>

	  </listitem>

	  <listitem>
	    <para><varname>FORBIDDEN</varname> 用于表示 ports 中包含安全漏洞，
	      或者可能会给安装了这个 port 的 FreeBSD
	      系统带来严重的安全隐患 (例如： 一个很不安全的程序，
	      或包含了能够被轻易攻陷的服务的软件)。 如果发现了安全漏洞，
	      而其作者没有发布升级版本， 则应立即把那个
	      port 标记为 <varname>FORBIDDEN</varname>。
	      理想情况下， 包含安全漏洞的 port 应被尽快升级，
	      以便减少包含漏洞的 FreeBSD 主机的数量
	      (我们希望保持良好的安全记录)， 然而，
	      有时在安全漏洞的披露和软件更新之间可能会有一个间隔，
	      此时应予以说明。 除了安全之外， 请不要以任何其它理由将 port 标记为
	      <varname>FORBIDDEN</varname>。</para>
	  </listitem>

	  <listitem>
	    <para><varname>IGNORE</varname> 用来表示 port
	      由于某些其它原因不应予以联编。 如果认为发生了结构性的问题，
	      则应使用它。 任何情况下，
	      联编集群都不会联编标记为
	      <varname>IGNORE</varname> 的 port。 以下是使用
	      <varname>IGNORE</varname> 的一些例子：</para>

	    <itemizedlist>
	      <listitem>
		<para>能够编译但无法正常运行</para>
	      </listitem>

	      <listitem>
		<para>无法与运行的 &os; 版本一同工作</para>
	      </listitem>

	      <listitem>
		<para>联编时需要 &os; 内核的源代码，
		  但用户没有安装它们</para>
	      </listitem>

	      <listitem>
		<para>由于授权原因， 必须手工下载 distfile</para>
	      </listitem>

	      <listitem>
		<para>无法与的某个已安装的 port 一同工作 (例如， port 依赖于
		  <package>www/apache21</package> 而安装的则是
		  <package>www/apache13</package>)</para>
	      </listitem>
	    </itemizedlist>

	    <note>
	      <para>如果 port 与某个已经安装的
		port 冲突 (例如， 它们在同一位置安装同名但功能不同的文件)，
		则应 <link linkend="conflicts">使用
		<varname>CONFLICTS</varname> 来标记它</link>。
		<varname>CONFLICTS</varname> 将自动地设置
		<varname>IGNORE</varname>。</para>
	    </note>
	  </listitem>

	  <listitem>
	    <para>如果 port 只应在某些平台上标记为 <varname>IGNORE</varname>，
	      还有另外两个方便使用的
	      <varname>IGNORE</varname> 变量可供选择：
	      <varname>ONLY_FOR_ARCHS</varname> 和
	      <varname>NOT_FOR_ARCHS</varname>。 例如：</para>

	    <programlisting>ONLY_FOR_ARCHS= i386 amd64</programlisting>

	    <programlisting>NOT_FOR_ARCHS= alpha ia64 sparc64</programlisting>

	    <para>可以使用 <varname>ONLY_FOR_ARCHS_REASON</varname> 和
	      <varname>NOT_FOR_ARCHS_REASON</varname> 来配置定制的
	      <varname>IGNORE</varname> 消息。 此外， 还可以使用
	      <varname>ONLY_FOR_ARCHS_REASON_<replaceable>ARCH</replaceable></varname>
	      和
	      <varname>NOT_FOR_ARCHS_REASON_<replaceable>ARCH</replaceable></varname>
	      来分别指定与具体平台有关的信息。</para>
	  </listitem>

	  <listitem>
	    <para>如果 port 会下载并安装用于 i386 的预编译二进制文件， 则应设置
	      <varname>IA32_BINARY_PORT</varname>。 如果设置了这个变量，
	      则系统会检查是否已经在
	      <filename>/usr/lib32</filename> 目录中安装了
	      IA32 版本的函数库， 以及内核是否提供了 IA32 兼容支持。
	      如果这些依赖条件不满足， 则会自动设置
	      <varname>IGNORE</varname>。</para>
	  </listitem>

	</itemizedlist>

	</sect2>
	<sect2 xml:id="dads-noinstall-notes">
	  <title>实现说明</title>

	  <para>这些字串不应使用引号括起来。 此外， 由于显示给用户的方式不同，
	    这些字串的措辞也应有所不同。 例如：</para>

	  <programlisting>BROKEN= this port is unsupported on FreeBSD 5.x</programlisting>

	  <programlisting>IGNORE= is unsupported on FreeBSD 5.x</programlisting>

	  <para>它们分别会在
	    <command>make describe</command> 时产生下面的输出：</para>

	  <programlisting>===&gt;  foobar-0.1 is marked as broken: this port is unsupported on FreeBSD 5.x.</programlisting>

	  <programlisting>===&gt;  foobar-0.1 is unsupported on FreeBSD 5.x.</programlisting>
	</sect2>
      </sect1>

      <sect1 xml:id="dads-deprecated">
	<title>使用 <varname>DEPRECATED</varname>
	  或 <varname>EXPIRATION_DATE</varname> 表示某个 port 将被删除</title>

	<para>一定要记得 <varname>BROKEN</varname> 和
	  <varname>FORBIDDEN</varname> 只应作为当某个 port
	  无法正常工作时的临时解决方案。 永久性地坏掉了的 port 应被从 ports tree
	  中完全删除。</para>

	<para>需要时还可以使用 <varname>DEPRECATED</varname>
	  和 <varname>EXPIRATION_DATE</varname> 来通知用户某个 port
	  不应被使用， 并即将被删除。 前一个变量用来表达为什么计划删除 port；
	  而后一个是则是一个 ISO 8601 格式的日期 (YYYY-MM-DD)。
	  两者都会向用户呈现。</para>

	<para>也可以设置 <varname>DEPRECATED</varname>
	  而不给出 <varname>EXPIRATION_DATE</varname> (例如，
	  建议使用某个新版本的 port)， 但反之则没有意义。</para>

	<para>目前还没有确切的关于需要给出多少通知的政策。
	  当前的实践是， 对于与安全有关的问题为一个月，
	  而与联编有关的问题则为两个月。 这也让有兴趣的 committer
	  能够有一点时间来修正问题。</para>
      </sect1>

      <sect1 xml:id="dads-dot-error">
	<title>避免使用 <literal>.error</literal> 结构</title>

	<para>在 <filename>Makefile</filename> 中给出信号，
	  表示由于某种外界因素 (例如， 用户指定了无效的联编选项)
	  而无法安装的方法是将变量
	  <varname>IGNORE</varname> 设为一非空值。 这个值将被格式化，
	  并在用户执行 <command>make install</command> 是给出提示。</para>

	<para>用 <literal>.error</literal> 实现这一目的是一种常见的误用。
	  这样做的问题是， 许多在 ports 树上运行的自动化工具会因此而失败。
	  最常见的情况见于联编 <filename>/usr/ports/INDEX</filename> 的过程
	  (参见 <xref linkend="make-describe"/>)。 然而， 即使十分普通的命令，
	  例如 <command>make maintainer</command>，
	  在这种情况下也会失败。 这是不可接受的。</para>

	<example xml:id="dot-error-breaks-index">
	  <title>怎样避免使用 <literal>.error</literal></title>
	  <para>考虑有人在 <filename>make.conf</filename> 中设置了
	    <programlisting>USE_POINTYHAT=yes</programlisting>
	    的情形。 接下来的例子中， 第一个 <filename>Makefile</filename>
	    中的问题将导致 <command>make index</command> 失败，
	    而第二个则不会：</para>
	    <programlisting>.if USE_POINTYHAT
.error "POINTYHAT is not supported"
.endif</programlisting>
	    <programlisting>.if USE_POINTYHAT
IGNORE=POINTYHAT is not supported
.endif</programlisting>
	</example>

      </sect1>

      <sect1 xml:id="dads-sysctl">
	<title>对于 <filename>sysctl</filename> 的使用</title>

	<para>除了在 target 中之外， 是不鼓励使用 <filename>sysctl</filename>
	  的。 这是因为计算
	  <literal>makevar</literal>， 例如在
	  <command>make index</command> 中所进行的那种，
	  都不得不运行一条命令， 这会使这一操作变得更慢。</para>

	<para>在使用 &man.sysctl.8; 时，
	  务必通过 <varname>SYSCTL</varname> 变量来进行，
	  因为此变量将展开成命令的完整路径， 并且用户可以根据需要另行指定。</para>
      </sect1>

      <sect1 xml:id="dads-rerolling-distfiles">
	<title>重新发布的 distfiles</title>

	<para>有时， 一些软件的作者会修改业已发布的 distfile 的内容，
	  而并不修改文件名。 这种情况下， 您需要验证这些变动是来自软件作者的官方改动。
	  在过去， 曾经发生过下载服务器上的 distfile 被悄悄换成注入过恶意代码的版本，
	  并给用户安全造成威胁或损害的事情。</para>

	<para>您应保留一份旧的 distfile， 并下载一份新的， 分别展开，
	  用 &man.diff.1; 来对比其内容。 如果没有发现可疑的变动，
	  就可以更新 <filename>distinfo</filename> 了。
	  请务必在您的 PR 或 commit log 中对这些差异进行描述，
	  以便让别人了解您已经仔细对比过差异， 并确认没有问题了。</para>

	<para>除此之外， 也可以联系软件的作者， 以确认这些修改是否是他们做的。</para>
      </sect1>

      <sect1 xml:id="dads-misc">
	<title>杂记</title>

	<para>需要仔细地反复检查
	  <filename>pkg-descr</filename> 和 <filename>pkg-plist</filename>
	  这两个文件。 如果您正在复审一个 port，
	  并认为这两个文件应该改进， 请一定要这样做。</para>

	<para>请不要在系统中复制多份 GNU General Public License。</para>

	<para>一定要非常小心地处理法律问题！
	  不要让我们发布没有得到合法授权的软件！</para>
      </sect1>

    </chapter>

    <chapter xml:id="porting-samplem">
      <title>示范的 <filename>Makefile</filename></title>

      <para>这里是一个您可以在建立新 port 时参考的
	<filename>Makefile</filename>。 请务必删除不需要的那些注释
	(方括号中间的文字)！</para>

      <para>建议您按照下面这样的格式 (变量顺序， 小节之间的空行等) 来编写。
	这个格式的作用是便于查找重要的信息。 我们建议您使用 <link linkend="porting-portlint">portlint</link> 来检查
	<filename>Makefile</filename>。</para>

      <programlisting>[头部... 主要是让我们更容易地分辨不同的 port。]
# New ports collection makefile for:   xdvi
[版本这行， 只有在 PORTVERSION 变量不足以描述 port 时才需要]
# Date created:                26 May 1995
[这是最初将软件移植到 FreeBSD 上的日期， 一般来说是建立这份 Makefile 的日期。
请注意不要在之后再次修改这个日期。]
# Whom:                        Satoshi Asami &lt;asami@FreeBSD.org&gt;
#
# &dollar;FreeBSD&dollar;
[ ^^^^^^^^^ 这是 CVS 在文件 commit 到我们的代码库时， 自动进行替换的 RCS ID。
如果您正在升级 port， 不要把它改回 "&dollar;FreeBSD&dollar;"。
CVS 会自动进行处理。]
#

[这个小节描述 port 本身以及主要下载站点 - PORTNAME 和 PORTVERSION
 应放在最前面， 随后是 CATEGORIES， 然后是 MASTER_SITES， 接下来是
 MASTER_SITE_SUBDIR。 如果需要的话， 接下来应指定
 PKGNAMEPREFIX 和 PKGNAMESUFFIX。 随后是 DISTNAME， EXTRACT_SUFX，
 以及 DISTFILES， EXTRACT_ONLY， 如果需要的话。]
PORTNAME=      xdvi
PORTVERSION=   18.2
CATEGORIES=    print
[如果不想使用 MASTER_SITE_* 宏， 一定不要忘记结尾的斜线 ("/")！]
MASTER_SITES=  ${MASTER_SITE_XCONTRIB}
MASTER_SITE_SUBDIR= applications
PKGNAMEPREFIX= ja-
DISTNAME=      xdvi-pl18
[如果源代码包不是标准的 ".tar.gz" 形式， 就需要设置这个]
EXTRACT_SUFX=  .tar.Z

[分散的补丁 -- 可以为空]
PATCH_SITES=   ftp://ftp.sra.co.jp/pub/X11/japanese/
PATCHFILES=    xdvi-18.patch1.gz xdvi-18.patch2.gz

[监护人(maintainer); *必须有*!  这是某个资源处理 port 更新、 联编失败，
 以及回答用户直接提问或汇报 bug 的人。 为了保证 Ports Collection
 有尽可能高的品质， 我们不再接受指定给 "ports@FreeBSD.org" 的新 port。]
MAINTAINER=    asami@FreeBSD.org
COMMENT=       A DVI Previewer for the X Window System

[依赖的其它软件包 -- 可以为空]
RUN_DEPENDS=   gs:${PORTSDIR}/print/ghostscript
LIB_DEPENDS=   Xpm.5:${PORTSDIR}/graphics/xpm

[这节是其它不适合上几节的标准 bsd.port.mk 变量]
[如果需要在 configure、 build 或 install 过程中提问...]
IS_INTERACTIVE=        yes
[如果解压缩到 ${DISTNAME} 以外的目录...]
WRKSRC=                ${WRKDIR}/xdvi-new
[如果作者发布的补丁不是相对于 ${WRKSRC} 的， 可能需要调整这个]
PATCH_DIST_STRIP=      -p1
[如果需要运行由 GNU autoconf 生成的 "configure" 脚本]
GNU_CONFIGURE= yes
[如果需要使用 GNU make， 而不是 /usr/bin/make 来完成联编...]
USE_GMAKE=     yes
[如果是一个 X 应用程序， 并使用 "xmkmf -a" 来运行...]
USE_IMAKE=     yes
[et cetera.]

[将在接下来的部分使用的非标准的变量]
MY_FAVORITE_RESPONSE=  "yeah, right"

[接下来是特殊规则， 按调用顺序排列]
pre-fetch:
	i go fetch something, yeah

post-patch:
	i need to do something after patch, great

pre-install:
	and then some more stuff before installing, wow

[结语]
.include &lt;bsd.port.mk&gt;</programlisting>
    </chapter>

    <chapter xml:id="keeping-up">
      <title>保持同步</title>

      <para>&os; 的 Ports Collection 在持续地进行修改。
	这里提供了一些关于如何保持同步的信息。</para>

      <sect1 xml:id="freshports">
	<title>FreshPorts</title>

	<para>最简单的了解已经被 commit 到 ports 中的更新的方法， 是订阅
	  <link xlink:href="http://www.FreshPorts.org/">FreshPorts</link>。
	  您可以选择多个 ports 并对其进行监视。 强烈建议维护人员订阅它，
	  这样就不仅能接收到他们自己所做的修改， 而且能看到其它 &os;
	  committer 所做的改动。 (保持与所依赖的
	  ports 框架同步是必要的&mdash;虽然一般来说您会在这样的 commit
	  之前收到一个礼貌性的通知， 但有时可能会有人没有注意到需要这样做，
	  或者这样做很困难。 另外， 有些时候通知的修改也可能是微不足道的。
	  我们希望每一个人能够正确地进行判断。)</para>

	<para>如果想使用 FreshPorts， 之需要建立一个账号。 如果您注册的邮件地址是
	  <literal>@FreeBSD.org</literal>， 您会看到 web 页面右侧的 opt-in
	  连接。 如果您已经注册了 FreshPorts 账号，
	  但没有使用 <literal>@FreeBSD.org</literal> 邮件地址，
	  则只需把邮件地址改为 <literal>@FreeBSD.org</literal>， 重新订阅，
	  并将其改回。</para>

	<para>FreshPorts 也会对每一个 FreeBSD ports tree 上的 commit
	  进行自动的合法性检查。 如果您订阅了这项服务， 则如果发现了错误，
	  就会收到来自 FreshPorts 的检测报告。</para>
      </sect1>

      <sect1 xml:id="cvsweb">
	<title>代码库的 Web 访问界面</title>

	<para>可以通过 web 界面来浏览源代码库中的文件。
	  影响整个 ports 系统的修改， 现在都会在
	  <link xlink:href="http://cvsweb.FreeBSD.org/ports/CHANGES">
	  CHANGES</link> 文件中说明。 影响某一个 port 的变动， 则在
	  <link xlink:href="http://cvsweb.FreeBSD.org/ports/UPDATING">
	  UPDATING</link> 文件中说明。 尽管如此， 所有问题最为权威的答案，
	  毫无疑问应该是 <link xlink:href="http://cvsweb.FreeBSD.org/ports/Mk/bsd.port.mk">
	  bsd.port.mk</link> 的源代码， 以及相关的文件。</para>

      </sect1>

      <sect1 xml:id="ports-mailling-list">
	<title>&os; Ports 邮件列表</title>

	<para>如果您维护了某个或某一些 ports， 则应该考虑订阅
	  &a.ports;。 对于 ports 工作方式的重要修改都会在此宣示，
	  并提交到 <filename>CHANGES</filename>。</para>

      </sect1>

      <sect1 xml:id="build-cluster">
	<title>位于 <systemitem class="fqdomainname">pointyhat.FreeBSD.org</systemitem>
	   的 &os; Port 联编集群</title>

	  <para>&os; 的一个最不为人所知的强项是，
	    它拥有一个专用于持续联编 Ports Collection 的集群，
	    这个集群会联编所有主要的 OS 版本在每一个 Tier-1 架构上的 package。
	    您可以在
	    <link xlink:href="http://pointyhat.FreeBSD.org/">package
	    联编和错误日志</link> 找到其结果。</para>

	  <para>每一个 port 都会被联编，
	    除非标记为 <varname>IGNORE</varname>。
	    标记了 <varname>BROKEN</varname> 的 port 仍然会被继续尝试，
	    以了解是否某些依赖关系的变动解决了其问题
	    (这是通过给 port 的 <filename>Makefile</filename> 传
	    <varname>TRYBROKEN</varname> 参数来完成的)。</para>

      </sect1>

      <sect1 xml:id="distfile-survey">
	<title>&os; 的 Ports Distfile 扫描器</title>

	  <para>联编集群是一组专门用于联编所有 port 最新版本的机器，
	    其上已经下载了所有的 distfiles。 然而， 由于 Internet 在持续地发生变化，
	    distfile 可能很快就消失了。 <link xlink:href="http://www.portscout.org">FreeBSD
	    Ports distfile 扫描器</link> 试图查询每一个 port 的所有下载站点，
	    以期找出这些文件是否依然存在。 维护者应规律性地检查这些报告，
	    这不仅会提高用户联编的速度， 同时也避免了浪费那些镜像了全部
	    distfile 的志愿者的带宽。</para>

      </sect1>

      <sect1 xml:id="portsmon">

	<title>&os; 的 Ports 追踪系统</title>

	<para>另一个非常方便的资源， 就是
	  <link xlink:href="http://portsmon.FreeBSD.org">
	  FreeBSD Ports 追踪系统</link> (也被称作
	  <literal>portsmon</literal>)。
	  这个系统包含了一个处理若干信息来源的数据库，
	  并提供了一个可以通过 web 方式浏览的界面。 目前，
	  它利用到了和 ports 有关的问题报告 (PR)、 来自联编集群的错误日志，
	  以及来自 Ports Collection 的文件所提供的信息。
	  未来， 还会对它进行进一步的扩展， 从而提供包括 distfile 普查，
	  以及其它来源在内的更多信息。</para>

	<para>要使用这个工具， 可以从查看关于某一个 port 的全部资料的
	  <link xlink:href="http://portsmon.FreeBSD.org/portoverview.py">
	  Port 的纵览</link> 开始。</para>

	<para>本文撰写时, 这是唯一一个能够将 GNATS PR 项，
	  同对应的 port 名字映射起来的资源。 (提交 PR 的用户，
	  有时并不在 Synopsis (概要) 中指明 port 的名字，
	  尽管我们希望他们这样做)。 因此， <literal>portsmon</literal>
	  在您想要查找是否有人提交某个现存的 port 的 PR，
	  以及它的联编是否出现了错误； 或在您创建新的 port
	  之前想要查找一下是否已经有人提交过时， 就非常有用了。</para>
      </sect1>

    </chapter>
</book>
